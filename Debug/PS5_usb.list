
PS5_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c70  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08008e1c  08008e1c  00009e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e84  08008e84  0000a190  2**0
                  CONTENTS
  4 .ARM          00000008  08008e84  08008e84  00009e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e8c  08008e8c  0000a190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e8c  08008e8c  00009e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e90  08008e90  00009e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000190  20000000  08008e94  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a190  2**0
                  CONTENTS
 10 .bss          00000b00  20000190  20000190  0000a190  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c90  20000c90  0000a190  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a190  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014402  00000000  00000000  0000a1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036da  00000000  00000000  0001e5c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  00021ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000be7  00000000  00000000  00022c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027330  00000000  00000000  0002383f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016377  00000000  00000000  0004ab6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2d6f  00000000  00000000  00060ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00143c55  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004100  00000000  00000000  00143c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003f  00000000  00000000  00147d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000190 	.word	0x20000190
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008e04 	.word	0x08008e04

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000194 	.word	0x20000194
 80001e8:	08008e04 	.word	0x08008e04

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	@ 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__aeabi_d2iz>:
 8000988:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800098c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000990:	d215      	bcs.n	80009be <__aeabi_d2iz+0x36>
 8000992:	d511      	bpl.n	80009b8 <__aeabi_d2iz+0x30>
 8000994:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000998:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800099c:	d912      	bls.n	80009c4 <__aeabi_d2iz+0x3c>
 800099e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ae:	fa23 f002 	lsr.w	r0, r3, r2
 80009b2:	bf18      	it	ne
 80009b4:	4240      	negne	r0, r0
 80009b6:	4770      	bx	lr
 80009b8:	f04f 0000 	mov.w	r0, #0
 80009bc:	4770      	bx	lr
 80009be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c2:	d105      	bne.n	80009d0 <__aeabi_d2iz+0x48>
 80009c4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009c8:	bf08      	it	eq
 80009ca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ce:	4770      	bx	lr
 80009d0:	f04f 0000 	mov.w	r0, #0
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <__aeabi_uldivmod>:
 80009d8:	b953      	cbnz	r3, 80009f0 <__aeabi_uldivmod+0x18>
 80009da:	b94a      	cbnz	r2, 80009f0 <__aeabi_uldivmod+0x18>
 80009dc:	2900      	cmp	r1, #0
 80009de:	bf08      	it	eq
 80009e0:	2800      	cmpeq	r0, #0
 80009e2:	bf1c      	itt	ne
 80009e4:	f04f 31ff 	movne.w	r1, #4294967295
 80009e8:	f04f 30ff 	movne.w	r0, #4294967295
 80009ec:	f000 b96a 	b.w	8000cc4 <__aeabi_idiv0>
 80009f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009f8:	f000 f806 	bl	8000a08 <__udivmoddi4>
 80009fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a04:	b004      	add	sp, #16
 8000a06:	4770      	bx	lr

08000a08 <__udivmoddi4>:
 8000a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a0c:	9d08      	ldr	r5, [sp, #32]
 8000a0e:	460c      	mov	r4, r1
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d14e      	bne.n	8000ab2 <__udivmoddi4+0xaa>
 8000a14:	4694      	mov	ip, r2
 8000a16:	458c      	cmp	ip, r1
 8000a18:	4686      	mov	lr, r0
 8000a1a:	fab2 f282 	clz	r2, r2
 8000a1e:	d962      	bls.n	8000ae6 <__udivmoddi4+0xde>
 8000a20:	b14a      	cbz	r2, 8000a36 <__udivmoddi4+0x2e>
 8000a22:	f1c2 0320 	rsb	r3, r2, #32
 8000a26:	4091      	lsls	r1, r2
 8000a28:	fa20 f303 	lsr.w	r3, r0, r3
 8000a2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a30:	4319      	orrs	r1, r3
 8000a32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a3a:	fa1f f68c 	uxth.w	r6, ip
 8000a3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a46:	fb07 1114 	mls	r1, r7, r4, r1
 8000a4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a4e:	fb04 f106 	mul.w	r1, r4, r6
 8000a52:	4299      	cmp	r1, r3
 8000a54:	d90a      	bls.n	8000a6c <__udivmoddi4+0x64>
 8000a56:	eb1c 0303 	adds.w	r3, ip, r3
 8000a5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a5e:	f080 8112 	bcs.w	8000c86 <__udivmoddi4+0x27e>
 8000a62:	4299      	cmp	r1, r3
 8000a64:	f240 810f 	bls.w	8000c86 <__udivmoddi4+0x27e>
 8000a68:	3c02      	subs	r4, #2
 8000a6a:	4463      	add	r3, ip
 8000a6c:	1a59      	subs	r1, r3, r1
 8000a6e:	fa1f f38e 	uxth.w	r3, lr
 8000a72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a76:	fb07 1110 	mls	r1, r7, r0, r1
 8000a7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7e:	fb00 f606 	mul.w	r6, r0, r6
 8000a82:	429e      	cmp	r6, r3
 8000a84:	d90a      	bls.n	8000a9c <__udivmoddi4+0x94>
 8000a86:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a8e:	f080 80fc 	bcs.w	8000c8a <__udivmoddi4+0x282>
 8000a92:	429e      	cmp	r6, r3
 8000a94:	f240 80f9 	bls.w	8000c8a <__udivmoddi4+0x282>
 8000a98:	4463      	add	r3, ip
 8000a9a:	3802      	subs	r0, #2
 8000a9c:	1b9b      	subs	r3, r3, r6
 8000a9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	b11d      	cbz	r5, 8000aae <__udivmoddi4+0xa6>
 8000aa6:	40d3      	lsrs	r3, r2
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	e9c5 3200 	strd	r3, r2, [r5]
 8000aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab2:	428b      	cmp	r3, r1
 8000ab4:	d905      	bls.n	8000ac2 <__udivmoddi4+0xba>
 8000ab6:	b10d      	cbz	r5, 8000abc <__udivmoddi4+0xb4>
 8000ab8:	e9c5 0100 	strd	r0, r1, [r5]
 8000abc:	2100      	movs	r1, #0
 8000abe:	4608      	mov	r0, r1
 8000ac0:	e7f5      	b.n	8000aae <__udivmoddi4+0xa6>
 8000ac2:	fab3 f183 	clz	r1, r3
 8000ac6:	2900      	cmp	r1, #0
 8000ac8:	d146      	bne.n	8000b58 <__udivmoddi4+0x150>
 8000aca:	42a3      	cmp	r3, r4
 8000acc:	d302      	bcc.n	8000ad4 <__udivmoddi4+0xcc>
 8000ace:	4290      	cmp	r0, r2
 8000ad0:	f0c0 80f0 	bcc.w	8000cb4 <__udivmoddi4+0x2ac>
 8000ad4:	1a86      	subs	r6, r0, r2
 8000ad6:	eb64 0303 	sbc.w	r3, r4, r3
 8000ada:	2001      	movs	r0, #1
 8000adc:	2d00      	cmp	r5, #0
 8000ade:	d0e6      	beq.n	8000aae <__udivmoddi4+0xa6>
 8000ae0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ae4:	e7e3      	b.n	8000aae <__udivmoddi4+0xa6>
 8000ae6:	2a00      	cmp	r2, #0
 8000ae8:	f040 8090 	bne.w	8000c0c <__udivmoddi4+0x204>
 8000aec:	eba1 040c 	sub.w	r4, r1, ip
 8000af0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af4:	fa1f f78c 	uxth.w	r7, ip
 8000af8:	2101      	movs	r1, #1
 8000afa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000afe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b02:	fb08 4416 	mls	r4, r8, r6, r4
 8000b06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b0a:	fb07 f006 	mul.w	r0, r7, r6
 8000b0e:	4298      	cmp	r0, r3
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x11c>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b1a:	d202      	bcs.n	8000b22 <__udivmoddi4+0x11a>
 8000b1c:	4298      	cmp	r0, r3
 8000b1e:	f200 80cd 	bhi.w	8000cbc <__udivmoddi4+0x2b4>
 8000b22:	4626      	mov	r6, r4
 8000b24:	1a1c      	subs	r4, r3, r0
 8000b26:	fa1f f38e 	uxth.w	r3, lr
 8000b2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000b32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b36:	fb00 f707 	mul.w	r7, r0, r7
 8000b3a:	429f      	cmp	r7, r3
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x148>
 8000b3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x146>
 8000b48:	429f      	cmp	r7, r3
 8000b4a:	f200 80b0 	bhi.w	8000cae <__udivmoddi4+0x2a6>
 8000b4e:	4620      	mov	r0, r4
 8000b50:	1bdb      	subs	r3, r3, r7
 8000b52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b56:	e7a5      	b.n	8000aa4 <__udivmoddi4+0x9c>
 8000b58:	f1c1 0620 	rsb	r6, r1, #32
 8000b5c:	408b      	lsls	r3, r1
 8000b5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000b62:	431f      	orrs	r7, r3
 8000b64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b68:	fa04 f301 	lsl.w	r3, r4, r1
 8000b6c:	ea43 030c 	orr.w	r3, r3, ip
 8000b70:	40f4      	lsrs	r4, r6
 8000b72:	fa00 f801 	lsl.w	r8, r0, r1
 8000b76:	0c38      	lsrs	r0, r7, #16
 8000b78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000b80:	fa1f fc87 	uxth.w	ip, r7
 8000b84:	fb00 441e 	mls	r4, r0, lr, r4
 8000b88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000b90:	45a1      	cmp	r9, r4
 8000b92:	fa02 f201 	lsl.w	r2, r2, r1
 8000b96:	d90a      	bls.n	8000bae <__udivmoddi4+0x1a6>
 8000b98:	193c      	adds	r4, r7, r4
 8000b9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b9e:	f080 8084 	bcs.w	8000caa <__udivmoddi4+0x2a2>
 8000ba2:	45a1      	cmp	r9, r4
 8000ba4:	f240 8081 	bls.w	8000caa <__udivmoddi4+0x2a2>
 8000ba8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bac:	443c      	add	r4, r7
 8000bae:	eba4 0409 	sub.w	r4, r4, r9
 8000bb2:	fa1f f983 	uxth.w	r9, r3
 8000bb6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bba:	fb00 4413 	mls	r4, r0, r3, r4
 8000bbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bc6:	45a4      	cmp	ip, r4
 8000bc8:	d907      	bls.n	8000bda <__udivmoddi4+0x1d2>
 8000bca:	193c      	adds	r4, r7, r4
 8000bcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bd0:	d267      	bcs.n	8000ca2 <__udivmoddi4+0x29a>
 8000bd2:	45a4      	cmp	ip, r4
 8000bd4:	d965      	bls.n	8000ca2 <__udivmoddi4+0x29a>
 8000bd6:	3b02      	subs	r3, #2
 8000bd8:	443c      	add	r4, r7
 8000bda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bde:	fba0 9302 	umull	r9, r3, r0, r2
 8000be2:	eba4 040c 	sub.w	r4, r4, ip
 8000be6:	429c      	cmp	r4, r3
 8000be8:	46ce      	mov	lr, r9
 8000bea:	469c      	mov	ip, r3
 8000bec:	d351      	bcc.n	8000c92 <__udivmoddi4+0x28a>
 8000bee:	d04e      	beq.n	8000c8e <__udivmoddi4+0x286>
 8000bf0:	b155      	cbz	r5, 8000c08 <__udivmoddi4+0x200>
 8000bf2:	ebb8 030e 	subs.w	r3, r8, lr
 8000bf6:	eb64 040c 	sbc.w	r4, r4, ip
 8000bfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000bfe:	40cb      	lsrs	r3, r1
 8000c00:	431e      	orrs	r6, r3
 8000c02:	40cc      	lsrs	r4, r1
 8000c04:	e9c5 6400 	strd	r6, r4, [r5]
 8000c08:	2100      	movs	r1, #0
 8000c0a:	e750      	b.n	8000aae <__udivmoddi4+0xa6>
 8000c0c:	f1c2 0320 	rsb	r3, r2, #32
 8000c10:	fa20 f103 	lsr.w	r1, r0, r3
 8000c14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c18:	fa24 f303 	lsr.w	r3, r4, r3
 8000c1c:	4094      	lsls	r4, r2
 8000c1e:	430c      	orrs	r4, r1
 8000c20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c28:	fa1f f78c 	uxth.w	r7, ip
 8000c2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c30:	fb08 3110 	mls	r1, r8, r0, r3
 8000c34:	0c23      	lsrs	r3, r4, #16
 8000c36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3a:	fb00 f107 	mul.w	r1, r0, r7
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x24c>
 8000c42:	eb1c 0303 	adds.w	r3, ip, r3
 8000c46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c4a:	d22c      	bcs.n	8000ca6 <__udivmoddi4+0x29e>
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d92a      	bls.n	8000ca6 <__udivmoddi4+0x29e>
 8000c50:	3802      	subs	r0, #2
 8000c52:	4463      	add	r3, ip
 8000c54:	1a5b      	subs	r3, r3, r1
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000c60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c64:	fb01 f307 	mul.w	r3, r1, r7
 8000c68:	42a3      	cmp	r3, r4
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x276>
 8000c6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c74:	d213      	bcs.n	8000c9e <__udivmoddi4+0x296>
 8000c76:	42a3      	cmp	r3, r4
 8000c78:	d911      	bls.n	8000c9e <__udivmoddi4+0x296>
 8000c7a:	3902      	subs	r1, #2
 8000c7c:	4464      	add	r4, ip
 8000c7e:	1ae4      	subs	r4, r4, r3
 8000c80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c84:	e739      	b.n	8000afa <__udivmoddi4+0xf2>
 8000c86:	4604      	mov	r4, r0
 8000c88:	e6f0      	b.n	8000a6c <__udivmoddi4+0x64>
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e706      	b.n	8000a9c <__udivmoddi4+0x94>
 8000c8e:	45c8      	cmp	r8, r9
 8000c90:	d2ae      	bcs.n	8000bf0 <__udivmoddi4+0x1e8>
 8000c92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c9a:	3801      	subs	r0, #1
 8000c9c:	e7a8      	b.n	8000bf0 <__udivmoddi4+0x1e8>
 8000c9e:	4631      	mov	r1, r6
 8000ca0:	e7ed      	b.n	8000c7e <__udivmoddi4+0x276>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	e799      	b.n	8000bda <__udivmoddi4+0x1d2>
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	e7d4      	b.n	8000c54 <__udivmoddi4+0x24c>
 8000caa:	46d6      	mov	lr, sl
 8000cac:	e77f      	b.n	8000bae <__udivmoddi4+0x1a6>
 8000cae:	4463      	add	r3, ip
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	e74d      	b.n	8000b50 <__udivmoddi4+0x148>
 8000cb4:	4606      	mov	r6, r0
 8000cb6:	4623      	mov	r3, r4
 8000cb8:	4608      	mov	r0, r1
 8000cba:	e70f      	b.n	8000adc <__udivmoddi4+0xd4>
 8000cbc:	3e02      	subs	r6, #2
 8000cbe:	4463      	add	r3, ip
 8000cc0:	e730      	b.n	8000b24 <__udivmoddi4+0x11c>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_idiv0>:
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <HAL_ADC_ConvCpltCallback>:
extern int mouse_x; // Biến toàn cục để lưu trữ giá trị dịch chuyển chuột theo trục X
extern int mouse_y; // Biến toàn cục để lưu trữ giá trị dịch chuyển chuột theo trục Y
extern int move_x; // Biến toàn cục để lưu trữ giá trị dịch chuyển joystick theo trục X
extern int move_y; // Biến toàn cục để lưu trữ giá trị dịch chuyển joystick theo trục Y

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
    if (hadc == &hadc1) {
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a13      	ldr	r2, [pc, #76]	@ (8000d20 <HAL_ADC_ConvCpltCallback+0x58>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d11f      	bne.n	8000d18 <HAL_ADC_ConvCpltCallback+0x50>
        move_x = ConvertADCValues(adc_buffer[0]); // Chuyển đổi giá trị ADC từ kênh 0
 8000cd8:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 f82b 	bl	8000d38 <ConvertADCValues>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	4a10      	ldr	r2, [pc, #64]	@ (8000d28 <HAL_ADC_ConvCpltCallback+0x60>)
 8000ce6:	6013      	str	r3, [r2, #0]
        move_y = ConvertADCValues(adc_buffer[1]); // Chuyển đổi giá
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000cea:	885b      	ldrh	r3, [r3, #2]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 f823 	bl	8000d38 <ConvertADCValues>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d2c <HAL_ADC_ConvCpltCallback+0x64>)
 8000cf6:	6013      	str	r3, [r2, #0]
        mouse_x = ConvertADCValues(adc_buffer[2]); // Chuyển đổi giá trị ADC từ kênh 2
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000d24 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000cfa:	889b      	ldrh	r3, [r3, #4]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 f81b 	bl	8000d38 <ConvertADCValues>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4a0a      	ldr	r2, [pc, #40]	@ (8000d30 <HAL_ADC_ConvCpltCallback+0x68>)
 8000d06:	6013      	str	r3, [r2, #0]
        mouse_y = ConvertADCValues(adc_buffer[3]); // Chuyển đổi giá trị ADC từ kênh 3
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000d0a:	88db      	ldrh	r3, [r3, #6]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 f813 	bl	8000d38 <ConvertADCValues>
 8000d12:	4603      	mov	r3, r0
 8000d14:	4a07      	ldr	r2, [pc, #28]	@ (8000d34 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000d16:	6013      	str	r3, [r2, #0]
    }
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200001b4 	.word	0x200001b4
 8000d24:	200001ac 	.word	0x200001ac
 8000d28:	200002a4 	.word	0x200002a4
 8000d2c:	200002a8 	.word	0x200002a8
 8000d30:	200002ac 	.word	0x200002ac
 8000d34:	200002b0 	.word	0x200002b0

08000d38 <ConvertADCValues>:



int ConvertADCValues(uint16_t value){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	80fb      	strh	r3, [r7, #6]
    int rawValue = (int)value; // Chuyển đổi giá trị ADC sang kiểu int
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	61bb      	str	r3, [r7, #24]
    rawValue -= 2048; // Giả sử giá trị ADC nằm trong khoảng 0-4095, trừ đi 2048 để đưa về khoảng -2048 đến 2047
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000d4c:	61bb      	str	r3, [r7, #24]
    int deadzone = 200; // Giả sử bạn muốn bỏ qua các giá trị nhỏ hơn 10
 8000d4e:	23c8      	movs	r3, #200	@ 0xc8
 8000d50:	617b      	str	r3, [r7, #20]
    int upper_limit = 50;
 8000d52:	2332      	movs	r3, #50	@ 0x32
 8000d54:	613b      	str	r3, [r7, #16]
    double scale = upper_limit * 1.0 / 2048.0; 
 8000d56:	6938      	ldr	r0, [r7, #16]
 8000d58:	f7ff fb9a 	bl	8000490 <__aeabi_i2d>
 8000d5c:	f04f 0200 	mov.w	r2, #0
 8000d60:	4b19      	ldr	r3, [pc, #100]	@ (8000dc8 <ConvertADCValues+0x90>)
 8000d62:	f7ff fd29 	bl	80007b8 <__aeabi_ddiv>
 8000d66:	4602      	mov	r2, r0
 8000d68:	460b      	mov	r3, r1
 8000d6a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    if (abs(rawValue) < deadzone) {
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	bfb8      	it	lt
 8000d74:	425b      	neglt	r3, r3
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	dd01      	ble.n	8000d80 <ConvertADCValues+0x48>
        return 0; // Trả về 0 nếu giá trị nhỏ hơn deadzone
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	e01e      	b.n	8000dbe <ConvertADCValues+0x86>
    }
    int converted_value = (int)(rawValue * scale);
 8000d80:	69b8      	ldr	r0, [r7, #24]
 8000d82:	f7ff fb85 	bl	8000490 <__aeabi_i2d>
 8000d86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d8a:	f7ff fbeb 	bl	8000564 <__aeabi_dmul>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	460b      	mov	r3, r1
 8000d92:	4610      	mov	r0, r2
 8000d94:	4619      	mov	r1, r3
 8000d96:	f7ff fdf7 	bl	8000988 <__aeabi_d2iz>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	61fb      	str	r3, [r7, #28]
    if (converted_value > upper_limit) {
 8000d9e:	69fa      	ldr	r2, [r7, #28]
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	dd02      	ble.n	8000dac <ConvertADCValues+0x74>
        converted_value = upper_limit; // Giới hạn giá trị tối đa là 127
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	61fb      	str	r3, [r7, #28]
 8000daa:	e007      	b.n	8000dbc <ConvertADCValues+0x84>
    } else if (converted_value < -upper_limit) {
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	425b      	negs	r3, r3
 8000db0:	69fa      	ldr	r2, [r7, #28]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	da02      	bge.n	8000dbc <ConvertADCValues+0x84>
        converted_value = -upper_limit; // Giới hạn giá trị tối thiểu là -127
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	425b      	negs	r3, r3
 8000dba:	61fb      	str	r3, [r7, #28]
    }
    return converted_value; // Trả về giá trị đã chuyển đổi
 8000dbc:	69fb      	ldr	r3, [r7, #28]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3720      	adds	r7, #32
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40a00000 	.word	0x40a00000

08000dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd2:	f000 fd13 	bl	80017fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd6:	f000 f8b1 	bl	8000f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dda:	f000 f9df 	bl	800119c <MX_GPIO_Init>
  MX_DMA_Init();
 8000dde:	f000 f9bd 	bl	800115c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000de2:	f007 fb7b 	bl	80084dc <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000de6:	f000 f913 	bl	8001010 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000dea:	f000 f98d 	bl	8001108 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE); // Bắt đầu chuyển đổi ADC với DMA
 8000dee:	2204      	movs	r2, #4
 8000df0:	494a      	ldr	r1, [pc, #296]	@ (8000f1c <main+0x150>)
 8000df2:	484b      	ldr	r0, [pc, #300]	@ (8000f20 <main+0x154>)
 8000df4:	f000 feec 	bl	8001bd0 <HAL_ADC_Start_DMA>
  int8_t limit = 15;
 8000df8:	230f      	movs	r3, #15
 8000dfa:	77fb      	strb	r3, [r7, #31]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    KeyboardReport_t keyboard_report = {0};
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	721a      	strb	r2, [r3, #8]
    keyboard_report.report_id = 0x01; // ID báo cáo luôn là 0x01
 8000e08:	2301      	movs	r3, #1
 8000e0a:	733b      	strb	r3, [r7, #12]
    MouseReport_t mouse_report = {0};
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	711a      	strb	r2, [r3, #4]
    mouse_report.report_id = 0x02; // ID báo cáo chuột là 0x02
 8000e14:	2302      	movs	r3, #2
 8000e16:	713b      	strb	r3, [r7, #4]
   if (move_x < -limit){
 8000e18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e1c:	425a      	negs	r2, r3
 8000e1e:	4b41      	ldr	r3, [pc, #260]	@ (8000f24 <main+0x158>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	dd06      	ble.n	8000e34 <main+0x68>
     AddKeyToReport(&keyboard_report, KEY_A);
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	2104      	movs	r1, #4
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 fa47 	bl	80012c0 <AddKeyToReport>
 8000e32:	e00b      	b.n	8000e4c <main+0x80>
   }
   else if (move_x > limit){
 8000e34:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8000e38:	4b3a      	ldr	r3, [pc, #232]	@ (8000f24 <main+0x158>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	da05      	bge.n	8000e4c <main+0x80>
     AddKeyToReport(&keyboard_report, KEY_D);
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	2107      	movs	r1, #7
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 fa3a 	bl	80012c0 <AddKeyToReport>
   }
  if (move_y < -limit){
 8000e4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e50:	425a      	negs	r2, r3
 8000e52:	4b35      	ldr	r3, [pc, #212]	@ (8000f28 <main+0x15c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	dd06      	ble.n	8000e68 <main+0x9c>
    AddKeyToReport(&keyboard_report, KEY_W);
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	211a      	movs	r1, #26
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 fa2d 	bl	80012c0 <AddKeyToReport>
 8000e66:	e00b      	b.n	8000e80 <main+0xb4>
  }
  else if (move_y > limit){
 8000e68:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8000e6c:	4b2e      	ldr	r3, [pc, #184]	@ (8000f28 <main+0x15c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	da05      	bge.n	8000e80 <main+0xb4>
    AddKeyToReport(&keyboard_report, KEY_S);
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	2116      	movs	r1, #22
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 fa20 	bl	80012c0 <AddKeyToReport>
  }
    CreateKeyboardReport(&keyboard_report); // Tạo báo cáo bàn phím từ các nút nhấn
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 fa63 	bl	8001350 <CreateKeyboardReport>
    int res = USBD_HID_SendReport(&hUsbDeviceHS, (uint8_t*)&keyboard_report, sizeof(keyboard_report));
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	2209      	movs	r2, #9
 8000e90:	4619      	mov	r1, r3
 8000e92:	4826      	ldr	r0, [pc, #152]	@ (8000f2c <main+0x160>)
 8000e94:	f005 ff82 	bl	8006d9c <USBD_HID_SendReport>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	61bb      	str	r3, [r7, #24]

    if (res != USBD_OK) {
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d006      	beq.n	8000eb0 <main+0xe4>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET); // Bật đèn LED nếu gửi báo cáo không thành công
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ea8:	4821      	ldr	r0, [pc, #132]	@ (8000f30 <main+0x164>)
 8000eaa:	f002 f8c3 	bl	8003034 <HAL_GPIO_WritePin>
 8000eae:	e005      	b.n	8000ebc <main+0xf0>
    }
     else {
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000eb6:	481e      	ldr	r0, [pc, #120]	@ (8000f30 <main+0x164>)
 8000eb8:	f002 f8bc 	bl	8003034 <HAL_GPIO_WritePin>
     }       // Tắt đèn LED nếu gửi báo cáo thành công
    HAL_Delay(5);
 8000ebc:	2005      	movs	r0, #5
 8000ebe:	f000 fd0f 	bl	80018e0 <HAL_Delay>

    mouse_report.x = mouse_x; // Cập nhật giá trị dịch chuyển chuột theo trục X
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f34 <main+0x168>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	71bb      	strb	r3, [r7, #6]
    mouse_report.y = mouse_y; // Cập nhật giá trị dịch chuyển chuột theo trục Y
 8000eca:	4b1b      	ldr	r3, [pc, #108]	@ (8000f38 <main+0x16c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	b25b      	sxtb	r3, r3
 8000ed0:	71fb      	strb	r3, [r7, #7]
    mouse_report.wheel = 0; // Không sử dụng cuộn chuột trong trường hợp này
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	723b      	strb	r3, [r7, #8]
    mouse_report.buttons = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	717b      	strb	r3, [r7, #5]
    CreateMouseReport(&mouse_report); // Tạo báo cáo chuột từ các nút nhấn
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 fabb 	bl	8001458 <CreateMouseReport>
    res = USBD_HID_SendReport(&hUsbDeviceHS, (uint8_t*)&mouse_report, sizeof(mouse_report));
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2205      	movs	r2, #5
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4810      	ldr	r0, [pc, #64]	@ (8000f2c <main+0x160>)
 8000eea:	f005 ff57 	bl	8006d9c <USBD_HID_SendReport>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	61bb      	str	r3, [r7, #24]
    if (res != USBD_OK) {
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d006      	beq.n	8000f06 <main+0x13a>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET); // Bật đèn LED nếu gửi báo cáo không thành công
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000efe:	480c      	ldr	r0, [pc, #48]	@ (8000f30 <main+0x164>)
 8000f00:	f002 f898 	bl	8003034 <HAL_GPIO_WritePin>
 8000f04:	e005      	b.n	8000f12 <main+0x146>
    }
    else {
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET); // Tắt đèn LED nếu gửi báo cáo thành công
 8000f06:	2200      	movs	r2, #0
 8000f08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f0c:	4808      	ldr	r0, [pc, #32]	@ (8000f30 <main+0x164>)
 8000f0e:	f002 f891 	bl	8003034 <HAL_GPIO_WritePin>
//     snprintf(msg, sizeof(msg), "ADC: %d %d %d %d\r\n",
//              move_x, move_y, mouse_x, mouse_y);
//
//     // Gửi qua UART1
//     HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    HAL_Delay(5);
 8000f12:	2005      	movs	r0, #5
 8000f14:	f000 fce4 	bl	80018e0 <HAL_Delay>
  {
 8000f18:	e770      	b.n	8000dfc <main+0x30>
 8000f1a:	bf00      	nop
 8000f1c:	200001ac 	.word	0x200001ac
 8000f20:	200001b4 	.word	0x200001b4
 8000f24:	200002a4 	.word	0x200002a4
 8000f28:	200002a8 	.word	0x200002a8
 8000f2c:	200002bc 	.word	0x200002bc
 8000f30:	40021800 	.word	0x40021800
 8000f34:	200002ac 	.word	0x200002ac
 8000f38:	200002b0 	.word	0x200002b0

08000f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b094      	sub	sp, #80	@ 0x50
 8000f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	f107 0320 	add.w	r3, r7, #32
 8000f46:	2230      	movs	r2, #48	@ 0x30
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f007 ff2e 	bl	8008dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	4b28      	ldr	r3, [pc, #160]	@ (8001008 <SystemClock_Config+0xcc>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f68:	4a27      	ldr	r2, [pc, #156]	@ (8001008 <SystemClock_Config+0xcc>)
 8000f6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f70:	4b25      	ldr	r3, [pc, #148]	@ (8001008 <SystemClock_Config+0xcc>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	4b22      	ldr	r3, [pc, #136]	@ (800100c <SystemClock_Config+0xd0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a21      	ldr	r2, [pc, #132]	@ (800100c <SystemClock_Config+0xd0>)
 8000f86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <SystemClock_Config+0xd0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fac:	2304      	movs	r3, #4
 8000fae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fb0:	23a8      	movs	r3, #168	@ 0xa8
 8000fb2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbc:	f107 0320 	add.w	r3, r7, #32
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f003 fa8b 	bl	80044dc <HAL_RCC_OscConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fcc:	f000 f972 	bl	80012b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fdc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fe0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fe2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2105      	movs	r1, #5
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f003 fcec 	bl	80049cc <HAL_RCC_ClockConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ffa:	f000 f95b 	bl	80012b4 <Error_Handler>
  }
}
 8000ffe:	bf00      	nop
 8001000:	3750      	adds	r7, #80	@ 0x50
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	40007000 	.word	0x40007000

08001010 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001016:	463b      	mov	r3, r7
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001022:	4b36      	ldr	r3, [pc, #216]	@ (80010fc <MX_ADC1_Init+0xec>)
 8001024:	4a36      	ldr	r2, [pc, #216]	@ (8001100 <MX_ADC1_Init+0xf0>)
 8001026:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001028:	4b34      	ldr	r3, [pc, #208]	@ (80010fc <MX_ADC1_Init+0xec>)
 800102a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800102e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001030:	4b32      	ldr	r3, [pc, #200]	@ (80010fc <MX_ADC1_Init+0xec>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001036:	4b31      	ldr	r3, [pc, #196]	@ (80010fc <MX_ADC1_Init+0xec>)
 8001038:	2201      	movs	r2, #1
 800103a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800103c:	4b2f      	ldr	r3, [pc, #188]	@ (80010fc <MX_ADC1_Init+0xec>)
 800103e:	2201      	movs	r2, #1
 8001040:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001042:	4b2e      	ldr	r3, [pc, #184]	@ (80010fc <MX_ADC1_Init+0xec>)
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800104a:	4b2c      	ldr	r3, [pc, #176]	@ (80010fc <MX_ADC1_Init+0xec>)
 800104c:	2200      	movs	r2, #0
 800104e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001050:	4b2a      	ldr	r3, [pc, #168]	@ (80010fc <MX_ADC1_Init+0xec>)
 8001052:	4a2c      	ldr	r2, [pc, #176]	@ (8001104 <MX_ADC1_Init+0xf4>)
 8001054:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001056:	4b29      	ldr	r3, [pc, #164]	@ (80010fc <MX_ADC1_Init+0xec>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800105c:	4b27      	ldr	r3, [pc, #156]	@ (80010fc <MX_ADC1_Init+0xec>)
 800105e:	2204      	movs	r2, #4
 8001060:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001062:	4b26      	ldr	r3, [pc, #152]	@ (80010fc <MX_ADC1_Init+0xec>)
 8001064:	2201      	movs	r2, #1
 8001066:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800106a:	4b24      	ldr	r3, [pc, #144]	@ (80010fc <MX_ADC1_Init+0xec>)
 800106c:	2200      	movs	r2, #0
 800106e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001070:	4822      	ldr	r0, [pc, #136]	@ (80010fc <MX_ADC1_Init+0xec>)
 8001072:	f000 fc59 	bl	8001928 <HAL_ADC_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800107c:	f000 f91a 	bl	80012b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001080:	2306      	movs	r3, #6
 8001082:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001084:	2301      	movs	r3, #1
 8001086:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001088:	2307      	movs	r3, #7
 800108a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4619      	mov	r1, r3
 8001090:	481a      	ldr	r0, [pc, #104]	@ (80010fc <MX_ADC1_Init+0xec>)
 8001092:	f000 fecf 	bl	8001e34 <HAL_ADC_ConfigChannel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800109c:	f000 f90a 	bl	80012b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80010a0:	2307      	movs	r3, #7
 80010a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80010a4:	2302      	movs	r3, #2
 80010a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	4619      	mov	r1, r3
 80010ac:	4813      	ldr	r0, [pc, #76]	@ (80010fc <MX_ADC1_Init+0xec>)
 80010ae:	f000 fec1 	bl	8001e34 <HAL_ADC_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010b8:	f000 f8fc 	bl	80012b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010bc:	2303      	movs	r3, #3
 80010be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80010c0:	2303      	movs	r3, #3
 80010c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	480c      	ldr	r0, [pc, #48]	@ (80010fc <MX_ADC1_Init+0xec>)
 80010ca:	f000 feb3 	bl	8001e34 <HAL_ADC_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80010d4:	f000 f8ee 	bl	80012b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010d8:	2305      	movs	r3, #5
 80010da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80010dc:	2304      	movs	r3, #4
 80010de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e0:	463b      	mov	r3, r7
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	@ (80010fc <MX_ADC1_Init+0xec>)
 80010e6:	f000 fea5 	bl	8001e34 <HAL_ADC_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80010f0:	f000 f8e0 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200001b4 	.word	0x200001b4
 8001100:	40012000 	.word	0x40012000
 8001104:	0f000001 	.word	0x0f000001

08001108 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800110c:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <MX_USART1_UART_Init+0x4c>)
 800110e:	4a12      	ldr	r2, [pc, #72]	@ (8001158 <MX_USART1_UART_Init+0x50>)
 8001110:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <MX_USART1_UART_Init+0x4c>)
 8001114:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001118:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <MX_USART1_UART_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <MX_USART1_UART_Init+0x4c>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001126:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <MX_USART1_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800112c:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <MX_USART1_UART_Init+0x4c>)
 800112e:	220c      	movs	r2, #12
 8001130:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <MX_USART1_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_USART1_UART_Init+0x4c>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800113e:	4805      	ldr	r0, [pc, #20]	@ (8001154 <MX_USART1_UART_Init+0x4c>)
 8001140:	f003 fe64 	bl	8004e0c <HAL_UART_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800114a:	f000 f8b3 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2000025c 	.word	0x2000025c
 8001158:	40011000 	.word	0x40011000

0800115c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <MX_DMA_Init+0x3c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a0b      	ldr	r2, [pc, #44]	@ (8001198 <MX_DMA_Init+0x3c>)
 800116c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <MX_DMA_Init+0x3c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	203c      	movs	r0, #60	@ 0x3c
 8001184:	f001 f9eb 	bl	800255e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001188:	203c      	movs	r0, #60	@ 0x3c
 800118a:	f001 fa04 	bl	8002596 <HAL_NVIC_EnableIRQ>

}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800

0800119c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	@ 0x28
 80011a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	4b3b      	ldr	r3, [pc, #236]	@ (80012a4 <MX_GPIO_Init+0x108>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a3a      	ldr	r2, [pc, #232]	@ (80012a4 <MX_GPIO_Init+0x108>)
 80011bc:	f043 0320 	orr.w	r3, r3, #32
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b38      	ldr	r3, [pc, #224]	@ (80012a4 <MX_GPIO_Init+0x108>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0320 	and.w	r3, r3, #32
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b34      	ldr	r3, [pc, #208]	@ (80012a4 <MX_GPIO_Init+0x108>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a33      	ldr	r2, [pc, #204]	@ (80012a4 <MX_GPIO_Init+0x108>)
 80011d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b31      	ldr	r3, [pc, #196]	@ (80012a4 <MX_GPIO_Init+0x108>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	4b2d      	ldr	r3, [pc, #180]	@ (80012a4 <MX_GPIO_Init+0x108>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a2c      	ldr	r2, [pc, #176]	@ (80012a4 <MX_GPIO_Init+0x108>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b2a      	ldr	r3, [pc, #168]	@ (80012a4 <MX_GPIO_Init+0x108>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	4b26      	ldr	r3, [pc, #152]	@ (80012a4 <MX_GPIO_Init+0x108>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a25      	ldr	r2, [pc, #148]	@ (80012a4 <MX_GPIO_Init+0x108>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b23      	ldr	r3, [pc, #140]	@ (80012a4 <MX_GPIO_Init+0x108>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	4b1f      	ldr	r3, [pc, #124]	@ (80012a4 <MX_GPIO_Init+0x108>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a1e      	ldr	r2, [pc, #120]	@ (80012a4 <MX_GPIO_Init+0x108>)
 800122c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b1c      	ldr	r3, [pc, #112]	@ (80012a4 <MX_GPIO_Init+0x108>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001244:	4818      	ldr	r0, [pc, #96]	@ (80012a8 <MX_GPIO_Init+0x10c>)
 8001246:	f001 fef5 	bl	8003034 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : btnE_Pin btnQ_Pin btnTab_Pin btnZ_Pin
                           btn1_Pin btn2_Pin btn3_Pin btn4_Pin
                           btnSpace_Pin btnX_Pin leftMouse_Pin rightMouse_Pin
                           btnL_Pin btnEsc_Pin */
  GPIO_InitStruct.Pin = btnE_Pin|btnQ_Pin|btnTab_Pin|btnZ_Pin
 800124a:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 800124e:	617b      	str	r3, [r7, #20]
                          |btn1_Pin|btn2_Pin|btn3_Pin|btn4_Pin
                          |btnSpace_Pin|btnX_Pin|leftMouse_Pin|rightMouse_Pin
                          |btnL_Pin|btnEsc_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001250:	2300      	movs	r3, #0
 8001252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001254:	2302      	movs	r3, #2
 8001256:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	4813      	ldr	r0, [pc, #76]	@ (80012ac <MX_GPIO_Init+0x110>)
 8001260:	f001 fd24 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pin : modifier_Pin */
  GPIO_InitStruct.Pin = modifier_Pin;
 8001264:	2301      	movs	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800126c:	2302      	movs	r3, #2
 800126e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(modifier_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	480e      	ldr	r0, [pc, #56]	@ (80012b0 <MX_GPIO_Init+0x114>)
 8001278:	f001 fd18 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800127c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001286:	2301      	movs	r3, #1
 8001288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4804      	ldr	r0, [pc, #16]	@ (80012a8 <MX_GPIO_Init+0x10c>)
 8001296:	f001 fd09 	bl	8002cac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	@ 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40021800 	.word	0x40021800
 80012ac:	40021400 	.word	0x40021400
 80012b0:	40020000 	.word	0x40020000

080012b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b8:	b672      	cpsid	i
}
 80012ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <Error_Handler+0x8>

080012c0 <AddKeyToReport>:
MapPinKey mpMod[] = { // Mảng chứa các phím modifier
    {btnX_Pin, MOD_LCTRL},
    {btnSpace_Pin, MOD_LSHIFT},
    {btnL_Pin, MOD_LALT}
};
void AddKeyToReport(KeyboardReport_t *report, uint8_t keycode) {
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < 6; i++) {
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	e010      	b.n	80012f4 <AddKeyToReport+0x34>
        if (report->keycodes[i] == 0) { // Tìm vị trí trống
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4413      	add	r3, r2
 80012d8:	3303      	adds	r3, #3
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d106      	bne.n	80012ee <AddKeyToReport+0x2e>
            report->keycodes[i] = keycode;
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	3303      	adds	r3, #3
 80012e8:	78fa      	ldrb	r2, [r7, #3]
 80012ea:	701a      	strb	r2, [r3, #0]
            return;
 80012ec:	e005      	b.n	80012fa <AddKeyToReport+0x3a>
    for (int i = 0; i < 6; i++) {
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3301      	adds	r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b05      	cmp	r3, #5
 80012f8:	ddeb      	ble.n	80012d2 <AddKeyToReport+0x12>
        }
    }
}
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <AddMouseButtonToReport>:
void AddMouseButtonToReport(MouseReport_t *report, uint8_t button) {
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	70fb      	strb	r3, [r7, #3]
    report->buttons |= button; // Thêm nút vào báo cáo
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	785a      	ldrb	r2, [r3, #1]
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	4313      	orrs	r3, r2
 8001318:	b2da      	uxtb	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	705a      	strb	r2, [r3, #1]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <AddModifierToReport>:
void AddModifierToReport(KeyboardReport_t *report, uint8_t modifier) {
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	460b      	mov	r3, r1
 8001334:	70fb      	strb	r3, [r7, #3]
    report->modifier |= modifier; // Thêm modifier vào báo cáo
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	785a      	ldrb	r2, [r3, #1]
 800133a:	78fb      	ldrb	r3, [r7, #3]
 800133c:	4313      	orrs	r3, r2
 800133e:	b2da      	uxtb	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	705a      	strb	r2, [r3, #1]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <CreateKeyboardReport>:
    return 0; // Không thể thay thế
}



void CreateKeyboardReport(KeyboardReport_t *report) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	@ 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
    report->report_id = 0x01; // ID báo cáo bàn phím
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]
    int size = sizeof(mpkArray) / sizeof(MapPinKey);
 800135e:	230c      	movs	r3, #12
 8001360:	61bb      	str	r3, [r7, #24]
    int alternateSize = sizeof(alternateArray) / sizeof(MapPinKey);
 8001362:	2305      	movs	r3, #5
 8001364:	617b      	str	r3, [r7, #20]
    int modSize = sizeof(mpMod) / sizeof(MapPinKey);
 8001366:	2303      	movs	r3, #3
 8001368:	613b      	str	r3, [r7, #16]
    uint8_t isModifierPressed = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET; // Kiểm tra nút PA0
 800136a:	2101      	movs	r1, #1
 800136c:	4835      	ldr	r0, [pc, #212]	@ (8001444 <CreateKeyboardReport+0xf4>)
 800136e:	f001 fe49 	bl	8003004 <HAL_GPIO_ReadPin>
 8001372:	4603      	mov	r3, r0
 8001374:	2b01      	cmp	r3, #1
 8001376:	bf0c      	ite	eq
 8001378:	2301      	moveq	r3, #1
 800137a:	2300      	movne	r3, #0
 800137c:	b2db      	uxtb	r3, r3
 800137e:	73fb      	strb	r3, [r7, #15]
    if (isModifierPressed) {
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d03c      	beq.n	8001400 <CreateKeyboardReport+0xb0>
        // Nếu PA0 được nhấn và phím có thể thay thế, sử dụng giá trị thay thế
        for (int j = 0; j < alternateSize; j++) {
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	@ 0x24
 800138a:	e016      	b.n	80013ba <CreateKeyboardReport+0x6a>
            if (HAL_GPIO_ReadPin(GPIOF, alternateArray[j].pin) == GPIO_PIN_SET)
 800138c:	4a2e      	ldr	r2, [pc, #184]	@ (8001448 <CreateKeyboardReport+0xf8>)
 800138e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001390:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001394:	4619      	mov	r1, r3
 8001396:	482d      	ldr	r0, [pc, #180]	@ (800144c <CreateKeyboardReport+0xfc>)
 8001398:	f001 fe34 	bl	8003004 <HAL_GPIO_ReadPin>
 800139c:	4603      	mov	r3, r0
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d108      	bne.n	80013b4 <CreateKeyboardReport+0x64>
                AddKeyToReport(report, alternateArray[j].keycode);
 80013a2:	4a29      	ldr	r2, [pc, #164]	@ (8001448 <CreateKeyboardReport+0xf8>)
 80013a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	789b      	ldrb	r3, [r3, #2]
 80013ac:	4619      	mov	r1, r3
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ff86 	bl	80012c0 <AddKeyToReport>
        for (int j = 0; j < alternateSize; j++) {
 80013b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b6:	3301      	adds	r3, #1
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	429a      	cmp	r2, r3
 80013c0:	dbe4      	blt.n	800138c <CreateKeyboardReport+0x3c>
        } 
        for (int i = 0; i < modSize; i++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
 80013c6:	e016      	b.n	80013f6 <CreateKeyboardReport+0xa6>
            if (HAL_GPIO_ReadPin(GPIOF, mpMod[i].pin) == GPIO_PIN_SET) {
 80013c8:	4a21      	ldr	r2, [pc, #132]	@ (8001450 <CreateKeyboardReport+0x100>)
 80013ca:	6a3b      	ldr	r3, [r7, #32]
 80013cc:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80013d0:	4619      	mov	r1, r3
 80013d2:	481e      	ldr	r0, [pc, #120]	@ (800144c <CreateKeyboardReport+0xfc>)
 80013d4:	f001 fe16 	bl	8003004 <HAL_GPIO_ReadPin>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d108      	bne.n	80013f0 <CreateKeyboardReport+0xa0>
                AddModifierToReport(report, mpMod[i].keycode);
 80013de:	4a1c      	ldr	r2, [pc, #112]	@ (8001450 <CreateKeyboardReport+0x100>)
 80013e0:	6a3b      	ldr	r3, [r7, #32]
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	789b      	ldrb	r3, [r3, #2]
 80013e8:	4619      	mov	r1, r3
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff ff9d 	bl	800132a <AddModifierToReport>
        for (int i = 0; i < modSize; i++) {
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	3301      	adds	r3, #1
 80013f4:	623b      	str	r3, [r7, #32]
 80013f6:	6a3a      	ldr	r2, [r7, #32]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	dbe4      	blt.n	80013c8 <CreateKeyboardReport+0x78>
                AddKeyToReport(report, mpkArray[i].keycode);
            }
        }
    }
    
}
 80013fe:	e01d      	b.n	800143c <CreateKeyboardReport+0xec>
        for (int i = 0; i < size; i++) {
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
 8001404:	e016      	b.n	8001434 <CreateKeyboardReport+0xe4>
        if (HAL_GPIO_ReadPin(GPIOF, mpkArray[i].pin) == GPIO_PIN_SET) {
 8001406:	4a13      	ldr	r2, [pc, #76]	@ (8001454 <CreateKeyboardReport+0x104>)
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800140e:	4619      	mov	r1, r3
 8001410:	480e      	ldr	r0, [pc, #56]	@ (800144c <CreateKeyboardReport+0xfc>)
 8001412:	f001 fdf7 	bl	8003004 <HAL_GPIO_ReadPin>
 8001416:	4603      	mov	r3, r0
 8001418:	2b01      	cmp	r3, #1
 800141a:	d108      	bne.n	800142e <CreateKeyboardReport+0xde>
                AddKeyToReport(report, mpkArray[i].keycode);
 800141c:	4a0d      	ldr	r2, [pc, #52]	@ (8001454 <CreateKeyboardReport+0x104>)
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	789b      	ldrb	r3, [r3, #2]
 8001426:	4619      	mov	r1, r3
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff49 	bl	80012c0 <AddKeyToReport>
        for (int i = 0; i < size; i++) {
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3301      	adds	r3, #1
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	429a      	cmp	r2, r3
 800143a:	dbe4      	blt.n	8001406 <CreateKeyboardReport+0xb6>
}
 800143c:	bf00      	nop
 800143e:	3728      	adds	r7, #40	@ 0x28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40020000 	.word	0x40020000
 8001448:	20000030 	.word	0x20000030
 800144c:	40021400 	.word	0x40021400
 8001450:	2000004c 	.word	0x2000004c
 8001454:	20000000 	.word	0x20000000

08001458 <CreateMouseReport>:

void CreateMouseReport(MouseReport_t *report) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
    report->report_id = 0x02; // ID báo cáo chuột
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2202      	movs	r2, #2
 8001464:	701a      	strb	r2, [r3, #0]
    int size = sizeof(mpmArray) / sizeof(MapPinMouse);
 8001466:	2302      	movs	r3, #2
 8001468:	613b      	str	r3, [r7, #16]
    uint8_t isModifierPressed = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET; // Kiểm tra nút PA0
 800146a:	2101      	movs	r1, #1
 800146c:	4823      	ldr	r0, [pc, #140]	@ (80014fc <CreateMouseReport+0xa4>)
 800146e:	f001 fdc9 	bl	8003004 <HAL_GPIO_ReadPin>
 8001472:	4603      	mov	r3, r0
 8001474:	2b01      	cmp	r3, #1
 8001476:	bf0c      	ite	eq
 8001478:	2301      	moveq	r3, #1
 800147a:	2300      	movne	r3, #0
 800147c:	b2db      	uxtb	r3, r3
 800147e:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < size; i++) {
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	e016      	b.n	80014b4 <CreateMouseReport+0x5c>
        if (HAL_GPIO_ReadPin(GPIOF, mpmArray[i].pin) == GPIO_PIN_SET) {
 8001486:	4a1e      	ldr	r2, [pc, #120]	@ (8001500 <CreateMouseReport+0xa8>)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800148e:	4619      	mov	r1, r3
 8001490:	481c      	ldr	r0, [pc, #112]	@ (8001504 <CreateMouseReport+0xac>)
 8001492:	f001 fdb7 	bl	8003004 <HAL_GPIO_ReadPin>
 8001496:	4603      	mov	r3, r0
 8001498:	2b01      	cmp	r3, #1
 800149a:	d108      	bne.n	80014ae <CreateMouseReport+0x56>
            AddMouseButtonToReport(report, mpmArray[i].button);
 800149c:	4a18      	ldr	r2, [pc, #96]	@ (8001500 <CreateMouseReport+0xa8>)
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	789b      	ldrb	r3, [r3, #2]
 80014a6:	4619      	mov	r1, r3
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff2b 	bl	8001304 <AddMouseButtonToReport>
    for (int i = 0; i < size; i++) {
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3301      	adds	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	dbe4      	blt.n	8001486 <CreateMouseReport+0x2e>
        }
    }
    if (isModifierPressed) {
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d018      	beq.n	80014f4 <CreateMouseReport+0x9c>
        if (HAL_GPIO_ReadPin(GPIOF, btn2_Pin) == GPIO_PIN_SET) {
 80014c2:	2120      	movs	r1, #32
 80014c4:	480f      	ldr	r0, [pc, #60]	@ (8001504 <CreateMouseReport+0xac>)
 80014c6:	f001 fd9d 	bl	8003004 <HAL_GPIO_ReadPin>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d103      	bne.n	80014d8 <CreateMouseReport+0x80>
            report->wheel = 1; // Dịch chuyển lên
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	711a      	strb	r2, [r3, #4]
            report->wheel = -1; // Dịch chuyển xuống
        } else {
            report->wheel = 0; // Không dịch chuyển
        }
    } 
}
 80014d6:	e00d      	b.n	80014f4 <CreateMouseReport+0x9c>
        } else if (HAL_GPIO_ReadPin(GPIOF, btn4_Pin) == GPIO_PIN_SET) {
 80014d8:	2180      	movs	r1, #128	@ 0x80
 80014da:	480a      	ldr	r0, [pc, #40]	@ (8001504 <CreateMouseReport+0xac>)
 80014dc:	f001 fd92 	bl	8003004 <HAL_GPIO_ReadPin>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d103      	bne.n	80014ee <CreateMouseReport+0x96>
            report->wheel = -1; // Dịch chuyển xuống
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	22ff      	movs	r2, #255	@ 0xff
 80014ea:	711a      	strb	r2, [r3, #4]
}
 80014ec:	e002      	b.n	80014f4 <CreateMouseReport+0x9c>
            report->wheel = 0; // Không dịch chuyển
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	711a      	strb	r2, [r3, #4]
}
 80014f4:	bf00      	nop
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40020000 	.word	0x40020000
 8001500:	20000044 	.word	0x20000044
 8001504:	40021400 	.word	0x40021400

08001508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <HAL_MspInit+0x4c>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001516:	4a0f      	ldr	r2, [pc, #60]	@ (8001554 <HAL_MspInit+0x4c>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800151c:	6453      	str	r3, [r2, #68]	@ 0x44
 800151e:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <HAL_MspInit+0x4c>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	603b      	str	r3, [r7, #0]
 800152e:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <HAL_MspInit+0x4c>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	4a08      	ldr	r2, [pc, #32]	@ (8001554 <HAL_MspInit+0x4c>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001538:	6413      	str	r3, [r2, #64]	@ 0x40
 800153a:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <HAL_MspInit+0x4c>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800

08001558 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	@ 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a33      	ldr	r2, [pc, #204]	@ (8001644 <HAL_ADC_MspInit+0xec>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d160      	bne.n	800163c <HAL_ADC_MspInit+0xe4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b32      	ldr	r3, [pc, #200]	@ (8001648 <HAL_ADC_MspInit+0xf0>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	4a31      	ldr	r2, [pc, #196]	@ (8001648 <HAL_ADC_MspInit+0xf0>)
 8001584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001588:	6453      	str	r3, [r2, #68]	@ 0x44
 800158a:	4b2f      	ldr	r3, [pc, #188]	@ (8001648 <HAL_ADC_MspInit+0xf0>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b2b      	ldr	r3, [pc, #172]	@ (8001648 <HAL_ADC_MspInit+0xf0>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4a2a      	ldr	r2, [pc, #168]	@ (8001648 <HAL_ADC_MspInit+0xf0>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a6:	4b28      	ldr	r3, [pc, #160]	@ (8001648 <HAL_ADC_MspInit+0xf0>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 80015b2:	23ee      	movs	r3, #238	@ 0xee
 80015b4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b6:	2303      	movs	r3, #3
 80015b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4821      	ldr	r0, [pc, #132]	@ (800164c <HAL_ADC_MspInit+0xf4>)
 80015c6:	f001 fb71 	bl	8002cac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80015ca:	4b21      	ldr	r3, [pc, #132]	@ (8001650 <HAL_ADC_MspInit+0xf8>)
 80015cc:	4a21      	ldr	r2, [pc, #132]	@ (8001654 <HAL_ADC_MspInit+0xfc>)
 80015ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80015d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <HAL_ADC_MspInit+0xf8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001650 <HAL_ADC_MspInit+0xf8>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001650 <HAL_ADC_MspInit+0xf8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001650 <HAL_ADC_MspInit+0xf8>)
 80015e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015ea:	4b19      	ldr	r3, [pc, #100]	@ (8001650 <HAL_ADC_MspInit+0xf8>)
 80015ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015f2:	4b17      	ldr	r3, [pc, #92]	@ (8001650 <HAL_ADC_MspInit+0xf8>)
 80015f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015fa:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <HAL_ADC_MspInit+0xf8>)
 80015fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001600:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001602:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <HAL_ADC_MspInit+0xf8>)
 8001604:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001608:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800160a:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <HAL_ADC_MspInit+0xf8>)
 800160c:	2200      	movs	r2, #0
 800160e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001610:	480f      	ldr	r0, [pc, #60]	@ (8001650 <HAL_ADC_MspInit+0xf8>)
 8001612:	f000 ffdb 	bl	80025cc <HAL_DMA_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800161c:	f7ff fe4a 	bl	80012b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a0b      	ldr	r2, [pc, #44]	@ (8001650 <HAL_ADC_MspInit+0xf8>)
 8001624:	639a      	str	r2, [r3, #56]	@ 0x38
 8001626:	4a0a      	ldr	r2, [pc, #40]	@ (8001650 <HAL_ADC_MspInit+0xf8>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	2100      	movs	r1, #0
 8001630:	2012      	movs	r0, #18
 8001632:	f000 ff94 	bl	800255e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001636:	2012      	movs	r0, #18
 8001638:	f000 ffad 	bl	8002596 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800163c:	bf00      	nop
 800163e:	3728      	adds	r7, #40	@ 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40012000 	.word	0x40012000
 8001648:	40023800 	.word	0x40023800
 800164c:	40020000 	.word	0x40020000
 8001650:	200001fc 	.word	0x200001fc
 8001654:	40026470 	.word	0x40026470

08001658 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	@ 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a19      	ldr	r2, [pc, #100]	@ (80016dc <HAL_UART_MspInit+0x84>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d12c      	bne.n	80016d4 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	4b18      	ldr	r3, [pc, #96]	@ (80016e0 <HAL_UART_MspInit+0x88>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001682:	4a17      	ldr	r2, [pc, #92]	@ (80016e0 <HAL_UART_MspInit+0x88>)
 8001684:	f043 0310 	orr.w	r3, r3, #16
 8001688:	6453      	str	r3, [r2, #68]	@ 0x44
 800168a:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <HAL_UART_MspInit+0x88>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <HAL_UART_MspInit+0x88>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	4a10      	ldr	r2, [pc, #64]	@ (80016e0 <HAL_UART_MspInit+0x88>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a6:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <HAL_UART_MspInit+0x88>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016b2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016c4:	2307      	movs	r3, #7
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	4805      	ldr	r0, [pc, #20]	@ (80016e4 <HAL_UART_MspInit+0x8c>)
 80016d0:	f001 faec 	bl	8002cac <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80016d4:	bf00      	nop
 80016d6:	3728      	adds	r7, #40	@ 0x28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40011000 	.word	0x40011000
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020000 	.word	0x40020000

080016e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <NMI_Handler+0x4>

080016f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <HardFault_Handler+0x4>

080016f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <MemManage_Handler+0x4>

08001700 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <BusFault_Handler+0x4>

08001708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <UsageFault_Handler+0x4>

08001710 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800173e:	f000 f8af 	bl	80018a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800174c:	4802      	ldr	r0, [pc, #8]	@ (8001758 <ADC_IRQHandler+0x10>)
 800174e:	f000 f92e 	bl	80019ae <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200001b4 	.word	0x200001b4

0800175c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001760:	4802      	ldr	r0, [pc, #8]	@ (800176c <DMA2_Stream4_IRQHandler+0x10>)
 8001762:	f001 f839 	bl	80027d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200001fc 	.word	0x200001fc

08001770 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001774:	4802      	ldr	r0, [pc, #8]	@ (8001780 <OTG_HS_IRQHandler+0x10>)
 8001776:	f001 fdba 	bl	80032ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000798 	.word	0x20000798

08001784 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <SystemInit+0x20>)
 800178a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800178e:	4a05      	ldr	r2, [pc, #20]	@ (80017a4 <SystemInit+0x20>)
 8001790:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001794:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ac:	f7ff ffea 	bl	8001784 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017b0:	480c      	ldr	r0, [pc, #48]	@ (80017e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017b2:	490d      	ldr	r1, [pc, #52]	@ (80017e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017b4:	4a0d      	ldr	r2, [pc, #52]	@ (80017ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b8:	e002      	b.n	80017c0 <LoopCopyDataInit>

080017ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017be:	3304      	adds	r3, #4

080017c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c4:	d3f9      	bcc.n	80017ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c6:	4a0a      	ldr	r2, [pc, #40]	@ (80017f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017c8:	4c0a      	ldr	r4, [pc, #40]	@ (80017f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017cc:	e001      	b.n	80017d2 <LoopFillZerobss>

080017ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d0:	3204      	adds	r2, #4

080017d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d4:	d3fb      	bcc.n	80017ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017d6:	f007 faf1 	bl	8008dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017da:	f7ff faf7 	bl	8000dcc <main>
  bx  lr    
 80017de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e8:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 80017ec:	08008e94 	.word	0x08008e94
  ldr r2, =_sbss
 80017f0:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 80017f4:	20000c90 	.word	0x20000c90

080017f8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f8:	e7fe      	b.n	80017f8 <CAN1_RX0_IRQHandler>
	...

080017fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001800:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <HAL_Init+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0d      	ldr	r2, [pc, #52]	@ (800183c <HAL_Init+0x40>)
 8001806:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800180a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800180c:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <HAL_Init+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0a      	ldr	r2, [pc, #40]	@ (800183c <HAL_Init+0x40>)
 8001812:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001816:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001818:	4b08      	ldr	r3, [pc, #32]	@ (800183c <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a07      	ldr	r2, [pc, #28]	@ (800183c <HAL_Init+0x40>)
 800181e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001824:	2003      	movs	r0, #3
 8001826:	f000 fe8f 	bl	8002548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800182a:	200f      	movs	r0, #15
 800182c:	f000 f808 	bl	8001840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001830:	f7ff fe6a 	bl	8001508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023c00 	.word	0x40023c00

08001840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001848:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <HAL_InitTick+0x54>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <HAL_InitTick+0x58>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001856:	fbb3 f3f1 	udiv	r3, r3, r1
 800185a:	fbb2 f3f3 	udiv	r3, r2, r3
 800185e:	4618      	mov	r0, r3
 8001860:	f000 fea7 	bl	80025b2 <HAL_SYSTICK_Config>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e00e      	b.n	800188c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b0f      	cmp	r3, #15
 8001872:	d80a      	bhi.n	800188a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001874:	2200      	movs	r2, #0
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	f04f 30ff 	mov.w	r0, #4294967295
 800187c:	f000 fe6f 	bl	800255e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001880:	4a06      	ldr	r2, [pc, #24]	@ (800189c <HAL_InitTick+0x5c>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	e000      	b.n	800188c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000058 	.word	0x20000058
 8001898:	20000060 	.word	0x20000060
 800189c:	2000005c 	.word	0x2000005c

080018a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a4:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_IncTick+0x20>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_IncTick+0x24>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	4a04      	ldr	r2, [pc, #16]	@ (80018c4 <HAL_IncTick+0x24>)
 80018b2:	6013      	str	r3, [r2, #0]
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000060 	.word	0x20000060
 80018c4:	200002b4 	.word	0x200002b4

080018c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return uwTick;
 80018cc:	4b03      	ldr	r3, [pc, #12]	@ (80018dc <HAL_GetTick+0x14>)
 80018ce:	681b      	ldr	r3, [r3, #0]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	200002b4 	.word	0x200002b4

080018e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e8:	f7ff ffee 	bl	80018c8 <HAL_GetTick>
 80018ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f8:	d005      	beq.n	8001906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001924 <HAL_Delay+0x44>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4413      	add	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001906:	bf00      	nop
 8001908:	f7ff ffde 	bl	80018c8 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	429a      	cmp	r2, r3
 8001916:	d8f7      	bhi.n	8001908 <HAL_Delay+0x28>
  {
  }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000060 	.word	0x20000060

08001928 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e033      	b.n	80019a6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	2b00      	cmp	r3, #0
 8001944:	d109      	bne.n	800195a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff fe06 	bl	8001558 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	2b00      	cmp	r3, #0
 8001964:	d118      	bne.n	8001998 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800196e:	f023 0302 	bic.w	r3, r3, #2
 8001972:	f043 0202 	orr.w	r2, r3, #2
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 fb8c 	bl	8002098 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	f023 0303 	bic.w	r3, r3, #3
 800198e:	f043 0201 	orr.w	r2, r3, #1
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	641a      	str	r2, [r3, #64]	@ 0x40
 8001996:	e001      	b.n	800199c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b086      	sub	sp, #24
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	f003 0320 	and.w	r3, r3, #32
 80019dc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d049      	beq.n	8001a78 <HAL_ADC_IRQHandler+0xca>
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d046      	beq.n	8001a78 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d105      	bne.n	8001a02 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d12b      	bne.n	8001a68 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d127      	bne.n	8001a68 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d006      	beq.n	8001a34 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d119      	bne.n	8001a68 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0220 	bic.w	r2, r2, #32
 8001a42:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d105      	bne.n	8001a68 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a60:	f043 0201 	orr.w	r2, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff f92d 	bl	8000cc8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f06f 0212 	mvn.w	r2, #18
 8001a76:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a86:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d057      	beq.n	8001b3e <HAL_ADC_IRQHandler+0x190>
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d054      	beq.n	8001b3e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d105      	bne.n	8001aac <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d139      	bne.n	8001b2e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ac0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d006      	beq.n	8001ad6 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d12b      	bne.n	8001b2e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d124      	bne.n	8001b2e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d11d      	bne.n	8001b2e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d119      	bne.n	8001b2e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b08:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d105      	bne.n	8001b2e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	f043 0201 	orr.w	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 fc30 	bl	8002394 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f06f 020c 	mvn.w	r2, #12
 8001b3c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b4c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d017      	beq.n	8001b84 <HAL_ADC_IRQHandler+0x1d6>
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d014      	beq.n	8001b84 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d10d      	bne.n	8001b84 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f949 	bl	8001e0c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f06f 0201 	mvn.w	r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f003 0320 	and.w	r3, r3, #32
 8001b8a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b92:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d015      	beq.n	8001bc6 <HAL_ADC_IRQHandler+0x218>
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d012      	beq.n	8001bc6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba4:	f043 0202 	orr.w	r2, r3, #2
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f06f 0220 	mvn.w	r2, #32
 8001bb4:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f932 	bl	8001e20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f06f 0220 	mvn.w	r2, #32
 8001bc4:	601a      	str	r2, [r3, #0]
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_ADC_Start_DMA+0x22>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e0eb      	b.n	8001dca <HAL_ADC_Start_DMA+0x1fa>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d018      	beq.n	8001c3a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c18:	4b6e      	ldr	r3, [pc, #440]	@ (8001dd4 <HAL_ADC_Start_DMA+0x204>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a6e      	ldr	r2, [pc, #440]	@ (8001dd8 <HAL_ADC_Start_DMA+0x208>)
 8001c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c22:	0c9a      	lsrs	r2, r3, #18
 8001c24:	4613      	mov	r3, r2
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4413      	add	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001c2c:	e002      	b.n	8001c34 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f9      	bne.n	8001c2e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c48:	d107      	bne.n	8001c5a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c58:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	f040 80a3 	bne.w	8001db0 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001c72:	f023 0301 	bic.w	r3, r3, #1
 8001c76:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d007      	beq.n	8001c9c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c90:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c94:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ca8:	d106      	bne.n	8001cb8 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cae:	f023 0206 	bic.w	r2, r3, #6
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	645a      	str	r2, [r3, #68]	@ 0x44
 8001cb6:	e002      	b.n	8001cbe <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cc6:	4b45      	ldr	r3, [pc, #276]	@ (8001ddc <HAL_ADC_Start_DMA+0x20c>)
 8001cc8:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cce:	4a44      	ldr	r2, [pc, #272]	@ (8001de0 <HAL_ADC_Start_DMA+0x210>)
 8001cd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cd6:	4a43      	ldr	r2, [pc, #268]	@ (8001de4 <HAL_ADC_Start_DMA+0x214>)
 8001cd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cde:	4a42      	ldr	r2, [pc, #264]	@ (8001de8 <HAL_ADC_Start_DMA+0x218>)
 8001ce0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001cea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001cfa:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d0a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	334c      	adds	r3, #76	@ 0x4c
 8001d16:	4619      	mov	r1, r3
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f000 fd04 	bl	8002728 <HAL_DMA_Start_IT>
 8001d20:	4603      	mov	r3, r0
 8001d22:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 031f 	and.w	r3, r3, #31
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d12a      	bne.n	8001d86 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a2d      	ldr	r2, [pc, #180]	@ (8001dec <HAL_ADC_Start_DMA+0x21c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d015      	beq.n	8001d66 <HAL_ADC_Start_DMA+0x196>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a2c      	ldr	r2, [pc, #176]	@ (8001df0 <HAL_ADC_Start_DMA+0x220>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d105      	bne.n	8001d50 <HAL_ADC_Start_DMA+0x180>
 8001d44:	4b25      	ldr	r3, [pc, #148]	@ (8001ddc <HAL_ADC_Start_DMA+0x20c>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00a      	beq.n	8001d66 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a27      	ldr	r2, [pc, #156]	@ (8001df4 <HAL_ADC_Start_DMA+0x224>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d136      	bne.n	8001dc8 <HAL_ADC_Start_DMA+0x1f8>
 8001d5a:	4b20      	ldr	r3, [pc, #128]	@ (8001ddc <HAL_ADC_Start_DMA+0x20c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d130      	bne.n	8001dc8 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d129      	bne.n	8001dc8 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	e020      	b.n	8001dc8 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a18      	ldr	r2, [pc, #96]	@ (8001dec <HAL_ADC_Start_DMA+0x21c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d11b      	bne.n	8001dc8 <HAL_ADC_Start_DMA+0x1f8>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d114      	bne.n	8001dc8 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	e00b      	b.n	8001dc8 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	f043 0210 	orr.w	r2, r3, #16
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc0:	f043 0201 	orr.w	r2, r3, #1
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001dc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3720      	adds	r7, #32
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000058 	.word	0x20000058
 8001dd8:	431bde83 	.word	0x431bde83
 8001ddc:	40012300 	.word	0x40012300
 8001de0:	08002291 	.word	0x08002291
 8001de4:	0800234b 	.word	0x0800234b
 8001de8:	08002367 	.word	0x08002367
 8001dec:	40012000 	.word	0x40012000
 8001df0:	40012100 	.word	0x40012100
 8001df4:	40012200 	.word	0x40012200

08001df8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x1c>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e113      	b.n	8002078 <HAL_ADC_ConfigChannel+0x244>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b09      	cmp	r3, #9
 8001e5e:	d925      	bls.n	8001eac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68d9      	ldr	r1, [r3, #12]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	3b1e      	subs	r3, #30
 8001e76:	2207      	movs	r2, #7
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43da      	mvns	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	400a      	ands	r2, r1
 8001e84:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68d9      	ldr	r1, [r3, #12]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	4618      	mov	r0, r3
 8001e98:	4603      	mov	r3, r0
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4403      	add	r3, r0
 8001e9e:	3b1e      	subs	r3, #30
 8001ea0:	409a      	lsls	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	e022      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6919      	ldr	r1, [r3, #16]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4613      	mov	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4413      	add	r3, r2
 8001ec0:	2207      	movs	r2, #7
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	400a      	ands	r2, r1
 8001ece:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6919      	ldr	r1, [r3, #16]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4403      	add	r3, r0
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b06      	cmp	r3, #6
 8001ef8:	d824      	bhi.n	8001f44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	3b05      	subs	r3, #5
 8001f0c:	221f      	movs	r2, #31
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43da      	mvns	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	400a      	ands	r2, r1
 8001f1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	4618      	mov	r0, r3
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	3b05      	subs	r3, #5
 8001f36:	fa00 f203 	lsl.w	r2, r0, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f42:	e04c      	b.n	8001fde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b0c      	cmp	r3, #12
 8001f4a:	d824      	bhi.n	8001f96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3b23      	subs	r3, #35	@ 0x23
 8001f5e:	221f      	movs	r2, #31
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43da      	mvns	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	400a      	ands	r2, r1
 8001f6c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	3b23      	subs	r3, #35	@ 0x23
 8001f88:	fa00 f203 	lsl.w	r2, r0, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f94:	e023      	b.n	8001fde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3b41      	subs	r3, #65	@ 0x41
 8001fa8:	221f      	movs	r2, #31
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	3b41      	subs	r3, #65	@ 0x41
 8001fd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fde:	4b29      	ldr	r3, [pc, #164]	@ (8002084 <HAL_ADC_ConfigChannel+0x250>)
 8001fe0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a28      	ldr	r2, [pc, #160]	@ (8002088 <HAL_ADC_ConfigChannel+0x254>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d10f      	bne.n	800200c <HAL_ADC_ConfigChannel+0x1d8>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b12      	cmp	r3, #18
 8001ff2:	d10b      	bne.n	800200c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a1d      	ldr	r2, [pc, #116]	@ (8002088 <HAL_ADC_ConfigChannel+0x254>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d12b      	bne.n	800206e <HAL_ADC_ConfigChannel+0x23a>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a1c      	ldr	r2, [pc, #112]	@ (800208c <HAL_ADC_ConfigChannel+0x258>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d003      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x1f4>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b11      	cmp	r3, #17
 8002026:	d122      	bne.n	800206e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a11      	ldr	r2, [pc, #68]	@ (800208c <HAL_ADC_ConfigChannel+0x258>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d111      	bne.n	800206e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800204a:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <HAL_ADC_ConfigChannel+0x25c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a11      	ldr	r2, [pc, #68]	@ (8002094 <HAL_ADC_ConfigChannel+0x260>)
 8002050:	fba2 2303 	umull	r2, r3, r2, r3
 8002054:	0c9a      	lsrs	r2, r3, #18
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002060:	e002      	b.n	8002068 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	3b01      	subs	r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f9      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	40012300 	.word	0x40012300
 8002088:	40012000 	.word	0x40012000
 800208c:	10000012 	.word	0x10000012
 8002090:	20000058 	.word	0x20000058
 8002094:	431bde83 	.word	0x431bde83

08002098 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020a0:	4b79      	ldr	r3, [pc, #484]	@ (8002288 <ADC_Init+0x1f0>)
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	431a      	orrs	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6859      	ldr	r1, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	021a      	lsls	r2, r3, #8
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80020f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6859      	ldr	r1, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002112:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6899      	ldr	r1, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212a:	4a58      	ldr	r2, [pc, #352]	@ (800228c <ADC_Init+0x1f4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d022      	beq.n	8002176 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800213e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6899      	ldr	r1, [r3, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002160:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6899      	ldr	r1, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	e00f      	b.n	8002196 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002184:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002194:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0202 	bic.w	r2, r2, #2
 80021a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6899      	ldr	r1, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7e1b      	ldrb	r3, [r3, #24]
 80021b0:	005a      	lsls	r2, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d01b      	beq.n	80021fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021d2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80021e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6859      	ldr	r1, [r3, #4]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ee:	3b01      	subs	r3, #1
 80021f0:	035a      	lsls	r2, r3, #13
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	e007      	b.n	800220c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800220a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800221a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	3b01      	subs	r3, #1
 8002228:	051a      	lsls	r2, r3, #20
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002240:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6899      	ldr	r1, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800224e:	025a      	lsls	r2, r3, #9
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002266:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6899      	ldr	r1, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	029a      	lsls	r2, r3, #10
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	609a      	str	r2, [r3, #8]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40012300 	.word	0x40012300
 800228c:	0f000001 	.word	0x0f000001

08002290 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800229c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d13c      	bne.n	8002324 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d12b      	bne.n	800231c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d127      	bne.n	800231c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d006      	beq.n	80022e8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d119      	bne.n	800231c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0220 	bic.w	r2, r2, #32
 80022f6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002308:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d105      	bne.n	800231c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f7fe fcd3 	bl	8000cc8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002322:	e00e      	b.n	8002342 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002328:	f003 0310 	and.w	r3, r3, #16
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f7ff fd75 	bl	8001e20 <HAL_ADC_ErrorCallback>
}
 8002336:	e004      	b.n	8002342 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800233c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	4798      	blx	r3
}
 8002342:	bf00      	nop
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002356:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f7ff fd4d 	bl	8001df8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002372:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2240      	movs	r2, #64	@ 0x40
 8002378:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237e:	f043 0204 	orr.w	r2, r3, #4
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f7ff fd4a 	bl	8001e20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800238c:	bf00      	nop
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b8:	4b0c      	ldr	r3, [pc, #48]	@ (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023c4:	4013      	ands	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023da:	4a04      	ldr	r2, [pc, #16]	@ (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	60d3      	str	r3, [r2, #12]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f4:	4b04      	ldr	r3, [pc, #16]	@ (8002408 <__NVIC_GetPriorityGrouping+0x18>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	f003 0307 	and.w	r3, r3, #7
}
 80023fe:	4618      	mov	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	2b00      	cmp	r3, #0
 800241c:	db0b      	blt.n	8002436 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	f003 021f 	and.w	r2, r3, #31
 8002424:	4907      	ldr	r1, [pc, #28]	@ (8002444 <__NVIC_EnableIRQ+0x38>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	2001      	movs	r0, #1
 800242e:	fa00 f202 	lsl.w	r2, r0, r2
 8002432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000e100 	.word	0xe000e100

08002448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	6039      	str	r1, [r7, #0]
 8002452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002458:	2b00      	cmp	r3, #0
 800245a:	db0a      	blt.n	8002472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	b2da      	uxtb	r2, r3
 8002460:	490c      	ldr	r1, [pc, #48]	@ (8002494 <__NVIC_SetPriority+0x4c>)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	0112      	lsls	r2, r2, #4
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	440b      	add	r3, r1
 800246c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002470:	e00a      	b.n	8002488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4908      	ldr	r1, [pc, #32]	@ (8002498 <__NVIC_SetPriority+0x50>)
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	3b04      	subs	r3, #4
 8002480:	0112      	lsls	r2, r2, #4
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	440b      	add	r3, r1
 8002486:	761a      	strb	r2, [r3, #24]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000e100 	.word	0xe000e100
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	@ 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f1c3 0307 	rsb	r3, r3, #7
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	bf28      	it	cs
 80024ba:	2304      	movcs	r3, #4
 80024bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3304      	adds	r3, #4
 80024c2:	2b06      	cmp	r3, #6
 80024c4:	d902      	bls.n	80024cc <NVIC_EncodePriority+0x30>
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3b03      	subs	r3, #3
 80024ca:	e000      	b.n	80024ce <NVIC_EncodePriority+0x32>
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	f04f 32ff 	mov.w	r2, #4294967295
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43da      	mvns	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	401a      	ands	r2, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e4:	f04f 31ff 	mov.w	r1, #4294967295
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	fa01 f303 	lsl.w	r3, r1, r3
 80024ee:	43d9      	mvns	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f4:	4313      	orrs	r3, r2
         );
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3724      	adds	r7, #36	@ 0x24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002514:	d301      	bcc.n	800251a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002516:	2301      	movs	r3, #1
 8002518:	e00f      	b.n	800253a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251a:	4a0a      	ldr	r2, [pc, #40]	@ (8002544 <SysTick_Config+0x40>)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002522:	210f      	movs	r1, #15
 8002524:	f04f 30ff 	mov.w	r0, #4294967295
 8002528:	f7ff ff8e 	bl	8002448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800252c:	4b05      	ldr	r3, [pc, #20]	@ (8002544 <SysTick_Config+0x40>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002532:	4b04      	ldr	r3, [pc, #16]	@ (8002544 <SysTick_Config+0x40>)
 8002534:	2207      	movs	r2, #7
 8002536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	e000e010 	.word	0xe000e010

08002548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff29 	bl	80023a8 <__NVIC_SetPriorityGrouping>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	4603      	mov	r3, r0
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002570:	f7ff ff3e 	bl	80023f0 <__NVIC_GetPriorityGrouping>
 8002574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	6978      	ldr	r0, [r7, #20]
 800257c:	f7ff ff8e 	bl	800249c <NVIC_EncodePriority>
 8002580:	4602      	mov	r2, r0
 8002582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff5d 	bl	8002448 <__NVIC_SetPriority>
}
 800258e:	bf00      	nop
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff31 	bl	800240c <__NVIC_EnableIRQ>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ffa2 	bl	8002504 <SysTick_Config>
 80025c0:	4603      	mov	r3, r0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025d8:	f7ff f976 	bl	80018c8 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e099      	b.n	800271c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002608:	e00f      	b.n	800262a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800260a:	f7ff f95d 	bl	80018c8 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b05      	cmp	r3, #5
 8002616:	d908      	bls.n	800262a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2220      	movs	r2, #32
 800261c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2203      	movs	r2, #3
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e078      	b.n	800271c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1e8      	bne.n	800260a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	4b38      	ldr	r3, [pc, #224]	@ (8002724 <HAL_DMA_Init+0x158>)
 8002644:	4013      	ands	r3, r2
 8002646:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002656:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800266e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4313      	orrs	r3, r2
 800267a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002680:	2b04      	cmp	r3, #4
 8002682:	d107      	bne.n	8002694 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268c:	4313      	orrs	r3, r2
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f023 0307 	bic.w	r3, r3, #7
 80026aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d117      	bne.n	80026ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00e      	beq.n	80026ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 fa6f 	bl	8002bb4 <DMA_CheckFifoParam>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2240      	movs	r2, #64	@ 0x40
 80026e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80026ea:	2301      	movs	r3, #1
 80026ec:	e016      	b.n	800271c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 fa26 	bl	8002b48 <DMA_CalcBaseAndBitshift>
 80026fc:	4603      	mov	r3, r0
 80026fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002704:	223f      	movs	r2, #63	@ 0x3f
 8002706:	409a      	lsls	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	f010803f 	.word	0xf010803f

08002728 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <HAL_DMA_Start_IT+0x26>
 800274a:	2302      	movs	r3, #2
 800274c:	e040      	b.n	80027d0 <HAL_DMA_Start_IT+0xa8>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b01      	cmp	r3, #1
 8002760:	d12f      	bne.n	80027c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2202      	movs	r2, #2
 8002766:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 f9b8 	bl	8002aec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002780:	223f      	movs	r2, #63	@ 0x3f
 8002782:	409a      	lsls	r2, r3
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0216 	orr.w	r2, r2, #22
 8002796:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279c:	2b00      	cmp	r3, #0
 800279e:	d007      	beq.n	80027b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0208 	orr.w	r2, r2, #8
 80027ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	e005      	b.n	80027ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027ca:	2302      	movs	r3, #2
 80027cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027e4:	4b8e      	ldr	r3, [pc, #568]	@ (8002a20 <HAL_DMA_IRQHandler+0x248>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a8e      	ldr	r2, [pc, #568]	@ (8002a24 <HAL_DMA_IRQHandler+0x24c>)
 80027ea:	fba2 2303 	umull	r2, r3, r2, r3
 80027ee:	0a9b      	lsrs	r3, r3, #10
 80027f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002802:	2208      	movs	r2, #8
 8002804:	409a      	lsls	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d01a      	beq.n	8002844 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d013      	beq.n	8002844 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0204 	bic.w	r2, r2, #4
 800282a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002830:	2208      	movs	r2, #8
 8002832:	409a      	lsls	r2, r3
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800283c:	f043 0201 	orr.w	r2, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002848:	2201      	movs	r2, #1
 800284a:	409a      	lsls	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d012      	beq.n	800287a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00b      	beq.n	800287a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002866:	2201      	movs	r2, #1
 8002868:	409a      	lsls	r2, r3
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002872:	f043 0202 	orr.w	r2, r3, #2
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287e:	2204      	movs	r2, #4
 8002880:	409a      	lsls	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4013      	ands	r3, r2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d012      	beq.n	80028b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00b      	beq.n	80028b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289c:	2204      	movs	r2, #4
 800289e:	409a      	lsls	r2, r3
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a8:	f043 0204 	orr.w	r2, r3, #4
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b4:	2210      	movs	r2, #16
 80028b6:	409a      	lsls	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d043      	beq.n	8002948 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d03c      	beq.n	8002948 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d2:	2210      	movs	r2, #16
 80028d4:	409a      	lsls	r2, r3
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d018      	beq.n	800291a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d108      	bne.n	8002908 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d024      	beq.n	8002948 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	4798      	blx	r3
 8002906:	e01f      	b.n	8002948 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800290c:	2b00      	cmp	r3, #0
 800290e:	d01b      	beq.n	8002948 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	4798      	blx	r3
 8002918:	e016      	b.n	8002948 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d107      	bne.n	8002938 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0208 	bic.w	r2, r2, #8
 8002936:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294c:	2220      	movs	r2, #32
 800294e:	409a      	lsls	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4013      	ands	r3, r2
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 808f 	beq.w	8002a78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 8087 	beq.w	8002a78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296e:	2220      	movs	r2, #32
 8002970:	409a      	lsls	r2, r3
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b05      	cmp	r3, #5
 8002980:	d136      	bne.n	80029f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0216 	bic.w	r2, r2, #22
 8002990:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d103      	bne.n	80029b2 <HAL_DMA_IRQHandler+0x1da>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d007      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0208 	bic.w	r2, r2, #8
 80029c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c6:	223f      	movs	r2, #63	@ 0x3f
 80029c8:	409a      	lsls	r2, r3
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d07e      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	4798      	blx	r3
        }
        return;
 80029ee:	e079      	b.n	8002ae4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d01d      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10d      	bne.n	8002a28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d031      	beq.n	8002a78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	4798      	blx	r3
 8002a1c:	e02c      	b.n	8002a78 <HAL_DMA_IRQHandler+0x2a0>
 8002a1e:	bf00      	nop
 8002a20:	20000058 	.word	0x20000058
 8002a24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d023      	beq.n	8002a78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	4798      	blx	r3
 8002a38:	e01e      	b.n	8002a78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10f      	bne.n	8002a68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0210 	bic.w	r2, r2, #16
 8002a56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d032      	beq.n	8002ae6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d022      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2205      	movs	r2, #5
 8002a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0201 	bic.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d307      	bcc.n	8002ac0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f2      	bne.n	8002aa4 <HAL_DMA_IRQHandler+0x2cc>
 8002abe:	e000      	b.n	8002ac2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ac0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	4798      	blx	r3
 8002ae2:	e000      	b.n	8002ae6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ae4:	bf00      	nop
    }
  }
}
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b40      	cmp	r3, #64	@ 0x40
 8002b18:	d108      	bne.n	8002b2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b2a:	e007      	b.n	8002b3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	60da      	str	r2, [r3, #12]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	3b10      	subs	r3, #16
 8002b58:	4a14      	ldr	r2, [pc, #80]	@ (8002bac <DMA_CalcBaseAndBitshift+0x64>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	091b      	lsrs	r3, r3, #4
 8002b60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b62:	4a13      	ldr	r2, [pc, #76]	@ (8002bb0 <DMA_CalcBaseAndBitshift+0x68>)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d909      	bls.n	8002b8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b7e:	f023 0303 	bic.w	r3, r3, #3
 8002b82:	1d1a      	adds	r2, r3, #4
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b88:	e007      	b.n	8002b9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b92:	f023 0303 	bic.w	r3, r3, #3
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	aaaaaaab 	.word	0xaaaaaaab
 8002bb0:	08008e7c 	.word	0x08008e7c

08002bb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d11f      	bne.n	8002c0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d856      	bhi.n	8002c82 <DMA_CheckFifoParam+0xce>
 8002bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8002bdc <DMA_CheckFifoParam+0x28>)
 8002bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bda:	bf00      	nop
 8002bdc:	08002bed 	.word	0x08002bed
 8002be0:	08002bff 	.word	0x08002bff
 8002be4:	08002bed 	.word	0x08002bed
 8002be8:	08002c83 	.word	0x08002c83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d046      	beq.n	8002c86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bfc:	e043      	b.n	8002c86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c02:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c06:	d140      	bne.n	8002c8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c0c:	e03d      	b.n	8002c8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c16:	d121      	bne.n	8002c5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d837      	bhi.n	8002c8e <DMA_CheckFifoParam+0xda>
 8002c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c24 <DMA_CheckFifoParam+0x70>)
 8002c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c24:	08002c35 	.word	0x08002c35
 8002c28:	08002c3b 	.word	0x08002c3b
 8002c2c:	08002c35 	.word	0x08002c35
 8002c30:	08002c4d 	.word	0x08002c4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
      break;
 8002c38:	e030      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d025      	beq.n	8002c92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c4a:	e022      	b.n	8002c92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c54:	d11f      	bne.n	8002c96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c5a:	e01c      	b.n	8002c96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d903      	bls.n	8002c6a <DMA_CheckFifoParam+0xb6>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d003      	beq.n	8002c70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c68:	e018      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c6e:	e015      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00e      	beq.n	8002c9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c80:	e00b      	b.n	8002c9a <DMA_CheckFifoParam+0xe6>
      break;
 8002c82:	bf00      	nop
 8002c84:	e00a      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c86:	bf00      	nop
 8002c88:	e008      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c8a:	bf00      	nop
 8002c8c:	e006      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c8e:	bf00      	nop
 8002c90:	e004      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c92:	bf00      	nop
 8002c94:	e002      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;   
 8002c96:	bf00      	nop
 8002c98:	e000      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c9a:	bf00      	nop
    }
  } 
  
  return status; 
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop

08002cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b089      	sub	sp, #36	@ 0x24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	e177      	b.n	8002fb8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cc8:	2201      	movs	r2, #1
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	f040 8166 	bne.w	8002fb2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d005      	beq.n	8002cfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d130      	bne.n	8002d60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	2203      	movs	r2, #3
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d34:	2201      	movs	r2, #1
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	f003 0201 	and.w	r2, r3, #1
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d017      	beq.n	8002d9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	2203      	movs	r2, #3
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d123      	bne.n	8002df0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	08da      	lsrs	r2, r3, #3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3208      	adds	r2, #8
 8002db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	220f      	movs	r2, #15
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	08da      	lsrs	r2, r3, #3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3208      	adds	r2, #8
 8002dea:	69b9      	ldr	r1, [r7, #24]
 8002dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0203 	and.w	r2, r3, #3
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 80c0 	beq.w	8002fb2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	4b66      	ldr	r3, [pc, #408]	@ (8002fd0 <HAL_GPIO_Init+0x324>)
 8002e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3a:	4a65      	ldr	r2, [pc, #404]	@ (8002fd0 <HAL_GPIO_Init+0x324>)
 8002e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e42:	4b63      	ldr	r3, [pc, #396]	@ (8002fd0 <HAL_GPIO_Init+0x324>)
 8002e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e4e:	4a61      	ldr	r2, [pc, #388]	@ (8002fd4 <HAL_GPIO_Init+0x328>)
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	089b      	lsrs	r3, r3, #2
 8002e54:	3302      	adds	r3, #2
 8002e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	220f      	movs	r2, #15
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a58      	ldr	r2, [pc, #352]	@ (8002fd8 <HAL_GPIO_Init+0x32c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d037      	beq.n	8002eea <HAL_GPIO_Init+0x23e>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a57      	ldr	r2, [pc, #348]	@ (8002fdc <HAL_GPIO_Init+0x330>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d031      	beq.n	8002ee6 <HAL_GPIO_Init+0x23a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a56      	ldr	r2, [pc, #344]	@ (8002fe0 <HAL_GPIO_Init+0x334>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d02b      	beq.n	8002ee2 <HAL_GPIO_Init+0x236>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a55      	ldr	r2, [pc, #340]	@ (8002fe4 <HAL_GPIO_Init+0x338>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d025      	beq.n	8002ede <HAL_GPIO_Init+0x232>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a54      	ldr	r2, [pc, #336]	@ (8002fe8 <HAL_GPIO_Init+0x33c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d01f      	beq.n	8002eda <HAL_GPIO_Init+0x22e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a53      	ldr	r2, [pc, #332]	@ (8002fec <HAL_GPIO_Init+0x340>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d019      	beq.n	8002ed6 <HAL_GPIO_Init+0x22a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a52      	ldr	r2, [pc, #328]	@ (8002ff0 <HAL_GPIO_Init+0x344>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d013      	beq.n	8002ed2 <HAL_GPIO_Init+0x226>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a51      	ldr	r2, [pc, #324]	@ (8002ff4 <HAL_GPIO_Init+0x348>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00d      	beq.n	8002ece <HAL_GPIO_Init+0x222>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a50      	ldr	r2, [pc, #320]	@ (8002ff8 <HAL_GPIO_Init+0x34c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d007      	beq.n	8002eca <HAL_GPIO_Init+0x21e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a4f      	ldr	r2, [pc, #316]	@ (8002ffc <HAL_GPIO_Init+0x350>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d101      	bne.n	8002ec6 <HAL_GPIO_Init+0x21a>
 8002ec2:	2309      	movs	r3, #9
 8002ec4:	e012      	b.n	8002eec <HAL_GPIO_Init+0x240>
 8002ec6:	230a      	movs	r3, #10
 8002ec8:	e010      	b.n	8002eec <HAL_GPIO_Init+0x240>
 8002eca:	2308      	movs	r3, #8
 8002ecc:	e00e      	b.n	8002eec <HAL_GPIO_Init+0x240>
 8002ece:	2307      	movs	r3, #7
 8002ed0:	e00c      	b.n	8002eec <HAL_GPIO_Init+0x240>
 8002ed2:	2306      	movs	r3, #6
 8002ed4:	e00a      	b.n	8002eec <HAL_GPIO_Init+0x240>
 8002ed6:	2305      	movs	r3, #5
 8002ed8:	e008      	b.n	8002eec <HAL_GPIO_Init+0x240>
 8002eda:	2304      	movs	r3, #4
 8002edc:	e006      	b.n	8002eec <HAL_GPIO_Init+0x240>
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e004      	b.n	8002eec <HAL_GPIO_Init+0x240>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	e002      	b.n	8002eec <HAL_GPIO_Init+0x240>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <HAL_GPIO_Init+0x240>
 8002eea:	2300      	movs	r3, #0
 8002eec:	69fa      	ldr	r2, [r7, #28]
 8002eee:	f002 0203 	and.w	r2, r2, #3
 8002ef2:	0092      	lsls	r2, r2, #2
 8002ef4:	4093      	lsls	r3, r2
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002efc:	4935      	ldr	r1, [pc, #212]	@ (8002fd4 <HAL_GPIO_Init+0x328>)
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	089b      	lsrs	r3, r3, #2
 8002f02:	3302      	adds	r3, #2
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8003000 <HAL_GPIO_Init+0x354>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	43db      	mvns	r3, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4013      	ands	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f2e:	4a34      	ldr	r2, [pc, #208]	@ (8003000 <HAL_GPIO_Init+0x354>)
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f34:	4b32      	ldr	r3, [pc, #200]	@ (8003000 <HAL_GPIO_Init+0x354>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f58:	4a29      	ldr	r2, [pc, #164]	@ (8003000 <HAL_GPIO_Init+0x354>)
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f5e:	4b28      	ldr	r3, [pc, #160]	@ (8003000 <HAL_GPIO_Init+0x354>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	43db      	mvns	r3, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f82:	4a1f      	ldr	r2, [pc, #124]	@ (8003000 <HAL_GPIO_Init+0x354>)
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f88:	4b1d      	ldr	r3, [pc, #116]	@ (8003000 <HAL_GPIO_Init+0x354>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fac:	4a14      	ldr	r2, [pc, #80]	@ (8003000 <HAL_GPIO_Init+0x354>)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	61fb      	str	r3, [r7, #28]
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	2b0f      	cmp	r3, #15
 8002fbc:	f67f ae84 	bls.w	8002cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	bf00      	nop
 8002fc4:	3724      	adds	r7, #36	@ 0x24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	40013800 	.word	0x40013800
 8002fd8:	40020000 	.word	0x40020000
 8002fdc:	40020400 	.word	0x40020400
 8002fe0:	40020800 	.word	0x40020800
 8002fe4:	40020c00 	.word	0x40020c00
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40021400 	.word	0x40021400
 8002ff0:	40021800 	.word	0x40021800
 8002ff4:	40021c00 	.word	0x40021c00
 8002ff8:	40022000 	.word	0x40022000
 8002ffc:	40022400 	.word	0x40022400
 8003000:	40013c00 	.word	0x40013c00

08003004 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	887b      	ldrh	r3, [r7, #2]
 8003016:	4013      	ands	r3, r2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800301c:	2301      	movs	r3, #1
 800301e:	73fb      	strb	r3, [r7, #15]
 8003020:	e001      	b.n	8003026 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003022:	2300      	movs	r3, #0
 8003024:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003026:	7bfb      	ldrb	r3, [r7, #15]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	807b      	strh	r3, [r7, #2]
 8003040:	4613      	mov	r3, r2
 8003042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003044:	787b      	ldrb	r3, [r7, #1]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800304a:	887a      	ldrh	r2, [r7, #2]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003050:	e003      	b.n	800305a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003052:	887b      	ldrh	r3, [r7, #2]
 8003054:	041a      	lsls	r2, r3, #16
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	619a      	str	r2, [r3, #24]
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b086      	sub	sp, #24
 800306a:	af02      	add	r7, sp, #8
 800306c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e101      	b.n	800327c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f005 fb58 	bl	8008748 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2203      	movs	r2, #3
 800309c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030a6:	d102      	bne.n	80030ae <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f002 fa85 	bl	80055c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6818      	ldr	r0, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	7c1a      	ldrb	r2, [r3, #16]
 80030c0:	f88d 2000 	strb.w	r2, [sp]
 80030c4:	3304      	adds	r3, #4
 80030c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030c8:	f002 f964 	bl	8005394 <USB_CoreInit>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2202      	movs	r2, #2
 80030d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e0ce      	b.n	800327c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2100      	movs	r1, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f002 fa7d 	bl	80055e4 <USB_SetCurrentMode>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0bf      	b.n	800327c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030fc:	2300      	movs	r3, #0
 80030fe:	73fb      	strb	r3, [r7, #15]
 8003100:	e04a      	b.n	8003198 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003102:	7bfa      	ldrb	r2, [r7, #15]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	4413      	add	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	3315      	adds	r3, #21
 8003112:	2201      	movs	r2, #1
 8003114:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003116:	7bfa      	ldrb	r2, [r7, #15]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	3314      	adds	r3, #20
 8003126:	7bfa      	ldrb	r2, [r7, #15]
 8003128:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800312a:	7bfa      	ldrb	r2, [r7, #15]
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	b298      	uxth	r0, r3
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	332e      	adds	r3, #46	@ 0x2e
 800313e:	4602      	mov	r2, r0
 8003140:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003142:	7bfa      	ldrb	r2, [r7, #15]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	3318      	adds	r3, #24
 8003152:	2200      	movs	r2, #0
 8003154:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003156:	7bfa      	ldrb	r2, [r7, #15]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4413      	add	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	331c      	adds	r3, #28
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800316a:	7bfa      	ldrb	r2, [r7, #15]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	3320      	adds	r3, #32
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800317e:	7bfa      	ldrb	r2, [r7, #15]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	3324      	adds	r3, #36	@ 0x24
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	3301      	adds	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	791b      	ldrb	r3, [r3, #4]
 800319c:	7bfa      	ldrb	r2, [r7, #15]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d3af      	bcc.n	8003102 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a2:	2300      	movs	r3, #0
 80031a4:	73fb      	strb	r3, [r7, #15]
 80031a6:	e044      	b.n	8003232 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031a8:	7bfa      	ldrb	r2, [r7, #15]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031be:	7bfa      	ldrb	r2, [r7, #15]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80031d0:	7bfa      	ldrb	r2, [r7, #15]
 80031d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031d4:	7bfa      	ldrb	r2, [r7, #15]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80031e6:	2200      	movs	r2, #0
 80031e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031ea:	7bfa      	ldrb	r2, [r7, #15]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003200:	7bfa      	ldrb	r2, [r7, #15]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003216:	7bfa      	ldrb	r2, [r7, #15]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	4413      	add	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	3301      	adds	r3, #1
 8003230:	73fb      	strb	r3, [r7, #15]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	791b      	ldrb	r3, [r3, #4]
 8003236:	7bfa      	ldrb	r2, [r7, #15]
 8003238:	429a      	cmp	r2, r3
 800323a:	d3b5      	bcc.n	80031a8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	7c1a      	ldrb	r2, [r3, #16]
 8003244:	f88d 2000 	strb.w	r2, [sp]
 8003248:	3304      	adds	r3, #4
 800324a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800324c:	f002 fa16 	bl	800567c <USB_DevInit>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d005      	beq.n	8003262 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2202      	movs	r2, #2
 800325a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e00c      	b.n	800327c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f003 fa60 	bl	800673a <USB_DevDisconnect>

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_PCD_Start+0x1c>
 800329c:	2302      	movs	r3, #2
 800329e:	e022      	b.n	80032e6 <HAL_PCD_Start+0x62>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d009      	beq.n	80032c8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d105      	bne.n	80032c8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f002 f967 	bl	80055a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f003 fa0e 	bl	80066f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032ee:	b590      	push	{r4, r7, lr}
 80032f0:	b08d      	sub	sp, #52	@ 0x34
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f003 facc 	bl	80068a2 <USB_GetMode>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	f040 848c 	bne.w	8003c2a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f003 fa30 	bl	800677c <USB_ReadInterrupts>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 8482 	beq.w	8003c28 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	0a1b      	lsrs	r3, r3, #8
 800332e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f003 fa1d 	bl	800677c <USB_ReadInterrupts>
 8003342:	4603      	mov	r3, r0
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b02      	cmp	r3, #2
 800334a:	d107      	bne.n	800335c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f002 0202 	and.w	r2, r2, #2
 800335a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f003 fa0b 	bl	800677c <USB_ReadInterrupts>
 8003366:	4603      	mov	r3, r0
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	2b10      	cmp	r3, #16
 800336e:	d161      	bne.n	8003434 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699a      	ldr	r2, [r3, #24]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0210 	bic.w	r2, r2, #16
 800337e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	f003 020f 	and.w	r2, r3, #15
 800338c:	4613      	mov	r3, r2
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	4413      	add	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	4413      	add	r3, r2
 800339c:	3304      	adds	r3, #4
 800339e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	0c5b      	lsrs	r3, r3, #17
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d124      	bne.n	80033f6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d035      	beq.n	8003424 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	091b      	lsrs	r3, r3, #4
 80033c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	6a38      	ldr	r0, [r7, #32]
 80033cc:	f003 f842 	bl	8006454 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	091b      	lsrs	r3, r3, #4
 80033d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033dc:	441a      	add	r2, r3
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	695a      	ldr	r2, [r3, #20]
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ee:	441a      	add	r2, r3
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	615a      	str	r2, [r3, #20]
 80033f4:	e016      	b.n	8003424 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	0c5b      	lsrs	r3, r3, #17
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	2b06      	cmp	r3, #6
 8003400:	d110      	bne.n	8003424 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003408:	2208      	movs	r2, #8
 800340a:	4619      	mov	r1, r3
 800340c:	6a38      	ldr	r0, [r7, #32]
 800340e:	f003 f821 	bl	8006454 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800341e:	441a      	add	r2, r3
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699a      	ldr	r2, [r3, #24]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0210 	orr.w	r2, r2, #16
 8003432:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f003 f99f 	bl	800677c <USB_ReadInterrupts>
 800343e:	4603      	mov	r3, r0
 8003440:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003444:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003448:	f040 80a7 	bne.w	800359a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f003 f9a4 	bl	80067a2 <USB_ReadDevAllOutEpInterrupt>
 800345a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800345c:	e099      	b.n	8003592 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800345e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 808e 	beq.w	8003586 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	4611      	mov	r1, r2
 8003474:	4618      	mov	r0, r3
 8003476:	f003 f9c8 	bl	800680a <USB_ReadDevOutEPInterrupt>
 800347a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00c      	beq.n	80034a0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	015a      	lsls	r2, r3, #5
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	4413      	add	r3, r2
 800348e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003492:	461a      	mov	r2, r3
 8003494:	2301      	movs	r3, #1
 8003496:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003498:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fe8c 	bl	80041b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00c      	beq.n	80034c4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034b6:	461a      	mov	r2, r3
 80034b8:	2308      	movs	r3, #8
 80034ba:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80034bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 ff62 	bl	8004388 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f003 0310 	and.w	r3, r3, #16
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d008      	beq.n	80034e0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80034ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034da:	461a      	mov	r2, r3
 80034dc:	2310      	movs	r3, #16
 80034de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d030      	beq.n	800354c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f2:	2b80      	cmp	r3, #128	@ 0x80
 80034f4:	d109      	bne.n	800350a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	69fa      	ldr	r2, [r7, #28]
 8003500:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003504:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003508:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800350a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	4413      	add	r3, r2
 800351c:	3304      	adds	r3, #4
 800351e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	78db      	ldrb	r3, [r3, #3]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d108      	bne.n	800353a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	2200      	movs	r2, #0
 800352c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	b2db      	uxtb	r3, r3
 8003532:	4619      	mov	r1, r3
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f005 fa37 	bl	80089a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800353a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	4413      	add	r3, r2
 8003542:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003546:	461a      	mov	r2, r3
 8003548:	2302      	movs	r3, #2
 800354a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003562:	461a      	mov	r2, r3
 8003564:	2320      	movs	r3, #32
 8003566:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d009      	beq.n	8003586 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	4413      	add	r3, r2
 800357a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800357e:	461a      	mov	r2, r3
 8003580:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003584:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003588:	3301      	adds	r3, #1
 800358a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800358c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358e:	085b      	lsrs	r3, r3, #1
 8003590:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003594:	2b00      	cmp	r3, #0
 8003596:	f47f af62 	bne.w	800345e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f003 f8ec 	bl	800677c <USB_ReadInterrupts>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035ae:	f040 80db 	bne.w	8003768 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f003 f90d 	bl	80067d6 <USB_ReadDevAllInEpInterrupt>
 80035bc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80035c2:	e0cd      	b.n	8003760 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80035c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 80c2 	beq.w	8003754 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	4611      	mov	r1, r2
 80035da:	4618      	mov	r0, r3
 80035dc:	f003 f933 	bl	8006846 <USB_ReadDevInEPInterrupt>
 80035e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d057      	beq.n	800369c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	2201      	movs	r2, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003600:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	43db      	mvns	r3, r3
 8003606:	69f9      	ldr	r1, [r7, #28]
 8003608:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800360c:	4013      	ands	r3, r2
 800360e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	4413      	add	r3, r2
 8003618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800361c:	461a      	mov	r2, r3
 800361e:	2301      	movs	r3, #1
 8003620:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	799b      	ldrb	r3, [r3, #6]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d132      	bne.n	8003690 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800362e:	4613      	mov	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	3320      	adds	r3, #32
 800363a:	6819      	ldr	r1, [r3, #0]
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003640:	4613      	mov	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4403      	add	r3, r0
 800364a:	331c      	adds	r3, #28
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4419      	add	r1, r3
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003654:	4613      	mov	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4403      	add	r3, r0
 800365e:	3320      	adds	r3, #32
 8003660:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003664:	2b00      	cmp	r3, #0
 8003666:	d113      	bne.n	8003690 <HAL_PCD_IRQHandler+0x3a2>
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800366c:	4613      	mov	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	4413      	add	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	3324      	adds	r3, #36	@ 0x24
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d108      	bne.n	8003690 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003688:	461a      	mov	r2, r3
 800368a:	2101      	movs	r1, #1
 800368c:	f003 f93a 	bl	8006904 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003692:	b2db      	uxtb	r3, r3
 8003694:	4619      	mov	r1, r3
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f005 f901 	bl	800889e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d008      	beq.n	80036b8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80036a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036b2:	461a      	mov	r2, r3
 80036b4:	2308      	movs	r3, #8
 80036b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d008      	beq.n	80036d4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80036c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036ce:	461a      	mov	r2, r3
 80036d0:	2310      	movs	r3, #16
 80036d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d008      	beq.n	80036f0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	015a      	lsls	r2, r3, #5
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	4413      	add	r3, r2
 80036e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036ea:	461a      	mov	r2, r3
 80036ec:	2340      	movs	r3, #64	@ 0x40
 80036ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d023      	beq.n	8003742 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80036fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036fc:	6a38      	ldr	r0, [r7, #32]
 80036fe:	f002 f921 	bl	8005944 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003704:	4613      	mov	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	3310      	adds	r3, #16
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	4413      	add	r3, r2
 8003712:	3304      	adds	r3, #4
 8003714:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	78db      	ldrb	r3, [r3, #3]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d108      	bne.n	8003730 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2200      	movs	r2, #0
 8003722:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003726:	b2db      	uxtb	r3, r3
 8003728:	4619      	mov	r1, r3
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f005 f94e 	bl	80089cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	4413      	add	r3, r2
 8003738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800373c:	461a      	mov	r2, r3
 800373e:	2302      	movs	r3, #2
 8003740:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800374c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fca5 	bl	800409e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003756:	3301      	adds	r3, #1
 8003758:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800375a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800375c:	085b      	lsrs	r3, r3, #1
 800375e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003762:	2b00      	cmp	r3, #0
 8003764:	f47f af2e 	bne.w	80035c4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f003 f805 	bl	800677c <USB_ReadInterrupts>
 8003772:	4603      	mov	r3, r0
 8003774:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003778:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800377c:	d122      	bne.n	80037c4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800378c:	f023 0301 	bic.w	r3, r3, #1
 8003790:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003798:	2b01      	cmp	r3, #1
 800379a:	d108      	bne.n	80037ae <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037a4:	2100      	movs	r1, #0
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 fe8c 	bl	80044c4 <HAL_PCDEx_LPM_Callback>
 80037ac:	e002      	b.n	80037b4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f005 f8ec 	bl	800898c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695a      	ldr	r2, [r3, #20]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80037c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f002 ffd7 	bl	800677c <USB_ReadInterrupts>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037d8:	d112      	bne.n	8003800 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d102      	bne.n	80037f0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f005 f8a8 	bl	8008940 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695a      	ldr	r2, [r3, #20]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80037fe:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f002 ffb9 	bl	800677c <USB_ReadInterrupts>
 800380a:	4603      	mov	r3, r0
 800380c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003814:	f040 80b7 	bne.w	8003986 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003826:	f023 0301 	bic.w	r3, r3, #1
 800382a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2110      	movs	r1, #16
 8003832:	4618      	mov	r0, r3
 8003834:	f002 f886 	bl	8005944 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003838:	2300      	movs	r3, #0
 800383a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800383c:	e046      	b.n	80038cc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800383e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800384a:	461a      	mov	r2, r3
 800384c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003850:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003862:	0151      	lsls	r1, r2, #5
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	440a      	add	r2, r1
 8003868:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800386c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003870:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800387e:	461a      	mov	r2, r3
 8003880:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003884:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003888:	015a      	lsls	r2, r3, #5
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	4413      	add	r3, r2
 800388e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003896:	0151      	lsls	r1, r2, #5
 8003898:	69fa      	ldr	r2, [r7, #28]
 800389a:	440a      	add	r2, r1
 800389c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80038a0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80038a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80038a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038b6:	0151      	lsls	r1, r2, #5
 80038b8:	69fa      	ldr	r2, [r7, #28]
 80038ba:	440a      	add	r2, r1
 80038bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80038c0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80038c4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c8:	3301      	adds	r3, #1
 80038ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	791b      	ldrb	r3, [r3, #4]
 80038d0:	461a      	mov	r2, r3
 80038d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d3b2      	bcc.n	800383e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	69fa      	ldr	r2, [r7, #28]
 80038e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038e6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80038ea:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	7bdb      	ldrb	r3, [r3, #15]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d016      	beq.n	8003922 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003904:	f043 030b 	orr.w	r3, r3, #11
 8003908:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003914:	69fa      	ldr	r2, [r7, #28]
 8003916:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800391a:	f043 030b 	orr.w	r3, r3, #11
 800391e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003920:	e015      	b.n	800394e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003930:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003934:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003938:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003948:	f043 030b 	orr.w	r3, r3, #11
 800394c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69fa      	ldr	r2, [r7, #28]
 8003958:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800395c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003960:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6818      	ldr	r0, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003970:	461a      	mov	r2, r3
 8003972:	f002 ffc7 	bl	8006904 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695a      	ldr	r2, [r3, #20]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003984:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f002 fef6 	bl	800677c <USB_ReadInterrupts>
 8003990:	4603      	mov	r3, r0
 8003992:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003996:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800399a:	d123      	bne.n	80039e4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f002 ff8c 	bl	80068be <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f002 f843 	bl	8005a36 <USB_GetDevSpeed>
 80039b0:	4603      	mov	r3, r0
 80039b2:	461a      	mov	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681c      	ldr	r4, [r3, #0]
 80039bc:	f001 f9f2 	bl	8004da4 <HAL_RCC_GetHCLKFreq>
 80039c0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039c6:	461a      	mov	r2, r3
 80039c8:	4620      	mov	r0, r4
 80039ca:	f001 fd47 	bl	800545c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f004 ff8d 	bl	80088ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695a      	ldr	r2, [r3, #20]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80039e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f002 fec7 	bl	800677c <USB_ReadInterrupts>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d10a      	bne.n	8003a0e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f004 ff6a 	bl	80088d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695a      	ldr	r2, [r3, #20]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f002 0208 	and.w	r2, r2, #8
 8003a0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f002 feb2 	bl	800677c <USB_ReadInterrupts>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a1e:	2b80      	cmp	r3, #128	@ 0x80
 8003a20:	d123      	bne.n	8003a6a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a2e:	2301      	movs	r3, #1
 8003a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a32:	e014      	b.n	8003a5e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a38:	4613      	mov	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d105      	bne.n	8003a58 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	4619      	mov	r1, r3
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 faf2 	bl	800403c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	791b      	ldrb	r3, [r3, #4]
 8003a62:	461a      	mov	r2, r3
 8003a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d3e4      	bcc.n	8003a34 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f002 fe84 	bl	800677c <USB_ReadInterrupts>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a7e:	d13c      	bne.n	8003afa <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a80:	2301      	movs	r3, #1
 8003a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a84:	e02b      	b.n	8003ade <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	3318      	adds	r3, #24
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d115      	bne.n	8003ad8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003aac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	da12      	bge.n	8003ad8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	3317      	adds	r3, #23
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fab2 	bl	800403c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ada:	3301      	adds	r3, #1
 8003adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	791b      	ldrb	r3, [r3, #4]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d3cd      	bcc.n	8003a86 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695a      	ldr	r2, [r3, #20]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003af8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f002 fe3c 	bl	800677c <USB_ReadInterrupts>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b0e:	d156      	bne.n	8003bbe <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b10:	2301      	movs	r3, #1
 8003b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b14:	e045      	b.n	8003ba2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d12e      	bne.n	8003b9c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b3e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	da2b      	bge.n	8003b9c <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	0c1a      	lsrs	r2, r3, #16
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003b4e:	4053      	eors	r3, r2
 8003b50:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d121      	bne.n	8003b9c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10a      	bne.n	8003b9c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b98:	6053      	str	r3, [r2, #4]
            break;
 8003b9a:	e008      	b.n	8003bae <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	791b      	ldrb	r3, [r3, #4]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d3b3      	bcc.n	8003b16 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695a      	ldr	r2, [r3, #20]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003bbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f002 fdda 	bl	800677c <USB_ReadInterrupts>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd2:	d10a      	bne.n	8003bea <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f004 ff0b 	bl	80089f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695a      	ldr	r2, [r3, #20]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003be8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f002 fdc4 	bl	800677c <USB_ReadInterrupts>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d115      	bne.n	8003c2a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f004 fefb 	bl	8008a0c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6859      	ldr	r1, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]
 8003c26:	e000      	b.n	8003c2a <HAL_PCD_IRQHandler+0x93c>
      return;
 8003c28:	bf00      	nop
    }
  }
}
 8003c2a:	3734      	adds	r7, #52	@ 0x34
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd90      	pop	{r4, r7, pc}

08003c30 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_PCD_SetAddress+0x1a>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e012      	b.n	8003c70 <HAL_PCD_SetAddress+0x40>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	78fa      	ldrb	r2, [r7, #3]
 8003c56:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	78fa      	ldrb	r2, [r7, #3]
 8003c5e:	4611      	mov	r1, r2
 8003c60:	4618      	mov	r0, r3
 8003c62:	f002 fd23 	bl	80066ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	4608      	mov	r0, r1
 8003c82:	4611      	mov	r1, r2
 8003c84:	461a      	mov	r2, r3
 8003c86:	4603      	mov	r3, r0
 8003c88:	70fb      	strb	r3, [r7, #3]
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	803b      	strh	r3, [r7, #0]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	da0f      	bge.n	8003cbe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c9e:	78fb      	ldrb	r3, [r7, #3]
 8003ca0:	f003 020f 	and.w	r2, r3, #15
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	3310      	adds	r3, #16
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	705a      	strb	r2, [r3, #1]
 8003cbc:	e00f      	b.n	8003cde <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cbe:	78fb      	ldrb	r3, [r7, #3]
 8003cc0:	f003 020f 	and.w	r2, r3, #15
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003cde:	78fb      	ldrb	r3, [r7, #3]
 8003ce0:	f003 030f 	and.w	r3, r3, #15
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003cea:	883b      	ldrh	r3, [r7, #0]
 8003cec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	78ba      	ldrb	r2, [r7, #2]
 8003cf8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	785b      	ldrb	r3, [r3, #1]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d004      	beq.n	8003d0c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d0c:	78bb      	ldrb	r3, [r7, #2]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d102      	bne.n	8003d18 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <HAL_PCD_EP_Open+0xae>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e00e      	b.n	8003d44 <HAL_PCD_EP_Open+0xcc>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68f9      	ldr	r1, [r7, #12]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f001 fea3 	bl	8005a80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003d42:	7afb      	ldrb	r3, [r7, #11]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	da0f      	bge.n	8003d80 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	f003 020f 	and.w	r2, r3, #15
 8003d66:	4613      	mov	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	3310      	adds	r3, #16
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	4413      	add	r3, r2
 8003d74:	3304      	adds	r3, #4
 8003d76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	705a      	strb	r2, [r3, #1]
 8003d7e:	e00f      	b.n	8003da0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	f003 020f 	and.w	r2, r3, #15
 8003d86:	4613      	mov	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	4413      	add	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	4413      	add	r3, r2
 8003d96:	3304      	adds	r3, #4
 8003d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <HAL_PCD_EP_Close+0x6e>
 8003db6:	2302      	movs	r3, #2
 8003db8:	e00e      	b.n	8003dd8 <HAL_PCD_EP_Close+0x8c>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68f9      	ldr	r1, [r7, #12]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f001 fee1 	bl	8005b90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	607a      	str	r2, [r7, #4]
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	460b      	mov	r3, r1
 8003dee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003df0:	7afb      	ldrb	r3, [r7, #11]
 8003df2:	f003 020f 	and.w	r2, r3, #15
 8003df6:	4613      	mov	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4413      	add	r3, r2
 8003e06:	3304      	adds	r3, #4
 8003e08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e22:	7afb      	ldrb	r3, [r7, #11]
 8003e24:	f003 030f 	and.w	r3, r3, #15
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	799b      	ldrb	r3, [r3, #6]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d102      	bne.n	8003e3c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	799b      	ldrb	r3, [r3, #6]
 8003e44:	461a      	mov	r2, r3
 8003e46:	6979      	ldr	r1, [r7, #20]
 8003e48:	f001 ff7e 	bl	8005d48 <USB_EPStartXfer>

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b086      	sub	sp, #24
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	603b      	str	r3, [r7, #0]
 8003e62:	460b      	mov	r3, r1
 8003e64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e66:	7afb      	ldrb	r3, [r7, #11]
 8003e68:	f003 020f 	and.w	r2, r3, #15
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4413      	add	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	3310      	adds	r3, #16
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4413      	add	r3, r2
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2201      	movs	r2, #1
 8003e94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e96:	7afb      	ldrb	r3, [r7, #11]
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	799b      	ldrb	r3, [r3, #6]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d102      	bne.n	8003eb0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6818      	ldr	r0, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	799b      	ldrb	r3, [r3, #6]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	6979      	ldr	r1, [r7, #20]
 8003ebc:	f001 ff44 	bl	8005d48 <USB_EPStartXfer>

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ed6:	78fb      	ldrb	r3, [r7, #3]
 8003ed8:	f003 030f 	and.w	r3, r3, #15
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	7912      	ldrb	r2, [r2, #4]
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e04f      	b.n	8003f88 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ee8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	da0f      	bge.n	8003f10 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	f003 020f 	and.w	r2, r3, #15
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	4413      	add	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	3310      	adds	r3, #16
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	4413      	add	r3, r2
 8003f04:	3304      	adds	r3, #4
 8003f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	705a      	strb	r2, [r3, #1]
 8003f0e:	e00d      	b.n	8003f2c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f10:	78fa      	ldrb	r2, [r7, #3]
 8003f12:	4613      	mov	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	4413      	add	r3, r2
 8003f22:	3304      	adds	r3, #4
 8003f24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	f003 030f 	and.w	r3, r3, #15
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_PCD_EP_SetStall+0x82>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e01d      	b.n	8003f88 <HAL_PCD_EP_SetStall+0xbe>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68f9      	ldr	r1, [r7, #12]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f002 fad2 	bl	8006504 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f60:	78fb      	ldrb	r3, [r7, #3]
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d109      	bne.n	8003f7e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	7999      	ldrb	r1, [r3, #6]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f78:	461a      	mov	r2, r3
 8003f7a:	f002 fcc3 	bl	8006904 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f9c:	78fb      	ldrb	r3, [r7, #3]
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	7912      	ldrb	r2, [r2, #4]
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d901      	bls.n	8003fae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e042      	b.n	8004034 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	da0f      	bge.n	8003fd6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fb6:	78fb      	ldrb	r3, [r7, #3]
 8003fb8:	f003 020f 	and.w	r2, r3, #15
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	3310      	adds	r3, #16
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	4413      	add	r3, r2
 8003fca:	3304      	adds	r3, #4
 8003fcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	705a      	strb	r2, [r3, #1]
 8003fd4:	e00f      	b.n	8003ff6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fd6:	78fb      	ldrb	r3, [r7, #3]
 8003fd8:	f003 020f 	and.w	r2, r3, #15
 8003fdc:	4613      	mov	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	4413      	add	r3, r2
 8003fec:	3304      	adds	r3, #4
 8003fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ffc:	78fb      	ldrb	r3, [r7, #3]
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	b2da      	uxtb	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_PCD_EP_ClrStall+0x86>
 8004012:	2302      	movs	r3, #2
 8004014:	e00e      	b.n	8004034 <HAL_PCD_EP_ClrStall+0xa4>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68f9      	ldr	r1, [r7, #12]
 8004024:	4618      	mov	r0, r3
 8004026:	f002 fadb 	bl	80065e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004048:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800404c:	2b00      	cmp	r3, #0
 800404e:	da0c      	bge.n	800406a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	f003 020f 	and.w	r2, r3, #15
 8004056:	4613      	mov	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	3310      	adds	r3, #16
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	4413      	add	r3, r2
 8004064:	3304      	adds	r3, #4
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	e00c      	b.n	8004084 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800406a:	78fb      	ldrb	r3, [r7, #3]
 800406c:	f003 020f 	and.w	r2, r3, #15
 8004070:	4613      	mov	r3, r2
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4413      	add	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	4413      	add	r3, r2
 8004080:	3304      	adds	r3, #4
 8004082:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68f9      	ldr	r1, [r7, #12]
 800408a:	4618      	mov	r0, r3
 800408c:	f002 f8fa 	bl	8006284 <USB_EPStopXfer>
 8004090:	4603      	mov	r3, r0
 8004092:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004094:	7afb      	ldrb	r3, [r7, #11]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b08a      	sub	sp, #40	@ 0x28
 80040a2:	af02      	add	r7, sp, #8
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	3310      	adds	r3, #16
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4413      	add	r3, r2
 80040c2:	3304      	adds	r3, #4
 80040c4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	695a      	ldr	r2, [r3, #20]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d901      	bls.n	80040d6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e06b      	b.n	80041ae <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	691a      	ldr	r2, [r3, #16]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	69fa      	ldr	r2, [r7, #28]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d902      	bls.n	80040f2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	3303      	adds	r3, #3
 80040f6:	089b      	lsrs	r3, r3, #2
 80040f8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040fa:	e02a      	b.n	8004152 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	429a      	cmp	r2, r3
 8004110:	d902      	bls.n	8004118 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	3303      	adds	r3, #3
 800411c:	089b      	lsrs	r3, r3, #2
 800411e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	68d9      	ldr	r1, [r3, #12]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	b2da      	uxtb	r2, r3
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	4603      	mov	r3, r0
 8004134:	6978      	ldr	r0, [r7, #20]
 8004136:	f002 f94f 	bl	80063d8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	441a      	add	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	695a      	ldr	r2, [r3, #20]
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	441a      	add	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	429a      	cmp	r2, r3
 8004166:	d809      	bhi.n	800417c <PCD_WriteEmptyTxFifo+0xde>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	695a      	ldr	r2, [r3, #20]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004170:	429a      	cmp	r2, r3
 8004172:	d203      	bcs.n	800417c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1bf      	bne.n	80040fc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	429a      	cmp	r2, r3
 8004186:	d811      	bhi.n	80041ac <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	2201      	movs	r2, #1
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800419c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	43db      	mvns	r3, r3
 80041a2:	6939      	ldr	r1, [r7, #16]
 80041a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041a8:	4013      	ands	r3, r2
 80041aa:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	333c      	adds	r3, #60	@ 0x3c
 80041d0:	3304      	adds	r3, #4
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	799b      	ldrb	r3, [r3, #6]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d17b      	bne.n	80042e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d015      	beq.n	8004224 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	4a61      	ldr	r2, [pc, #388]	@ (8004380 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	f240 80b9 	bls.w	8004374 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 80b3 	beq.w	8004374 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800421a:	461a      	mov	r2, r3
 800421c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004220:	6093      	str	r3, [r2, #8]
 8004222:	e0a7      	b.n	8004374 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b00      	cmp	r3, #0
 800422c:	d009      	beq.n	8004242 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	4413      	add	r3, r2
 8004236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800423a:	461a      	mov	r2, r3
 800423c:	2320      	movs	r3, #32
 800423e:	6093      	str	r3, [r2, #8]
 8004240:	e098      	b.n	8004374 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004248:	2b00      	cmp	r3, #0
 800424a:	f040 8093 	bne.w	8004374 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	4a4b      	ldr	r2, [pc, #300]	@ (8004380 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d90f      	bls.n	8004276 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800426c:	461a      	mov	r2, r3
 800426e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004272:	6093      	str	r3, [r2, #8]
 8004274:	e07e      	b.n	8004374 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	4613      	mov	r3, r2
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	4413      	add	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	4413      	add	r3, r2
 8004288:	3304      	adds	r3, #4
 800428a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a1a      	ldr	r2, [r3, #32]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	0159      	lsls	r1, r3, #5
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	440b      	add	r3, r1
 8004298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042a2:	1ad2      	subs	r2, r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d114      	bne.n	80042d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d109      	bne.n	80042ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6818      	ldr	r0, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80042c0:	461a      	mov	r2, r3
 80042c2:	2101      	movs	r1, #1
 80042c4:	f002 fb1e 	bl	8006904 <USB_EP0_OutStart>
 80042c8:	e006      	b.n	80042d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	441a      	add	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	4619      	mov	r1, r3
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f004 fac2 	bl	8008868 <HAL_PCD_DataOutStageCallback>
 80042e4:	e046      	b.n	8004374 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	4a26      	ldr	r2, [pc, #152]	@ (8004384 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d124      	bne.n	8004338 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00a      	beq.n	800430e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	015a      	lsls	r2, r3, #5
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	4413      	add	r3, r2
 8004300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004304:	461a      	mov	r2, r3
 8004306:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800430a:	6093      	str	r3, [r2, #8]
 800430c:	e032      	b.n	8004374 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	f003 0320 	and.w	r3, r3, #32
 8004314:	2b00      	cmp	r3, #0
 8004316:	d008      	beq.n	800432a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004324:	461a      	mov	r2, r3
 8004326:	2320      	movs	r3, #32
 8004328:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	b2db      	uxtb	r3, r3
 800432e:	4619      	mov	r1, r3
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f004 fa99 	bl	8008868 <HAL_PCD_DataOutStageCallback>
 8004336:	e01d      	b.n	8004374 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d114      	bne.n	8004368 <PCD_EP_OutXfrComplete_int+0x1b0>
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	4613      	mov	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d108      	bne.n	8004368 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004360:	461a      	mov	r2, r3
 8004362:	2100      	movs	r1, #0
 8004364:	f002 face 	bl	8006904 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	4619      	mov	r1, r3
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f004 fa7a 	bl	8008868 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3720      	adds	r7, #32
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	4f54300a 	.word	0x4f54300a
 8004384:	4f54310a 	.word	0x4f54310a

08004388 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	333c      	adds	r3, #60	@ 0x3c
 80043a0:	3304      	adds	r3, #4
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4a15      	ldr	r2, [pc, #84]	@ (8004410 <PCD_EP_OutSetupPacket_int+0x88>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d90e      	bls.n	80043dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d009      	beq.n	80043dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043d4:	461a      	mov	r2, r3
 80043d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f004 fa31 	bl	8008844 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4a0a      	ldr	r2, [pc, #40]	@ (8004410 <PCD_EP_OutSetupPacket_int+0x88>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d90c      	bls.n	8004404 <PCD_EP_OutSetupPacket_int+0x7c>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	799b      	ldrb	r3, [r3, #6]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d108      	bne.n	8004404 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043fc:	461a      	mov	r2, r3
 80043fe:	2101      	movs	r1, #1
 8004400:	f002 fa80 	bl	8006904 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	4f54300a 	.word	0x4f54300a

08004414 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	460b      	mov	r3, r1
 800441e:	70fb      	strb	r3, [r7, #3]
 8004420:	4613      	mov	r3, r2
 8004422:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d107      	bne.n	8004442 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004432:	883b      	ldrh	r3, [r7, #0]
 8004434:	0419      	lsls	r1, r3, #16
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	430a      	orrs	r2, r1
 800443e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004440:	e028      	b.n	8004494 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004448:	0c1b      	lsrs	r3, r3, #16
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	4413      	add	r3, r2
 800444e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004450:	2300      	movs	r3, #0
 8004452:	73fb      	strb	r3, [r7, #15]
 8004454:	e00d      	b.n	8004472 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	7bfb      	ldrb	r3, [r7, #15]
 800445c:	3340      	adds	r3, #64	@ 0x40
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	0c1b      	lsrs	r3, r3, #16
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	4413      	add	r3, r2
 800446a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	3301      	adds	r3, #1
 8004470:	73fb      	strb	r3, [r7, #15]
 8004472:	7bfa      	ldrb	r2, [r7, #15]
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	3b01      	subs	r3, #1
 8004478:	429a      	cmp	r2, r3
 800447a:	d3ec      	bcc.n	8004456 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800447c:	883b      	ldrh	r3, [r7, #0]
 800447e:	0418      	lsls	r0, r3, #16
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6819      	ldr	r1, [r3, #0]
 8004484:	78fb      	ldrb	r3, [r7, #3]
 8004486:	3b01      	subs	r3, #1
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	4302      	orrs	r2, r0
 800448c:	3340      	adds	r3, #64	@ 0x40
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	460b      	mov	r3, r1
 80044ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	887a      	ldrh	r2, [r7, #2]
 80044b4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e267      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d075      	beq.n	80045e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044fa:	4b88      	ldr	r3, [pc, #544]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 030c 	and.w	r3, r3, #12
 8004502:	2b04      	cmp	r3, #4
 8004504:	d00c      	beq.n	8004520 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004506:	4b85      	ldr	r3, [pc, #532]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800450e:	2b08      	cmp	r3, #8
 8004510:	d112      	bne.n	8004538 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004512:	4b82      	ldr	r3, [pc, #520]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800451a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800451e:	d10b      	bne.n	8004538 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004520:	4b7e      	ldr	r3, [pc, #504]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d05b      	beq.n	80045e4 <HAL_RCC_OscConfig+0x108>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d157      	bne.n	80045e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e242      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004540:	d106      	bne.n	8004550 <HAL_RCC_OscConfig+0x74>
 8004542:	4b76      	ldr	r3, [pc, #472]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a75      	ldr	r2, [pc, #468]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 8004548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	e01d      	b.n	800458c <HAL_RCC_OscConfig+0xb0>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004558:	d10c      	bne.n	8004574 <HAL_RCC_OscConfig+0x98>
 800455a:	4b70      	ldr	r3, [pc, #448]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a6f      	ldr	r2, [pc, #444]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 8004560:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	4b6d      	ldr	r3, [pc, #436]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a6c      	ldr	r2, [pc, #432]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 800456c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	e00b      	b.n	800458c <HAL_RCC_OscConfig+0xb0>
 8004574:	4b69      	ldr	r3, [pc, #420]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a68      	ldr	r2, [pc, #416]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 800457a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	4b66      	ldr	r3, [pc, #408]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a65      	ldr	r2, [pc, #404]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 8004586:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800458a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d013      	beq.n	80045bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004594:	f7fd f998 	bl	80018c8 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800459c:	f7fd f994 	bl	80018c8 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b64      	cmp	r3, #100	@ 0x64
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e207      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ae:	4b5b      	ldr	r3, [pc, #364]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f0      	beq.n	800459c <HAL_RCC_OscConfig+0xc0>
 80045ba:	e014      	b.n	80045e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045bc:	f7fd f984 	bl	80018c8 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c4:	f7fd f980 	bl	80018c8 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b64      	cmp	r3, #100	@ 0x64
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e1f3      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045d6:	4b51      	ldr	r3, [pc, #324]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f0      	bne.n	80045c4 <HAL_RCC_OscConfig+0xe8>
 80045e2:	e000      	b.n	80045e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d063      	beq.n	80046ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045f2:	4b4a      	ldr	r3, [pc, #296]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 030c 	and.w	r3, r3, #12
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00b      	beq.n	8004616 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045fe:	4b47      	ldr	r3, [pc, #284]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004606:	2b08      	cmp	r3, #8
 8004608:	d11c      	bne.n	8004644 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800460a:	4b44      	ldr	r3, [pc, #272]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d116      	bne.n	8004644 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004616:	4b41      	ldr	r3, [pc, #260]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d005      	beq.n	800462e <HAL_RCC_OscConfig+0x152>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d001      	beq.n	800462e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e1c7      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462e:	4b3b      	ldr	r3, [pc, #236]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	4937      	ldr	r1, [pc, #220]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 800463e:	4313      	orrs	r3, r2
 8004640:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004642:	e03a      	b.n	80046ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d020      	beq.n	800468e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800464c:	4b34      	ldr	r3, [pc, #208]	@ (8004720 <HAL_RCC_OscConfig+0x244>)
 800464e:	2201      	movs	r2, #1
 8004650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004652:	f7fd f939 	bl	80018c8 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800465a:	f7fd f935 	bl	80018c8 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e1a8      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800466c:	4b2b      	ldr	r3, [pc, #172]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0f0      	beq.n	800465a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004678:	4b28      	ldr	r3, [pc, #160]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	4925      	ldr	r1, [pc, #148]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 8004688:	4313      	orrs	r3, r2
 800468a:	600b      	str	r3, [r1, #0]
 800468c:	e015      	b.n	80046ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800468e:	4b24      	ldr	r3, [pc, #144]	@ (8004720 <HAL_RCC_OscConfig+0x244>)
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004694:	f7fd f918 	bl	80018c8 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800469c:	f7fd f914 	bl	80018c8 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e187      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ae:	4b1b      	ldr	r3, [pc, #108]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1f0      	bne.n	800469c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d036      	beq.n	8004734 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d016      	beq.n	80046fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ce:	4b15      	ldr	r3, [pc, #84]	@ (8004724 <HAL_RCC_OscConfig+0x248>)
 80046d0:	2201      	movs	r2, #1
 80046d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d4:	f7fd f8f8 	bl	80018c8 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046dc:	f7fd f8f4 	bl	80018c8 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e167      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ee:	4b0b      	ldr	r3, [pc, #44]	@ (800471c <HAL_RCC_OscConfig+0x240>)
 80046f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0x200>
 80046fa:	e01b      	b.n	8004734 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046fc:	4b09      	ldr	r3, [pc, #36]	@ (8004724 <HAL_RCC_OscConfig+0x248>)
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004702:	f7fd f8e1 	bl	80018c8 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004708:	e00e      	b.n	8004728 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800470a:	f7fd f8dd 	bl	80018c8 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d907      	bls.n	8004728 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e150      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
 800471c:	40023800 	.word	0x40023800
 8004720:	42470000 	.word	0x42470000
 8004724:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004728:	4b88      	ldr	r3, [pc, #544]	@ (800494c <HAL_RCC_OscConfig+0x470>)
 800472a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1ea      	bne.n	800470a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8097 	beq.w	8004870 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004742:	2300      	movs	r3, #0
 8004744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004746:	4b81      	ldr	r3, [pc, #516]	@ (800494c <HAL_RCC_OscConfig+0x470>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10f      	bne.n	8004772 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004752:	2300      	movs	r3, #0
 8004754:	60bb      	str	r3, [r7, #8]
 8004756:	4b7d      	ldr	r3, [pc, #500]	@ (800494c <HAL_RCC_OscConfig+0x470>)
 8004758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475a:	4a7c      	ldr	r2, [pc, #496]	@ (800494c <HAL_RCC_OscConfig+0x470>)
 800475c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004760:	6413      	str	r3, [r2, #64]	@ 0x40
 8004762:	4b7a      	ldr	r3, [pc, #488]	@ (800494c <HAL_RCC_OscConfig+0x470>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800476a:	60bb      	str	r3, [r7, #8]
 800476c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800476e:	2301      	movs	r3, #1
 8004770:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004772:	4b77      	ldr	r3, [pc, #476]	@ (8004950 <HAL_RCC_OscConfig+0x474>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800477a:	2b00      	cmp	r3, #0
 800477c:	d118      	bne.n	80047b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800477e:	4b74      	ldr	r3, [pc, #464]	@ (8004950 <HAL_RCC_OscConfig+0x474>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a73      	ldr	r2, [pc, #460]	@ (8004950 <HAL_RCC_OscConfig+0x474>)
 8004784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800478a:	f7fd f89d 	bl	80018c8 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004792:	f7fd f899 	bl	80018c8 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e10c      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004950 <HAL_RCC_OscConfig+0x474>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0f0      	beq.n	8004792 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d106      	bne.n	80047c6 <HAL_RCC_OscConfig+0x2ea>
 80047b8:	4b64      	ldr	r3, [pc, #400]	@ (800494c <HAL_RCC_OscConfig+0x470>)
 80047ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047bc:	4a63      	ldr	r2, [pc, #396]	@ (800494c <HAL_RCC_OscConfig+0x470>)
 80047be:	f043 0301 	orr.w	r3, r3, #1
 80047c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80047c4:	e01c      	b.n	8004800 <HAL_RCC_OscConfig+0x324>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	2b05      	cmp	r3, #5
 80047cc:	d10c      	bne.n	80047e8 <HAL_RCC_OscConfig+0x30c>
 80047ce:	4b5f      	ldr	r3, [pc, #380]	@ (800494c <HAL_RCC_OscConfig+0x470>)
 80047d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d2:	4a5e      	ldr	r2, [pc, #376]	@ (800494c <HAL_RCC_OscConfig+0x470>)
 80047d4:	f043 0304 	orr.w	r3, r3, #4
 80047d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80047da:	4b5c      	ldr	r3, [pc, #368]	@ (800494c <HAL_RCC_OscConfig+0x470>)
 80047dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047de:	4a5b      	ldr	r2, [pc, #364]	@ (800494c <HAL_RCC_OscConfig+0x470>)
 80047e0:	f043 0301 	orr.w	r3, r3, #1
 80047e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80047e6:	e00b      	b.n	8004800 <HAL_RCC_OscConfig+0x324>
 80047e8:	4b58      	ldr	r3, [pc, #352]	@ (800494c <HAL_RCC_OscConfig+0x470>)
 80047ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ec:	4a57      	ldr	r2, [pc, #348]	@ (800494c <HAL_RCC_OscConfig+0x470>)
 80047ee:	f023 0301 	bic.w	r3, r3, #1
 80047f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80047f4:	4b55      	ldr	r3, [pc, #340]	@ (800494c <HAL_RCC_OscConfig+0x470>)
 80047f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f8:	4a54      	ldr	r2, [pc, #336]	@ (800494c <HAL_RCC_OscConfig+0x470>)
 80047fa:	f023 0304 	bic.w	r3, r3, #4
 80047fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d015      	beq.n	8004834 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004808:	f7fd f85e 	bl	80018c8 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480e:	e00a      	b.n	8004826 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004810:	f7fd f85a 	bl	80018c8 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e0cb      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004826:	4b49      	ldr	r3, [pc, #292]	@ (800494c <HAL_RCC_OscConfig+0x470>)
 8004828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0ee      	beq.n	8004810 <HAL_RCC_OscConfig+0x334>
 8004832:	e014      	b.n	800485e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004834:	f7fd f848 	bl	80018c8 <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800483a:	e00a      	b.n	8004852 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800483c:	f7fd f844 	bl	80018c8 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800484a:	4293      	cmp	r3, r2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e0b5      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004852:	4b3e      	ldr	r3, [pc, #248]	@ (800494c <HAL_RCC_OscConfig+0x470>)
 8004854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1ee      	bne.n	800483c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800485e:	7dfb      	ldrb	r3, [r7, #23]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d105      	bne.n	8004870 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004864:	4b39      	ldr	r3, [pc, #228]	@ (800494c <HAL_RCC_OscConfig+0x470>)
 8004866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004868:	4a38      	ldr	r2, [pc, #224]	@ (800494c <HAL_RCC_OscConfig+0x470>)
 800486a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800486e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 80a1 	beq.w	80049bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800487a:	4b34      	ldr	r3, [pc, #208]	@ (800494c <HAL_RCC_OscConfig+0x470>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 030c 	and.w	r3, r3, #12
 8004882:	2b08      	cmp	r3, #8
 8004884:	d05c      	beq.n	8004940 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	2b02      	cmp	r3, #2
 800488c:	d141      	bne.n	8004912 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488e:	4b31      	ldr	r3, [pc, #196]	@ (8004954 <HAL_RCC_OscConfig+0x478>)
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004894:	f7fd f818 	bl	80018c8 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800489c:	f7fd f814 	bl	80018c8 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e087      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ae:	4b27      	ldr	r3, [pc, #156]	@ (800494c <HAL_RCC_OscConfig+0x470>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69da      	ldr	r2, [r3, #28]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c8:	019b      	lsls	r3, r3, #6
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d0:	085b      	lsrs	r3, r3, #1
 80048d2:	3b01      	subs	r3, #1
 80048d4:	041b      	lsls	r3, r3, #16
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048dc:	061b      	lsls	r3, r3, #24
 80048de:	491b      	ldr	r1, [pc, #108]	@ (800494c <HAL_RCC_OscConfig+0x470>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004954 <HAL_RCC_OscConfig+0x478>)
 80048e6:	2201      	movs	r2, #1
 80048e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ea:	f7fc ffed 	bl	80018c8 <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f2:	f7fc ffe9 	bl	80018c8 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e05c      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004904:	4b11      	ldr	r3, [pc, #68]	@ (800494c <HAL_RCC_OscConfig+0x470>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0f0      	beq.n	80048f2 <HAL_RCC_OscConfig+0x416>
 8004910:	e054      	b.n	80049bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004912:	4b10      	ldr	r3, [pc, #64]	@ (8004954 <HAL_RCC_OscConfig+0x478>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004918:	f7fc ffd6 	bl	80018c8 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004920:	f7fc ffd2 	bl	80018c8 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e045      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004932:	4b06      	ldr	r3, [pc, #24]	@ (800494c <HAL_RCC_OscConfig+0x470>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f0      	bne.n	8004920 <HAL_RCC_OscConfig+0x444>
 800493e:	e03d      	b.n	80049bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d107      	bne.n	8004958 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e038      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
 800494c:	40023800 	.word	0x40023800
 8004950:	40007000 	.word	0x40007000
 8004954:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004958:	4b1b      	ldr	r3, [pc, #108]	@ (80049c8 <HAL_RCC_OscConfig+0x4ec>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d028      	beq.n	80049b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004970:	429a      	cmp	r2, r3
 8004972:	d121      	bne.n	80049b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800497e:	429a      	cmp	r2, r3
 8004980:	d11a      	bne.n	80049b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004988:	4013      	ands	r3, r2
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800498e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004990:	4293      	cmp	r3, r2
 8004992:	d111      	bne.n	80049b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499e:	085b      	lsrs	r3, r3, #1
 80049a0:	3b01      	subs	r3, #1
 80049a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d107      	bne.n	80049b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d001      	beq.n	80049bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e000      	b.n	80049be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40023800 	.word	0x40023800

080049cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e0cc      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049e0:	4b68      	ldr	r3, [pc, #416]	@ (8004b84 <HAL_RCC_ClockConfig+0x1b8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d90c      	bls.n	8004a08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ee:	4b65      	ldr	r3, [pc, #404]	@ (8004b84 <HAL_RCC_ClockConfig+0x1b8>)
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	b2d2      	uxtb	r2, r2
 80049f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f6:	4b63      	ldr	r3, [pc, #396]	@ (8004b84 <HAL_RCC_ClockConfig+0x1b8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d001      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0b8      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d020      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a20:	4b59      	ldr	r3, [pc, #356]	@ (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	4a58      	ldr	r2, [pc, #352]	@ (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0308 	and.w	r3, r3, #8
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d005      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a38:	4b53      	ldr	r3, [pc, #332]	@ (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	4a52      	ldr	r2, [pc, #328]	@ (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a44:	4b50      	ldr	r3, [pc, #320]	@ (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	494d      	ldr	r1, [pc, #308]	@ (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d044      	beq.n	8004aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d107      	bne.n	8004a7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6a:	4b47      	ldr	r3, [pc, #284]	@ (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d119      	bne.n	8004aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e07f      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d003      	beq.n	8004a8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	d107      	bne.n	8004a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a8a:	4b3f      	ldr	r3, [pc, #252]	@ (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d109      	bne.n	8004aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e06f      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e067      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aaa:	4b37      	ldr	r3, [pc, #220]	@ (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f023 0203 	bic.w	r2, r3, #3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	4934      	ldr	r1, [pc, #208]	@ (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004abc:	f7fc ff04 	bl	80018c8 <HAL_GetTick>
 8004ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac2:	e00a      	b.n	8004ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac4:	f7fc ff00 	bl	80018c8 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e04f      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ada:	4b2b      	ldr	r3, [pc, #172]	@ (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 020c 	and.w	r2, r3, #12
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d1eb      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004aec:	4b25      	ldr	r3, [pc, #148]	@ (8004b84 <HAL_RCC_ClockConfig+0x1b8>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 030f 	and.w	r3, r3, #15
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d20c      	bcs.n	8004b14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004afa:	4b22      	ldr	r3, [pc, #136]	@ (8004b84 <HAL_RCC_ClockConfig+0x1b8>)
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b02:	4b20      	ldr	r3, [pc, #128]	@ (8004b84 <HAL_RCC_ClockConfig+0x1b8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d001      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e032      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d008      	beq.n	8004b32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b20:	4b19      	ldr	r3, [pc, #100]	@ (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	4916      	ldr	r1, [pc, #88]	@ (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0308 	and.w	r3, r3, #8
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d009      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b3e:	4b12      	ldr	r3, [pc, #72]	@ (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	490e      	ldr	r1, [pc, #56]	@ (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b52:	f000 f821 	bl	8004b98 <HAL_RCC_GetSysClockFreq>
 8004b56:	4602      	mov	r2, r0
 8004b58:	4b0b      	ldr	r3, [pc, #44]	@ (8004b88 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	091b      	lsrs	r3, r3, #4
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	490a      	ldr	r1, [pc, #40]	@ (8004b8c <HAL_RCC_ClockConfig+0x1c0>)
 8004b64:	5ccb      	ldrb	r3, [r1, r3]
 8004b66:	fa22 f303 	lsr.w	r3, r2, r3
 8004b6a:	4a09      	ldr	r2, [pc, #36]	@ (8004b90 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b6e:	4b09      	ldr	r3, [pc, #36]	@ (8004b94 <HAL_RCC_ClockConfig+0x1c8>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fc fe64 	bl	8001840 <HAL_InitTick>

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40023c00 	.word	0x40023c00
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	08008e64 	.word	0x08008e64
 8004b90:	20000058 	.word	0x20000058
 8004b94:	2000005c 	.word	0x2000005c

08004b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b9c:	b094      	sub	sp, #80	@ 0x50
 8004b9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bb0:	4b79      	ldr	r3, [pc, #484]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 030c 	and.w	r3, r3, #12
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d00d      	beq.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	f200 80e1 	bhi.w	8004d84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <HAL_RCC_GetSysClockFreq+0x34>
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d003      	beq.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004bca:	e0db      	b.n	8004d84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bcc:	4b73      	ldr	r3, [pc, #460]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x204>)
 8004bce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bd0:	e0db      	b.n	8004d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bd2:	4b73      	ldr	r3, [pc, #460]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bd6:	e0d8      	b.n	8004d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bd8:	4b6f      	ldr	r3, [pc, #444]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004be0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004be2:	4b6d      	ldr	r3, [pc, #436]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d063      	beq.n	8004cb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bee:	4b6a      	ldr	r3, [pc, #424]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	099b      	lsrs	r3, r3, #6
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bf8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c00:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c02:	2300      	movs	r3, #0
 8004c04:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c0a:	4622      	mov	r2, r4
 8004c0c:	462b      	mov	r3, r5
 8004c0e:	f04f 0000 	mov.w	r0, #0
 8004c12:	f04f 0100 	mov.w	r1, #0
 8004c16:	0159      	lsls	r1, r3, #5
 8004c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c1c:	0150      	lsls	r0, r2, #5
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4621      	mov	r1, r4
 8004c24:	1a51      	subs	r1, r2, r1
 8004c26:	6139      	str	r1, [r7, #16]
 8004c28:	4629      	mov	r1, r5
 8004c2a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	f04f 0200 	mov.w	r2, #0
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c3c:	4659      	mov	r1, fp
 8004c3e:	018b      	lsls	r3, r1, #6
 8004c40:	4651      	mov	r1, sl
 8004c42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c46:	4651      	mov	r1, sl
 8004c48:	018a      	lsls	r2, r1, #6
 8004c4a:	4651      	mov	r1, sl
 8004c4c:	ebb2 0801 	subs.w	r8, r2, r1
 8004c50:	4659      	mov	r1, fp
 8004c52:	eb63 0901 	sbc.w	r9, r3, r1
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c6a:	4690      	mov	r8, r2
 8004c6c:	4699      	mov	r9, r3
 8004c6e:	4623      	mov	r3, r4
 8004c70:	eb18 0303 	adds.w	r3, r8, r3
 8004c74:	60bb      	str	r3, [r7, #8]
 8004c76:	462b      	mov	r3, r5
 8004c78:	eb49 0303 	adc.w	r3, r9, r3
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	f04f 0200 	mov.w	r2, #0
 8004c82:	f04f 0300 	mov.w	r3, #0
 8004c86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c8a:	4629      	mov	r1, r5
 8004c8c:	024b      	lsls	r3, r1, #9
 8004c8e:	4621      	mov	r1, r4
 8004c90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c94:	4621      	mov	r1, r4
 8004c96:	024a      	lsls	r2, r1, #9
 8004c98:	4610      	mov	r0, r2
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ca2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ca4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ca8:	f7fb fe96 	bl	80009d8 <__aeabi_uldivmod>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cb4:	e058      	b.n	8004d68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cb6:	4b38      	ldr	r3, [pc, #224]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	099b      	lsrs	r3, r3, #6
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	4611      	mov	r1, r2
 8004cc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cc6:	623b      	str	r3, [r7, #32]
 8004cc8:	2300      	movs	r3, #0
 8004cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ccc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cd0:	4642      	mov	r2, r8
 8004cd2:	464b      	mov	r3, r9
 8004cd4:	f04f 0000 	mov.w	r0, #0
 8004cd8:	f04f 0100 	mov.w	r1, #0
 8004cdc:	0159      	lsls	r1, r3, #5
 8004cde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ce2:	0150      	lsls	r0, r2, #5
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4641      	mov	r1, r8
 8004cea:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cee:	4649      	mov	r1, r9
 8004cf0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d08:	ebb2 040a 	subs.w	r4, r2, sl
 8004d0c:	eb63 050b 	sbc.w	r5, r3, fp
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	00eb      	lsls	r3, r5, #3
 8004d1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d1e:	00e2      	lsls	r2, r4, #3
 8004d20:	4614      	mov	r4, r2
 8004d22:	461d      	mov	r5, r3
 8004d24:	4643      	mov	r3, r8
 8004d26:	18e3      	adds	r3, r4, r3
 8004d28:	603b      	str	r3, [r7, #0]
 8004d2a:	464b      	mov	r3, r9
 8004d2c:	eb45 0303 	adc.w	r3, r5, r3
 8004d30:	607b      	str	r3, [r7, #4]
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d3e:	4629      	mov	r1, r5
 8004d40:	028b      	lsls	r3, r1, #10
 8004d42:	4621      	mov	r1, r4
 8004d44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d48:	4621      	mov	r1, r4
 8004d4a:	028a      	lsls	r2, r1, #10
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	4619      	mov	r1, r3
 8004d50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d52:	2200      	movs	r2, #0
 8004d54:	61bb      	str	r3, [r7, #24]
 8004d56:	61fa      	str	r2, [r7, #28]
 8004d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d5c:	f7fb fe3c 	bl	80009d8 <__aeabi_uldivmod>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4613      	mov	r3, r2
 8004d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d68:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	0c1b      	lsrs	r3, r3, #16
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	3301      	adds	r3, #1
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d82:	e002      	b.n	8004d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d84:	4b05      	ldr	r3, [pc, #20]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3750      	adds	r7, #80	@ 0x50
 8004d90:	46bd      	mov	sp, r7
 8004d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d96:	bf00      	nop
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	00f42400 	.word	0x00f42400
 8004da0:	007a1200 	.word	0x007a1200

08004da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004da8:	4b03      	ldr	r3, [pc, #12]	@ (8004db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004daa:	681b      	ldr	r3, [r3, #0]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	20000058 	.word	0x20000058

08004dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004dc0:	f7ff fff0 	bl	8004da4 <HAL_RCC_GetHCLKFreq>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	4b05      	ldr	r3, [pc, #20]	@ (8004ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	0a9b      	lsrs	r3, r3, #10
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	4903      	ldr	r1, [pc, #12]	@ (8004de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dd2:	5ccb      	ldrb	r3, [r1, r3]
 8004dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40023800 	.word	0x40023800
 8004de0:	08008e74 	.word	0x08008e74

08004de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004de8:	f7ff ffdc 	bl	8004da4 <HAL_RCC_GetHCLKFreq>
 8004dec:	4602      	mov	r2, r0
 8004dee:	4b05      	ldr	r3, [pc, #20]	@ (8004e04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	0b5b      	lsrs	r3, r3, #13
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	4903      	ldr	r1, [pc, #12]	@ (8004e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dfa:	5ccb      	ldrb	r3, [r1, r3]
 8004dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40023800 	.word	0x40023800
 8004e08:	08008e74 	.word	0x08008e74

08004e0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e042      	b.n	8004ea4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d106      	bne.n	8004e38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fc fc10 	bl	8001658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2224      	movs	r2, #36	@ 0x24
 8004e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68da      	ldr	r2, [r3, #12]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f82b 	bl	8004eac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	695a      	ldr	r2, [r3, #20]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eb0:	b0c0      	sub	sp, #256	@ 0x100
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec8:	68d9      	ldr	r1, [r3, #12]
 8004eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	ea40 0301 	orr.w	r3, r0, r1
 8004ed4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	431a      	orrs	r2, r3
 8004eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004f04:	f021 010c 	bic.w	r1, r1, #12
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f12:	430b      	orrs	r3, r1
 8004f14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f26:	6999      	ldr	r1, [r3, #24]
 8004f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	ea40 0301 	orr.w	r3, r0, r1
 8004f32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	4b8f      	ldr	r3, [pc, #572]	@ (8005178 <UART_SetConfig+0x2cc>)
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d005      	beq.n	8004f4c <UART_SetConfig+0xa0>
 8004f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	4b8d      	ldr	r3, [pc, #564]	@ (800517c <UART_SetConfig+0x2d0>)
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d104      	bne.n	8004f56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f4c:	f7ff ff4a 	bl	8004de4 <HAL_RCC_GetPCLK2Freq>
 8004f50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f54:	e003      	b.n	8004f5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f56:	f7ff ff31 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 8004f5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f68:	f040 810c 	bne.w	8005184 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f70:	2200      	movs	r2, #0
 8004f72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f7e:	4622      	mov	r2, r4
 8004f80:	462b      	mov	r3, r5
 8004f82:	1891      	adds	r1, r2, r2
 8004f84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f86:	415b      	adcs	r3, r3
 8004f88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f8e:	4621      	mov	r1, r4
 8004f90:	eb12 0801 	adds.w	r8, r2, r1
 8004f94:	4629      	mov	r1, r5
 8004f96:	eb43 0901 	adc.w	r9, r3, r1
 8004f9a:	f04f 0200 	mov.w	r2, #0
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004faa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fae:	4690      	mov	r8, r2
 8004fb0:	4699      	mov	r9, r3
 8004fb2:	4623      	mov	r3, r4
 8004fb4:	eb18 0303 	adds.w	r3, r8, r3
 8004fb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004fbc:	462b      	mov	r3, r5
 8004fbe:	eb49 0303 	adc.w	r3, r9, r3
 8004fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004fd2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004fd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004fda:	460b      	mov	r3, r1
 8004fdc:	18db      	adds	r3, r3, r3
 8004fde:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	eb42 0303 	adc.w	r3, r2, r3
 8004fe6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fe8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004fec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ff0:	f7fb fcf2 	bl	80009d8 <__aeabi_uldivmod>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4b61      	ldr	r3, [pc, #388]	@ (8005180 <UART_SetConfig+0x2d4>)
 8004ffa:	fba3 2302 	umull	r2, r3, r3, r2
 8004ffe:	095b      	lsrs	r3, r3, #5
 8005000:	011c      	lsls	r4, r3, #4
 8005002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005006:	2200      	movs	r2, #0
 8005008:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800500c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005010:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005014:	4642      	mov	r2, r8
 8005016:	464b      	mov	r3, r9
 8005018:	1891      	adds	r1, r2, r2
 800501a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800501c:	415b      	adcs	r3, r3
 800501e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005020:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005024:	4641      	mov	r1, r8
 8005026:	eb12 0a01 	adds.w	sl, r2, r1
 800502a:	4649      	mov	r1, r9
 800502c:	eb43 0b01 	adc.w	fp, r3, r1
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800503c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005040:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005044:	4692      	mov	sl, r2
 8005046:	469b      	mov	fp, r3
 8005048:	4643      	mov	r3, r8
 800504a:	eb1a 0303 	adds.w	r3, sl, r3
 800504e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005052:	464b      	mov	r3, r9
 8005054:	eb4b 0303 	adc.w	r3, fp, r3
 8005058:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800505c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005068:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800506c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005070:	460b      	mov	r3, r1
 8005072:	18db      	adds	r3, r3, r3
 8005074:	643b      	str	r3, [r7, #64]	@ 0x40
 8005076:	4613      	mov	r3, r2
 8005078:	eb42 0303 	adc.w	r3, r2, r3
 800507c:	647b      	str	r3, [r7, #68]	@ 0x44
 800507e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005082:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005086:	f7fb fca7 	bl	80009d8 <__aeabi_uldivmod>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	4611      	mov	r1, r2
 8005090:	4b3b      	ldr	r3, [pc, #236]	@ (8005180 <UART_SetConfig+0x2d4>)
 8005092:	fba3 2301 	umull	r2, r3, r3, r1
 8005096:	095b      	lsrs	r3, r3, #5
 8005098:	2264      	movs	r2, #100	@ 0x64
 800509a:	fb02 f303 	mul.w	r3, r2, r3
 800509e:	1acb      	subs	r3, r1, r3
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80050a6:	4b36      	ldr	r3, [pc, #216]	@ (8005180 <UART_SetConfig+0x2d4>)
 80050a8:	fba3 2302 	umull	r2, r3, r3, r2
 80050ac:	095b      	lsrs	r3, r3, #5
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80050b4:	441c      	add	r4, r3
 80050b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050ba:	2200      	movs	r2, #0
 80050bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80050c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80050c8:	4642      	mov	r2, r8
 80050ca:	464b      	mov	r3, r9
 80050cc:	1891      	adds	r1, r2, r2
 80050ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80050d0:	415b      	adcs	r3, r3
 80050d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80050d8:	4641      	mov	r1, r8
 80050da:	1851      	adds	r1, r2, r1
 80050dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80050de:	4649      	mov	r1, r9
 80050e0:	414b      	adcs	r3, r1
 80050e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80050f0:	4659      	mov	r1, fp
 80050f2:	00cb      	lsls	r3, r1, #3
 80050f4:	4651      	mov	r1, sl
 80050f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050fa:	4651      	mov	r1, sl
 80050fc:	00ca      	lsls	r2, r1, #3
 80050fe:	4610      	mov	r0, r2
 8005100:	4619      	mov	r1, r3
 8005102:	4603      	mov	r3, r0
 8005104:	4642      	mov	r2, r8
 8005106:	189b      	adds	r3, r3, r2
 8005108:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800510c:	464b      	mov	r3, r9
 800510e:	460a      	mov	r2, r1
 8005110:	eb42 0303 	adc.w	r3, r2, r3
 8005114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005124:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005128:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800512c:	460b      	mov	r3, r1
 800512e:	18db      	adds	r3, r3, r3
 8005130:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005132:	4613      	mov	r3, r2
 8005134:	eb42 0303 	adc.w	r3, r2, r3
 8005138:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800513a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800513e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005142:	f7fb fc49 	bl	80009d8 <__aeabi_uldivmod>
 8005146:	4602      	mov	r2, r0
 8005148:	460b      	mov	r3, r1
 800514a:	4b0d      	ldr	r3, [pc, #52]	@ (8005180 <UART_SetConfig+0x2d4>)
 800514c:	fba3 1302 	umull	r1, r3, r3, r2
 8005150:	095b      	lsrs	r3, r3, #5
 8005152:	2164      	movs	r1, #100	@ 0x64
 8005154:	fb01 f303 	mul.w	r3, r1, r3
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	3332      	adds	r3, #50	@ 0x32
 800515e:	4a08      	ldr	r2, [pc, #32]	@ (8005180 <UART_SetConfig+0x2d4>)
 8005160:	fba2 2303 	umull	r2, r3, r2, r3
 8005164:	095b      	lsrs	r3, r3, #5
 8005166:	f003 0207 	and.w	r2, r3, #7
 800516a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4422      	add	r2, r4
 8005172:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005174:	e106      	b.n	8005384 <UART_SetConfig+0x4d8>
 8005176:	bf00      	nop
 8005178:	40011000 	.word	0x40011000
 800517c:	40011400 	.word	0x40011400
 8005180:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005188:	2200      	movs	r2, #0
 800518a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800518e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005192:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005196:	4642      	mov	r2, r8
 8005198:	464b      	mov	r3, r9
 800519a:	1891      	adds	r1, r2, r2
 800519c:	6239      	str	r1, [r7, #32]
 800519e:	415b      	adcs	r3, r3
 80051a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80051a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051a6:	4641      	mov	r1, r8
 80051a8:	1854      	adds	r4, r2, r1
 80051aa:	4649      	mov	r1, r9
 80051ac:	eb43 0501 	adc.w	r5, r3, r1
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	f04f 0300 	mov.w	r3, #0
 80051b8:	00eb      	lsls	r3, r5, #3
 80051ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051be:	00e2      	lsls	r2, r4, #3
 80051c0:	4614      	mov	r4, r2
 80051c2:	461d      	mov	r5, r3
 80051c4:	4643      	mov	r3, r8
 80051c6:	18e3      	adds	r3, r4, r3
 80051c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80051cc:	464b      	mov	r3, r9
 80051ce:	eb45 0303 	adc.w	r3, r5, r3
 80051d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80051d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80051e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80051f2:	4629      	mov	r1, r5
 80051f4:	008b      	lsls	r3, r1, #2
 80051f6:	4621      	mov	r1, r4
 80051f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051fc:	4621      	mov	r1, r4
 80051fe:	008a      	lsls	r2, r1, #2
 8005200:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005204:	f7fb fbe8 	bl	80009d8 <__aeabi_uldivmod>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4b60      	ldr	r3, [pc, #384]	@ (8005390 <UART_SetConfig+0x4e4>)
 800520e:	fba3 2302 	umull	r2, r3, r3, r2
 8005212:	095b      	lsrs	r3, r3, #5
 8005214:	011c      	lsls	r4, r3, #4
 8005216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800521a:	2200      	movs	r2, #0
 800521c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005220:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005224:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005228:	4642      	mov	r2, r8
 800522a:	464b      	mov	r3, r9
 800522c:	1891      	adds	r1, r2, r2
 800522e:	61b9      	str	r1, [r7, #24]
 8005230:	415b      	adcs	r3, r3
 8005232:	61fb      	str	r3, [r7, #28]
 8005234:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005238:	4641      	mov	r1, r8
 800523a:	1851      	adds	r1, r2, r1
 800523c:	6139      	str	r1, [r7, #16]
 800523e:	4649      	mov	r1, r9
 8005240:	414b      	adcs	r3, r1
 8005242:	617b      	str	r3, [r7, #20]
 8005244:	f04f 0200 	mov.w	r2, #0
 8005248:	f04f 0300 	mov.w	r3, #0
 800524c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005250:	4659      	mov	r1, fp
 8005252:	00cb      	lsls	r3, r1, #3
 8005254:	4651      	mov	r1, sl
 8005256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800525a:	4651      	mov	r1, sl
 800525c:	00ca      	lsls	r2, r1, #3
 800525e:	4610      	mov	r0, r2
 8005260:	4619      	mov	r1, r3
 8005262:	4603      	mov	r3, r0
 8005264:	4642      	mov	r2, r8
 8005266:	189b      	adds	r3, r3, r2
 8005268:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800526c:	464b      	mov	r3, r9
 800526e:	460a      	mov	r2, r1
 8005270:	eb42 0303 	adc.w	r3, r2, r3
 8005274:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005282:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005284:	f04f 0200 	mov.w	r2, #0
 8005288:	f04f 0300 	mov.w	r3, #0
 800528c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005290:	4649      	mov	r1, r9
 8005292:	008b      	lsls	r3, r1, #2
 8005294:	4641      	mov	r1, r8
 8005296:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800529a:	4641      	mov	r1, r8
 800529c:	008a      	lsls	r2, r1, #2
 800529e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80052a2:	f7fb fb99 	bl	80009d8 <__aeabi_uldivmod>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4611      	mov	r1, r2
 80052ac:	4b38      	ldr	r3, [pc, #224]	@ (8005390 <UART_SetConfig+0x4e4>)
 80052ae:	fba3 2301 	umull	r2, r3, r3, r1
 80052b2:	095b      	lsrs	r3, r3, #5
 80052b4:	2264      	movs	r2, #100	@ 0x64
 80052b6:	fb02 f303 	mul.w	r3, r2, r3
 80052ba:	1acb      	subs	r3, r1, r3
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	3332      	adds	r3, #50	@ 0x32
 80052c0:	4a33      	ldr	r2, [pc, #204]	@ (8005390 <UART_SetConfig+0x4e4>)
 80052c2:	fba2 2303 	umull	r2, r3, r2, r3
 80052c6:	095b      	lsrs	r3, r3, #5
 80052c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052cc:	441c      	add	r4, r3
 80052ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052d2:	2200      	movs	r2, #0
 80052d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80052d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80052d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80052dc:	4642      	mov	r2, r8
 80052de:	464b      	mov	r3, r9
 80052e0:	1891      	adds	r1, r2, r2
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	415b      	adcs	r3, r3
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052ec:	4641      	mov	r1, r8
 80052ee:	1851      	adds	r1, r2, r1
 80052f0:	6039      	str	r1, [r7, #0]
 80052f2:	4649      	mov	r1, r9
 80052f4:	414b      	adcs	r3, r1
 80052f6:	607b      	str	r3, [r7, #4]
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005304:	4659      	mov	r1, fp
 8005306:	00cb      	lsls	r3, r1, #3
 8005308:	4651      	mov	r1, sl
 800530a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800530e:	4651      	mov	r1, sl
 8005310:	00ca      	lsls	r2, r1, #3
 8005312:	4610      	mov	r0, r2
 8005314:	4619      	mov	r1, r3
 8005316:	4603      	mov	r3, r0
 8005318:	4642      	mov	r2, r8
 800531a:	189b      	adds	r3, r3, r2
 800531c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800531e:	464b      	mov	r3, r9
 8005320:	460a      	mov	r2, r1
 8005322:	eb42 0303 	adc.w	r3, r2, r3
 8005326:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	663b      	str	r3, [r7, #96]	@ 0x60
 8005332:	667a      	str	r2, [r7, #100]	@ 0x64
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005340:	4649      	mov	r1, r9
 8005342:	008b      	lsls	r3, r1, #2
 8005344:	4641      	mov	r1, r8
 8005346:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800534a:	4641      	mov	r1, r8
 800534c:	008a      	lsls	r2, r1, #2
 800534e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005352:	f7fb fb41 	bl	80009d8 <__aeabi_uldivmod>
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	4b0d      	ldr	r3, [pc, #52]	@ (8005390 <UART_SetConfig+0x4e4>)
 800535c:	fba3 1302 	umull	r1, r3, r3, r2
 8005360:	095b      	lsrs	r3, r3, #5
 8005362:	2164      	movs	r1, #100	@ 0x64
 8005364:	fb01 f303 	mul.w	r3, r1, r3
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	3332      	adds	r3, #50	@ 0x32
 800536e:	4a08      	ldr	r2, [pc, #32]	@ (8005390 <UART_SetConfig+0x4e4>)
 8005370:	fba2 2303 	umull	r2, r3, r2, r3
 8005374:	095b      	lsrs	r3, r3, #5
 8005376:	f003 020f 	and.w	r2, r3, #15
 800537a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4422      	add	r2, r4
 8005382:	609a      	str	r2, [r3, #8]
}
 8005384:	bf00      	nop
 8005386:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800538a:	46bd      	mov	sp, r7
 800538c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005390:	51eb851f 	.word	0x51eb851f

08005394 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005394:	b084      	sub	sp, #16
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	f107 001c 	add.w	r0, r7, #28
 80053a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d123      	bne.n	80053f6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80053c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d105      	bne.n	80053ea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f001 fae8 	bl	80069c0 <USB_CoreReset>
 80053f0:	4603      	mov	r3, r0
 80053f2:	73fb      	strb	r3, [r7, #15]
 80053f4:	e01b      	b.n	800542e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f001 fadc 	bl	80069c0 <USB_CoreReset>
 8005408:	4603      	mov	r3, r0
 800540a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800540c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005410:	2b00      	cmp	r3, #0
 8005412:	d106      	bne.n	8005422 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005418:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005420:	e005      	b.n	800542e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005426:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800542e:	7fbb      	ldrb	r3, [r7, #30]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d10b      	bne.n	800544c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f043 0206 	orr.w	r2, r3, #6
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f043 0220 	orr.w	r2, r3, #32
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800544c:	7bfb      	ldrb	r3, [r7, #15]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005458:	b004      	add	sp, #16
 800545a:	4770      	bx	lr

0800545c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	4613      	mov	r3, r2
 8005468:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800546a:	79fb      	ldrb	r3, [r7, #7]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d165      	bne.n	800553c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	4a41      	ldr	r2, [pc, #260]	@ (8005578 <USB_SetTurnaroundTime+0x11c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d906      	bls.n	8005486 <USB_SetTurnaroundTime+0x2a>
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	4a40      	ldr	r2, [pc, #256]	@ (800557c <USB_SetTurnaroundTime+0x120>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d202      	bcs.n	8005486 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005480:	230f      	movs	r3, #15
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	e062      	b.n	800554c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	4a3c      	ldr	r2, [pc, #240]	@ (800557c <USB_SetTurnaroundTime+0x120>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d306      	bcc.n	800549c <USB_SetTurnaroundTime+0x40>
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	4a3b      	ldr	r2, [pc, #236]	@ (8005580 <USB_SetTurnaroundTime+0x124>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d202      	bcs.n	800549c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005496:	230e      	movs	r3, #14
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	e057      	b.n	800554c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4a38      	ldr	r2, [pc, #224]	@ (8005580 <USB_SetTurnaroundTime+0x124>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d306      	bcc.n	80054b2 <USB_SetTurnaroundTime+0x56>
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	4a37      	ldr	r2, [pc, #220]	@ (8005584 <USB_SetTurnaroundTime+0x128>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d202      	bcs.n	80054b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80054ac:	230d      	movs	r3, #13
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	e04c      	b.n	800554c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	4a33      	ldr	r2, [pc, #204]	@ (8005584 <USB_SetTurnaroundTime+0x128>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d306      	bcc.n	80054c8 <USB_SetTurnaroundTime+0x6c>
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	4a32      	ldr	r2, [pc, #200]	@ (8005588 <USB_SetTurnaroundTime+0x12c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d802      	bhi.n	80054c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80054c2:	230c      	movs	r3, #12
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	e041      	b.n	800554c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4a2f      	ldr	r2, [pc, #188]	@ (8005588 <USB_SetTurnaroundTime+0x12c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d906      	bls.n	80054de <USB_SetTurnaroundTime+0x82>
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4a2e      	ldr	r2, [pc, #184]	@ (800558c <USB_SetTurnaroundTime+0x130>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d802      	bhi.n	80054de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80054d8:	230b      	movs	r3, #11
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	e036      	b.n	800554c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4a2a      	ldr	r2, [pc, #168]	@ (800558c <USB_SetTurnaroundTime+0x130>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d906      	bls.n	80054f4 <USB_SetTurnaroundTime+0x98>
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	4a29      	ldr	r2, [pc, #164]	@ (8005590 <USB_SetTurnaroundTime+0x134>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d802      	bhi.n	80054f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80054ee:	230a      	movs	r3, #10
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	e02b      	b.n	800554c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4a26      	ldr	r2, [pc, #152]	@ (8005590 <USB_SetTurnaroundTime+0x134>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d906      	bls.n	800550a <USB_SetTurnaroundTime+0xae>
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4a25      	ldr	r2, [pc, #148]	@ (8005594 <USB_SetTurnaroundTime+0x138>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d202      	bcs.n	800550a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005504:	2309      	movs	r3, #9
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	e020      	b.n	800554c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	4a21      	ldr	r2, [pc, #132]	@ (8005594 <USB_SetTurnaroundTime+0x138>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d306      	bcc.n	8005520 <USB_SetTurnaroundTime+0xc4>
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	4a20      	ldr	r2, [pc, #128]	@ (8005598 <USB_SetTurnaroundTime+0x13c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d802      	bhi.n	8005520 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800551a:	2308      	movs	r3, #8
 800551c:	617b      	str	r3, [r7, #20]
 800551e:	e015      	b.n	800554c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4a1d      	ldr	r2, [pc, #116]	@ (8005598 <USB_SetTurnaroundTime+0x13c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d906      	bls.n	8005536 <USB_SetTurnaroundTime+0xda>
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	4a1c      	ldr	r2, [pc, #112]	@ (800559c <USB_SetTurnaroundTime+0x140>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d202      	bcs.n	8005536 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005530:	2307      	movs	r3, #7
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	e00a      	b.n	800554c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005536:	2306      	movs	r3, #6
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	e007      	b.n	800554c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800553c:	79fb      	ldrb	r3, [r7, #7]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d102      	bne.n	8005548 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005542:	2309      	movs	r3, #9
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	e001      	b.n	800554c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005548:	2309      	movs	r3, #9
 800554a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	029b      	lsls	r3, r3, #10
 8005560:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005564:	431a      	orrs	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	371c      	adds	r7, #28
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	00d8acbf 	.word	0x00d8acbf
 800557c:	00e4e1c0 	.word	0x00e4e1c0
 8005580:	00f42400 	.word	0x00f42400
 8005584:	01067380 	.word	0x01067380
 8005588:	011a499f 	.word	0x011a499f
 800558c:	01312cff 	.word	0x01312cff
 8005590:	014ca43f 	.word	0x014ca43f
 8005594:	016e3600 	.word	0x016e3600
 8005598:	01a6ab1f 	.word	0x01a6ab1f
 800559c:	01e84800 	.word	0x01e84800

080055a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f043 0201 	orr.w	r2, r3, #1
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f023 0201 	bic.w	r2, r3, #1
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005600:	78fb      	ldrb	r3, [r7, #3]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d115      	bne.n	8005632 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005612:	200a      	movs	r0, #10
 8005614:	f7fc f964 	bl	80018e0 <HAL_Delay>
      ms += 10U;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	330a      	adds	r3, #10
 800561c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f001 f93f 	bl	80068a2 <USB_GetMode>
 8005624:	4603      	mov	r3, r0
 8005626:	2b01      	cmp	r3, #1
 8005628:	d01e      	beq.n	8005668 <USB_SetCurrentMode+0x84>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2bc7      	cmp	r3, #199	@ 0xc7
 800562e:	d9f0      	bls.n	8005612 <USB_SetCurrentMode+0x2e>
 8005630:	e01a      	b.n	8005668 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005632:	78fb      	ldrb	r3, [r7, #3]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d115      	bne.n	8005664 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005644:	200a      	movs	r0, #10
 8005646:	f7fc f94b 	bl	80018e0 <HAL_Delay>
      ms += 10U;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	330a      	adds	r3, #10
 800564e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f001 f926 	bl	80068a2 <USB_GetMode>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d005      	beq.n	8005668 <USB_SetCurrentMode+0x84>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005660:	d9f0      	bls.n	8005644 <USB_SetCurrentMode+0x60>
 8005662:	e001      	b.n	8005668 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e005      	b.n	8005674 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2bc8      	cmp	r3, #200	@ 0xc8
 800566c:	d101      	bne.n	8005672 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800567c:	b084      	sub	sp, #16
 800567e:	b580      	push	{r7, lr}
 8005680:	b086      	sub	sp, #24
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800568a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005696:	2300      	movs	r3, #0
 8005698:	613b      	str	r3, [r7, #16]
 800569a:	e009      	b.n	80056b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	3340      	adds	r3, #64	@ 0x40
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	2200      	movs	r2, #0
 80056a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	3301      	adds	r3, #1
 80056ae:	613b      	str	r3, [r7, #16]
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	2b0e      	cmp	r3, #14
 80056b4:	d9f2      	bls.n	800569c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d11c      	bne.n	80056f8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056cc:	f043 0302 	orr.w	r3, r3, #2
 80056d0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80056f6:	e00b      	b.n	8005710 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005708:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005716:	461a      	mov	r2, r3
 8005718:	2300      	movs	r3, #0
 800571a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800571c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005720:	2b01      	cmp	r3, #1
 8005722:	d10d      	bne.n	8005740 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005724:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005728:	2b00      	cmp	r3, #0
 800572a:	d104      	bne.n	8005736 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800572c:	2100      	movs	r1, #0
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f968 	bl	8005a04 <USB_SetDevSpeed>
 8005734:	e008      	b.n	8005748 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005736:	2101      	movs	r1, #1
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f963 	bl	8005a04 <USB_SetDevSpeed>
 800573e:	e003      	b.n	8005748 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005740:	2103      	movs	r1, #3
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f95e 	bl	8005a04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005748:	2110      	movs	r1, #16
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f8fa 	bl	8005944 <USB_FlushTxFifo>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f924 	bl	80059a8 <USB_FlushRxFifo>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005770:	461a      	mov	r2, r3
 8005772:	2300      	movs	r3, #0
 8005774:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800577c:	461a      	mov	r2, r3
 800577e:	2300      	movs	r3, #0
 8005780:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005788:	461a      	mov	r2, r3
 800578a:	2300      	movs	r3, #0
 800578c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800578e:	2300      	movs	r3, #0
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	e043      	b.n	800581c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057aa:	d118      	bne.n	80057de <USB_DevInit+0x162>
    {
      if (i == 0U)
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10a      	bne.n	80057c8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057be:	461a      	mov	r2, r3
 80057c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	e013      	b.n	80057f0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057d4:	461a      	mov	r2, r3
 80057d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	e008      	b.n	80057f0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ea:	461a      	mov	r2, r3
 80057ec:	2300      	movs	r3, #0
 80057ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057fc:	461a      	mov	r2, r3
 80057fe:	2300      	movs	r3, #0
 8005800:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4413      	add	r3, r2
 800580a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800580e:	461a      	mov	r2, r3
 8005810:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005814:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	3301      	adds	r3, #1
 800581a:	613b      	str	r3, [r7, #16]
 800581c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005820:	461a      	mov	r2, r3
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	4293      	cmp	r3, r2
 8005826:	d3b5      	bcc.n	8005794 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005828:	2300      	movs	r3, #0
 800582a:	613b      	str	r3, [r7, #16]
 800582c:	e043      	b.n	80058b6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005840:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005844:	d118      	bne.n	8005878 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10a      	bne.n	8005862 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005858:	461a      	mov	r2, r3
 800585a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800585e:	6013      	str	r3, [r2, #0]
 8005860:	e013      	b.n	800588a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800586e:	461a      	mov	r2, r3
 8005870:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	e008      	b.n	800588a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005884:	461a      	mov	r2, r3
 8005886:	2300      	movs	r3, #0
 8005888:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4413      	add	r3, r2
 8005892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005896:	461a      	mov	r2, r3
 8005898:	2300      	movs	r3, #0
 800589a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058a8:	461a      	mov	r2, r3
 80058aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	3301      	adds	r3, #1
 80058b4:	613b      	str	r3, [r7, #16]
 80058b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80058ba:	461a      	mov	r2, r3
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	4293      	cmp	r3, r2
 80058c0:	d3b5      	bcc.n	800582e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80058e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d105      	bne.n	80058f8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	f043 0210 	orr.w	r2, r3, #16
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	699a      	ldr	r2, [r3, #24]
 80058fc:	4b10      	ldr	r3, [pc, #64]	@ (8005940 <USB_DevInit+0x2c4>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005904:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005908:	2b00      	cmp	r3, #0
 800590a:	d005      	beq.n	8005918 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	f043 0208 	orr.w	r2, r3, #8
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005918:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800591c:	2b01      	cmp	r3, #1
 800591e:	d107      	bne.n	8005930 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005928:	f043 0304 	orr.w	r3, r3, #4
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005930:	7dfb      	ldrb	r3, [r7, #23]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800593c:	b004      	add	sp, #16
 800593e:	4770      	bx	lr
 8005940:	803c3800 	.word	0x803c3800

08005944 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3301      	adds	r3, #1
 8005956:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800595e:	d901      	bls.n	8005964 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e01b      	b.n	800599c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	daf2      	bge.n	8005952 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	019b      	lsls	r3, r3, #6
 8005974:	f043 0220 	orr.w	r2, r3, #32
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	3301      	adds	r3, #1
 8005980:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005988:	d901      	bls.n	800598e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e006      	b.n	800599c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	f003 0320 	and.w	r3, r3, #32
 8005996:	2b20      	cmp	r3, #32
 8005998:	d0f0      	beq.n	800597c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3301      	adds	r3, #1
 80059b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059c0:	d901      	bls.n	80059c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e018      	b.n	80059f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	daf2      	bge.n	80059b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2210      	movs	r2, #16
 80059d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	3301      	adds	r3, #1
 80059dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059e4:	d901      	bls.n	80059ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e006      	b.n	80059f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f003 0310 	and.w	r3, r3, #16
 80059f2:	2b10      	cmp	r3, #16
 80059f4:	d0f0      	beq.n	80059d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	78fb      	ldrb	r3, [r7, #3]
 8005a1e:	68f9      	ldr	r1, [r7, #12]
 8005a20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a24:	4313      	orrs	r3, r2
 8005a26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b087      	sub	sp, #28
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 0306 	and.w	r3, r3, #6
 8005a4e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d102      	bne.n	8005a5c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005a56:	2300      	movs	r3, #0
 8005a58:	75fb      	strb	r3, [r7, #23]
 8005a5a:	e00a      	b.n	8005a72 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d002      	beq.n	8005a68 <USB_GetDevSpeed+0x32>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2b06      	cmp	r3, #6
 8005a66:	d102      	bne.n	8005a6e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005a68:	2302      	movs	r3, #2
 8005a6a:	75fb      	strb	r3, [r7, #23]
 8005a6c:	e001      	b.n	8005a72 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005a6e:	230f      	movs	r3, #15
 8005a70:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	371c      	adds	r7, #28
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	785b      	ldrb	r3, [r3, #1]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d13a      	bne.n	8005b12 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aa2:	69da      	ldr	r2, [r3, #28]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	f003 030f 	and.w	r3, r3, #15
 8005aac:	2101      	movs	r1, #1
 8005aae:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	68f9      	ldr	r1, [r7, #12]
 8005ab6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005aba:	4313      	orrs	r3, r2
 8005abc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d155      	bne.n	8005b80 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	791b      	ldrb	r3, [r3, #4]
 8005aee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005af0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	059b      	lsls	r3, r3, #22
 8005af6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005af8:	4313      	orrs	r3, r2
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	0151      	lsls	r1, r2, #5
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	440a      	add	r2, r1
 8005b02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b0e:	6013      	str	r3, [r2, #0]
 8005b10:	e036      	b.n	8005b80 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b18:	69da      	ldr	r2, [r3, #28]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	2101      	movs	r1, #1
 8005b24:	fa01 f303 	lsl.w	r3, r1, r3
 8005b28:	041b      	lsls	r3, r3, #16
 8005b2a:	68f9      	ldr	r1, [r7, #12]
 8005b2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b30:	4313      	orrs	r3, r2
 8005b32:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d11a      	bne.n	8005b80 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	791b      	ldrb	r3, [r3, #4]
 8005b64:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b66:	430b      	orrs	r3, r1
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	0151      	lsls	r1, r2, #5
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	440a      	add	r2, r1
 8005b72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b7e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
	...

08005b90 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	785b      	ldrb	r3, [r3, #1]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d161      	bne.n	8005c70 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bc2:	d11f      	bne.n	8005c04 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	0151      	lsls	r1, r2, #5
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	440a      	add	r2, r1
 8005bda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bde:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005be2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	0151      	lsls	r1, r2, #5
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	440a      	add	r2, r1
 8005bfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bfe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	f003 030f 	and.w	r3, r3, #15
 8005c14:	2101      	movs	r1, #1
 8005c16:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	43db      	mvns	r3, r3
 8005c1e:	68f9      	ldr	r1, [r7, #12]
 8005c20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c24:	4013      	ands	r3, r2
 8005c26:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c2e:	69da      	ldr	r2, [r3, #28]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	f003 030f 	and.w	r3, r3, #15
 8005c38:	2101      	movs	r1, #1
 8005c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	43db      	mvns	r3, r3
 8005c42:	68f9      	ldr	r1, [r7, #12]
 8005c44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c48:	4013      	ands	r3, r2
 8005c4a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	0159      	lsls	r1, r3, #5
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	440b      	add	r3, r1
 8005c62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c66:	4619      	mov	r1, r3
 8005c68:	4b35      	ldr	r3, [pc, #212]	@ (8005d40 <USB_DeactivateEndpoint+0x1b0>)
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	600b      	str	r3, [r1, #0]
 8005c6e:	e060      	b.n	8005d32 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c86:	d11f      	bne.n	8005cc8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	0151      	lsls	r1, r2, #5
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	440a      	add	r2, r1
 8005c9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ca2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ca6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	0151      	lsls	r1, r2, #5
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	440a      	add	r2, r1
 8005cbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cc2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005cc6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	f003 030f 	and.w	r3, r3, #15
 8005cd8:	2101      	movs	r1, #1
 8005cda:	fa01 f303 	lsl.w	r3, r1, r3
 8005cde:	041b      	lsls	r3, r3, #16
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	68f9      	ldr	r1, [r7, #12]
 8005ce4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ce8:	4013      	ands	r3, r2
 8005cea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cf2:	69da      	ldr	r2, [r3, #28]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	f003 030f 	and.w	r3, r3, #15
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005d02:	041b      	lsls	r3, r3, #16
 8005d04:	43db      	mvns	r3, r3
 8005d06:	68f9      	ldr	r1, [r7, #12]
 8005d08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	0159      	lsls	r1, r3, #5
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	440b      	add	r3, r1
 8005d26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	4b05      	ldr	r3, [pc, #20]	@ (8005d44 <USB_DeactivateEndpoint+0x1b4>)
 8005d2e:	4013      	ands	r3, r2
 8005d30:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	ec337800 	.word	0xec337800
 8005d44:	eff37800 	.word	0xeff37800

08005d48 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08a      	sub	sp, #40	@ 0x28
 8005d4c:	af02      	add	r7, sp, #8
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	4613      	mov	r3, r2
 8005d54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	785b      	ldrb	r3, [r3, #1]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	f040 817f 	bne.w	8006068 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d132      	bne.n	8005dd8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	0151      	lsls	r1, r2, #5
 8005d84:	69fa      	ldr	r2, [r7, #28]
 8005d86:	440a      	add	r2, r1
 8005d88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d8c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005d90:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005d94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	0151      	lsls	r1, r2, #5
 8005da8:	69fa      	ldr	r2, [r7, #28]
 8005daa:	440a      	add	r2, r1
 8005dac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005db0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005db4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	0151      	lsls	r1, r2, #5
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	440a      	add	r2, r1
 8005dcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dd0:	0cdb      	lsrs	r3, r3, #19
 8005dd2:	04db      	lsls	r3, r3, #19
 8005dd4:	6113      	str	r3, [r2, #16]
 8005dd6:	e097      	b.n	8005f08 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	0151      	lsls	r1, r2, #5
 8005dea:	69fa      	ldr	r2, [r7, #28]
 8005dec:	440a      	add	r2, r1
 8005dee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005df2:	0cdb      	lsrs	r3, r3, #19
 8005df4:	04db      	lsls	r3, r3, #19
 8005df6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	0151      	lsls	r1, r2, #5
 8005e0a:	69fa      	ldr	r2, [r7, #28]
 8005e0c:	440a      	add	r2, r1
 8005e0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e12:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005e16:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005e1a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d11a      	bne.n	8005e58 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	691a      	ldr	r2, [r3, #16]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d903      	bls.n	8005e36 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e54:	6113      	str	r3, [r2, #16]
 8005e56:	e044      	b.n	8005ee2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	691a      	ldr	r2, [r3, #16]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	4413      	add	r3, r2
 8005e62:	1e5a      	subs	r2, r3, #1
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e7a:	691a      	ldr	r2, [r3, #16]
 8005e7c:	8afb      	ldrh	r3, [r7, #22]
 8005e7e:	04d9      	lsls	r1, r3, #19
 8005e80:	4ba4      	ldr	r3, [pc, #656]	@ (8006114 <USB_EPStartXfer+0x3cc>)
 8005e82:	400b      	ands	r3, r1
 8005e84:	69b9      	ldr	r1, [r7, #24]
 8005e86:	0148      	lsls	r0, r1, #5
 8005e88:	69f9      	ldr	r1, [r7, #28]
 8005e8a:	4401      	add	r1, r0
 8005e8c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005e90:	4313      	orrs	r3, r2
 8005e92:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	791b      	ldrb	r3, [r3, #4]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d122      	bne.n	8005ee2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	0151      	lsls	r1, r2, #5
 8005eae:	69fa      	ldr	r2, [r7, #28]
 8005eb0:	440a      	add	r2, r1
 8005eb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eb6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005eba:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ec8:	691a      	ldr	r2, [r3, #16]
 8005eca:	8afb      	ldrh	r3, [r7, #22]
 8005ecc:	075b      	lsls	r3, r3, #29
 8005ece:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005ed2:	69b9      	ldr	r1, [r7, #24]
 8005ed4:	0148      	lsls	r0, r1, #5
 8005ed6:	69f9      	ldr	r1, [r7, #28]
 8005ed8:	4401      	add	r1, r0
 8005eda:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eee:	691a      	ldr	r2, [r3, #16]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ef8:	69b9      	ldr	r1, [r7, #24]
 8005efa:	0148      	lsls	r0, r1, #5
 8005efc:	69f9      	ldr	r1, [r7, #28]
 8005efe:	4401      	add	r1, r0
 8005f00:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005f04:	4313      	orrs	r3, r2
 8005f06:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f08:	79fb      	ldrb	r3, [r7, #7]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d14b      	bne.n	8005fa6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d009      	beq.n	8005f2a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f22:	461a      	mov	r2, r3
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	791b      	ldrb	r3, [r3, #4]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d128      	bne.n	8005f84 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d110      	bne.n	8005f64 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	0151      	lsls	r1, r2, #5
 8005f54:	69fa      	ldr	r2, [r7, #28]
 8005f56:	440a      	add	r2, r1
 8005f58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f60:	6013      	str	r3, [r2, #0]
 8005f62:	e00f      	b.n	8005f84 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	0151      	lsls	r1, r2, #5
 8005f76:	69fa      	ldr	r2, [r7, #28]
 8005f78:	440a      	add	r2, r1
 8005f7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f82:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	0151      	lsls	r1, r2, #5
 8005f96:	69fa      	ldr	r2, [r7, #28]
 8005f98:	440a      	add	r2, r1
 8005f9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f9e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005fa2:	6013      	str	r3, [r2, #0]
 8005fa4:	e166      	b.n	8006274 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	0151      	lsls	r1, r2, #5
 8005fb8:	69fa      	ldr	r2, [r7, #28]
 8005fba:	440a      	add	r2, r1
 8005fbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fc0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005fc4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	791b      	ldrb	r3, [r3, #4]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d015      	beq.n	8005ffa <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 814e 	beq.w	8006274 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	f003 030f 	and.w	r3, r3, #15
 8005fe8:	2101      	movs	r1, #1
 8005fea:	fa01 f303 	lsl.w	r3, r1, r3
 8005fee:	69f9      	ldr	r1, [r7, #28]
 8005ff0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	634b      	str	r3, [r1, #52]	@ 0x34
 8005ff8:	e13c      	b.n	8006274 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006006:	2b00      	cmp	r3, #0
 8006008:	d110      	bne.n	800602c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	4413      	add	r3, r2
 8006012:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	69ba      	ldr	r2, [r7, #24]
 800601a:	0151      	lsls	r1, r2, #5
 800601c:	69fa      	ldr	r2, [r7, #28]
 800601e:	440a      	add	r2, r1
 8006020:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006024:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006028:	6013      	str	r3, [r2, #0]
 800602a:	e00f      	b.n	800604c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	0151      	lsls	r1, r2, #5
 800603e:	69fa      	ldr	r2, [r7, #28]
 8006040:	440a      	add	r2, r1
 8006042:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006046:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800604a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	68d9      	ldr	r1, [r3, #12]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	781a      	ldrb	r2, [r3, #0]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	b298      	uxth	r0, r3
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	4603      	mov	r3, r0
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 f9b9 	bl	80063d8 <USB_WritePacket>
 8006066:	e105      	b.n	8006274 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	0151      	lsls	r1, r2, #5
 800607a:	69fa      	ldr	r2, [r7, #28]
 800607c:	440a      	add	r2, r1
 800607e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006082:	0cdb      	lsrs	r3, r3, #19
 8006084:	04db      	lsls	r3, r3, #19
 8006086:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	0151      	lsls	r1, r2, #5
 800609a:	69fa      	ldr	r2, [r7, #28]
 800609c:	440a      	add	r2, r1
 800609e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060a2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80060a6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80060aa:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d132      	bne.n	8006118 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	689a      	ldr	r2, [r3, #8]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	689a      	ldr	r2, [r3, #8]
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d6:	691a      	ldr	r2, [r3, #16]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060e0:	69b9      	ldr	r1, [r7, #24]
 80060e2:	0148      	lsls	r0, r1, #5
 80060e4:	69f9      	ldr	r1, [r7, #28]
 80060e6:	4401      	add	r1, r0
 80060e8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80060ec:	4313      	orrs	r3, r2
 80060ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	0151      	lsls	r1, r2, #5
 8006102:	69fa      	ldr	r2, [r7, #28]
 8006104:	440a      	add	r2, r1
 8006106:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800610a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800610e:	6113      	str	r3, [r2, #16]
 8006110:	e062      	b.n	80061d8 <USB_EPStartXfer+0x490>
 8006112:	bf00      	nop
 8006114:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d123      	bne.n	8006168 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800612c:	691a      	ldr	r2, [r3, #16]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006136:	69b9      	ldr	r1, [r7, #24]
 8006138:	0148      	lsls	r0, r1, #5
 800613a:	69f9      	ldr	r1, [r7, #28]
 800613c:	4401      	add	r1, r0
 800613e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006142:	4313      	orrs	r3, r2
 8006144:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	0151      	lsls	r1, r2, #5
 8006158:	69fa      	ldr	r2, [r7, #28]
 800615a:	440a      	add	r2, r1
 800615c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006160:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006164:	6113      	str	r3, [r2, #16]
 8006166:	e037      	b.n	80061d8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	691a      	ldr	r2, [r3, #16]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	4413      	add	r3, r2
 8006172:	1e5a      	subs	r2, r3, #1
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	fbb2 f3f3 	udiv	r3, r2, r3
 800617c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	8afa      	ldrh	r2, [r7, #22]
 8006184:	fb03 f202 	mul.w	r2, r3, r2
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006198:	691a      	ldr	r2, [r3, #16]
 800619a:	8afb      	ldrh	r3, [r7, #22]
 800619c:	04d9      	lsls	r1, r3, #19
 800619e:	4b38      	ldr	r3, [pc, #224]	@ (8006280 <USB_EPStartXfer+0x538>)
 80061a0:	400b      	ands	r3, r1
 80061a2:	69b9      	ldr	r1, [r7, #24]
 80061a4:	0148      	lsls	r0, r1, #5
 80061a6:	69f9      	ldr	r1, [r7, #28]
 80061a8:	4401      	add	r1, r0
 80061aa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80061ae:	4313      	orrs	r3, r2
 80061b0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061be:	691a      	ldr	r2, [r3, #16]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061c8:	69b9      	ldr	r1, [r7, #24]
 80061ca:	0148      	lsls	r0, r1, #5
 80061cc:	69f9      	ldr	r1, [r7, #28]
 80061ce:	4401      	add	r1, r0
 80061d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80061d4:	4313      	orrs	r3, r2
 80061d6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80061d8:	79fb      	ldrb	r3, [r7, #7]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d10d      	bne.n	80061fa <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d009      	beq.n	80061fa <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	68d9      	ldr	r1, [r3, #12]
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061f6:	460a      	mov	r2, r1
 80061f8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	791b      	ldrb	r3, [r3, #4]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d128      	bne.n	8006254 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800620e:	2b00      	cmp	r3, #0
 8006210:	d110      	bne.n	8006234 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	4413      	add	r3, r2
 800621a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	0151      	lsls	r1, r2, #5
 8006224:	69fa      	ldr	r2, [r7, #28]
 8006226:	440a      	add	r2, r1
 8006228:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800622c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	e00f      	b.n	8006254 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	0151      	lsls	r1, r2, #5
 8006246:	69fa      	ldr	r2, [r7, #28]
 8006248:	440a      	add	r2, r1
 800624a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800624e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006252:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	4413      	add	r3, r2
 800625c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	0151      	lsls	r1, r2, #5
 8006266:	69fa      	ldr	r2, [r7, #28]
 8006268:	440a      	add	r2, r1
 800626a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800626e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006272:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3720      	adds	r7, #32
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	1ff80000 	.word	0x1ff80000

08006284 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	785b      	ldrb	r3, [r3, #1]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d14a      	bne.n	8006338 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062ba:	f040 8086 	bne.w	80063ca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	7812      	ldrb	r2, [r2, #0]
 80062d2:	0151      	lsls	r1, r2, #5
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	440a      	add	r2, r1
 80062d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80062e0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	7812      	ldrb	r2, [r2, #0]
 80062f6:	0151      	lsls	r1, r2, #5
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	440a      	add	r2, r1
 80062fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006300:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006304:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	3301      	adds	r3, #1
 800630a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006312:	4293      	cmp	r3, r2
 8006314:	d902      	bls.n	800631c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	75fb      	strb	r3, [r7, #23]
          break;
 800631a:	e056      	b.n	80063ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006330:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006334:	d0e7      	beq.n	8006306 <USB_EPStopXfer+0x82>
 8006336:	e048      	b.n	80063ca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800634c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006350:	d13b      	bne.n	80063ca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	7812      	ldrb	r2, [r2, #0]
 8006366:	0151      	lsls	r1, r2, #5
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	440a      	add	r2, r1
 800636c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006370:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006374:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	7812      	ldrb	r2, [r2, #0]
 800638a:	0151      	lsls	r1, r2, #5
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	440a      	add	r2, r1
 8006390:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006394:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006398:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3301      	adds	r3, #1
 800639e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d902      	bls.n	80063b0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	75fb      	strb	r3, [r7, #23]
          break;
 80063ae:	e00c      	b.n	80063ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063c8:	d0e7      	beq.n	800639a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80063ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	371c      	adds	r7, #28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063d8:	b480      	push	{r7}
 80063da:	b089      	sub	sp, #36	@ 0x24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	4611      	mov	r1, r2
 80063e4:	461a      	mov	r2, r3
 80063e6:	460b      	mov	r3, r1
 80063e8:	71fb      	strb	r3, [r7, #7]
 80063ea:	4613      	mov	r3, r2
 80063ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80063f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d123      	bne.n	8006446 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80063fe:	88bb      	ldrh	r3, [r7, #4]
 8006400:	3303      	adds	r3, #3
 8006402:	089b      	lsrs	r3, r3, #2
 8006404:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006406:	2300      	movs	r3, #0
 8006408:	61bb      	str	r3, [r7, #24]
 800640a:	e018      	b.n	800643e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800640c:	79fb      	ldrb	r3, [r7, #7]
 800640e:	031a      	lsls	r2, r3, #12
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	4413      	add	r3, r2
 8006414:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006418:	461a      	mov	r2, r3
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	3301      	adds	r3, #1
 8006424:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	3301      	adds	r3, #1
 800642a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	3301      	adds	r3, #1
 8006430:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	3301      	adds	r3, #1
 8006436:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	3301      	adds	r3, #1
 800643c:	61bb      	str	r3, [r7, #24]
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	429a      	cmp	r2, r3
 8006444:	d3e2      	bcc.n	800640c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3724      	adds	r7, #36	@ 0x24
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006454:	b480      	push	{r7}
 8006456:	b08b      	sub	sp, #44	@ 0x2c
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	4613      	mov	r3, r2
 8006460:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800646a:	88fb      	ldrh	r3, [r7, #6]
 800646c:	089b      	lsrs	r3, r3, #2
 800646e:	b29b      	uxth	r3, r3
 8006470:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006472:	88fb      	ldrh	r3, [r7, #6]
 8006474:	f003 0303 	and.w	r3, r3, #3
 8006478:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800647a:	2300      	movs	r3, #0
 800647c:	623b      	str	r3, [r7, #32]
 800647e:	e014      	b.n	80064aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648a:	601a      	str	r2, [r3, #0]
    pDest++;
 800648c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648e:	3301      	adds	r3, #1
 8006490:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006494:	3301      	adds	r3, #1
 8006496:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649a:	3301      	adds	r3, #1
 800649c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800649e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a0:	3301      	adds	r3, #1
 80064a2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	3301      	adds	r3, #1
 80064a8:	623b      	str	r3, [r7, #32]
 80064aa:	6a3a      	ldr	r2, [r7, #32]
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d3e6      	bcc.n	8006480 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80064b2:	8bfb      	ldrh	r3, [r7, #30]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d01e      	beq.n	80064f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064c2:	461a      	mov	r2, r3
 80064c4:	f107 0310 	add.w	r3, r7, #16
 80064c8:	6812      	ldr	r2, [r2, #0]
 80064ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	fa22 f303 	lsr.w	r3, r2, r3
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	701a      	strb	r2, [r3, #0]
      i++;
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	3301      	adds	r3, #1
 80064e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80064e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e6:	3301      	adds	r3, #1
 80064e8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80064ea:	8bfb      	ldrh	r3, [r7, #30]
 80064ec:	3b01      	subs	r3, #1
 80064ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80064f0:	8bfb      	ldrh	r3, [r7, #30]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1ea      	bne.n	80064cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80064f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	372c      	adds	r7, #44	@ 0x2c
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	785b      	ldrb	r3, [r3, #1]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d12c      	bne.n	800657a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	db12      	blt.n	8006558 <USB_EPSetStall+0x54>
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00f      	beq.n	8006558 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	0151      	lsls	r1, r2, #5
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	440a      	add	r2, r1
 800654e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006552:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006556:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	0151      	lsls	r1, r2, #5
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	440a      	add	r2, r1
 800656e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006572:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	e02b      	b.n	80065d2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	db12      	blt.n	80065b2 <USB_EPSetStall+0xae>
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00f      	beq.n	80065b2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	0151      	lsls	r1, r2, #5
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	440a      	add	r2, r1
 80065a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80065b0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	0151      	lsls	r1, r2, #5
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	440a      	add	r2, r1
 80065c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80065d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	785b      	ldrb	r3, [r3, #1]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d128      	bne.n	800664e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	0151      	lsls	r1, r2, #5
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	440a      	add	r2, r1
 8006612:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006616:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800661a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	791b      	ldrb	r3, [r3, #4]
 8006620:	2b03      	cmp	r3, #3
 8006622:	d003      	beq.n	800662c <USB_EPClearStall+0x4c>
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	791b      	ldrb	r3, [r3, #4]
 8006628:	2b02      	cmp	r3, #2
 800662a:	d138      	bne.n	800669e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	0151      	lsls	r1, r2, #5
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	440a      	add	r2, r1
 8006642:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	e027      	b.n	800669e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	0151      	lsls	r1, r2, #5
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	440a      	add	r2, r1
 8006664:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006668:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800666c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	791b      	ldrb	r3, [r3, #4]
 8006672:	2b03      	cmp	r3, #3
 8006674:	d003      	beq.n	800667e <USB_EPClearStall+0x9e>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	791b      	ldrb	r3, [r3, #4]
 800667a:	2b02      	cmp	r3, #2
 800667c:	d10f      	bne.n	800669e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	0151      	lsls	r1, r2, #5
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	440a      	add	r2, r1
 8006694:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800669c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066ca:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80066ce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	78fb      	ldrb	r3, [r7, #3]
 80066da:	011b      	lsls	r3, r3, #4
 80066dc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80066e0:	68f9      	ldr	r1, [r7, #12]
 80066e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066e6:	4313      	orrs	r3, r2
 80066e8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006712:	f023 0303 	bic.w	r3, r3, #3
 8006716:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006726:	f023 0302 	bic.w	r3, r3, #2
 800672a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3714      	adds	r7, #20
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800673a:	b480      	push	{r7}
 800673c:	b085      	sub	sp, #20
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006754:	f023 0303 	bic.w	r3, r3, #3
 8006758:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006768:	f043 0302 	orr.w	r3, r3, #2
 800676c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	4013      	ands	r3, r2
 8006792:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006794:	68fb      	ldr	r3, [r7, #12]
}
 8006796:	4618      	mov	r0, r3
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b085      	sub	sp, #20
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	4013      	ands	r3, r2
 80067c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	0c1b      	lsrs	r3, r3, #16
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b085      	sub	sp, #20
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	4013      	ands	r3, r2
 80067f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	b29b      	uxth	r3, r3
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800680a:	b480      	push	{r7}
 800680c:	b085      	sub	sp, #20
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	460b      	mov	r3, r1
 8006814:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800681a:	78fb      	ldrb	r3, [r7, #3]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4413      	add	r3, r2
 8006822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	4013      	ands	r3, r2
 8006836:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006838:	68bb      	ldr	r3, [r7, #8]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006846:	b480      	push	{r7}
 8006848:	b087      	sub	sp, #28
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	460b      	mov	r3, r1
 8006850:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006868:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800686a:	78fb      	ldrb	r3, [r7, #3]
 800686c:	f003 030f 	and.w	r3, r3, #15
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	fa22 f303 	lsr.w	r3, r2, r3
 8006876:	01db      	lsls	r3, r3, #7
 8006878:	b2db      	uxtb	r3, r3
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4013      	ands	r3, r2
 8006892:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006894:	68bb      	ldr	r3, [r7, #8]
}
 8006896:	4618      	mov	r0, r3
 8006898:	371c      	adds	r7, #28
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b083      	sub	sp, #12
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	f003 0301 	and.w	r3, r3, #1
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80068be:	b480      	push	{r7}
 80068c0:	b085      	sub	sp, #20
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068d8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80068dc:	f023 0307 	bic.w	r3, r3, #7
 80068e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	460b      	mov	r3, r1
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	333c      	adds	r3, #60	@ 0x3c
 800691a:	3304      	adds	r3, #4
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	4a26      	ldr	r2, [pc, #152]	@ (80069bc <USB_EP0_OutStart+0xb8>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d90a      	bls.n	800693e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006934:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006938:	d101      	bne.n	800693e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	e037      	b.n	80069ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006944:	461a      	mov	r2, r3
 8006946:	2300      	movs	r3, #0
 8006948:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006958:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800695c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800696c:	f043 0318 	orr.w	r3, r3, #24
 8006970:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006980:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006984:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006986:	7afb      	ldrb	r3, [r7, #11]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d10f      	bne.n	80069ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006992:	461a      	mov	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069a6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80069aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	371c      	adds	r7, #28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	4f54300a 	.word	0x4f54300a

080069c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3301      	adds	r3, #1
 80069d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069d8:	d901      	bls.n	80069de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e022      	b.n	8006a24 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	daf2      	bge.n	80069cc <USB_CoreReset+0xc>

  count = 10U;
 80069e6:	230a      	movs	r3, #10
 80069e8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80069ea:	e002      	b.n	80069f2 <USB_CoreReset+0x32>
  {
    count--;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3b01      	subs	r3, #1
 80069f0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1f9      	bne.n	80069ec <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f043 0201 	orr.w	r2, r3, #1
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	3301      	adds	r3, #1
 8006a08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a10:	d901      	bls.n	8006a16 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e006      	b.n	8006a24 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d0f0      	beq.n	8006a04 <USB_CoreReset+0x44>

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006a3c:	2010      	movs	r0, #16
 8006a3e:	f002 f971 	bl	8008d24 <USBD_static_malloc>
 8006a42:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d109      	bne.n	8006a5e <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	32b0      	adds	r2, #176	@ 0xb0
 8006a54:	2100      	movs	r1, #0
 8006a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	e048      	b.n	8006af0 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	32b0      	adds	r2, #176	@ 0xb0
 8006a68:	68f9      	ldr	r1, [r7, #12]
 8006a6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	32b0      	adds	r2, #176	@ 0xb0
 8006a78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	7c1b      	ldrb	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10d      	bne.n	8006aa6 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8006a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8006af8 <USBD_HID_Init+0xc8>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	f003 020f 	and.w	r2, r3, #15
 8006a92:	6879      	ldr	r1, [r7, #4]
 8006a94:	4613      	mov	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	440b      	add	r3, r1
 8006a9e:	331c      	adds	r3, #28
 8006aa0:	2207      	movs	r2, #7
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	e00c      	b.n	8006ac0 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8006aa6:	4b14      	ldr	r3, [pc, #80]	@ (8006af8 <USBD_HID_Init+0xc8>)
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	f003 020f 	and.w	r2, r3, #15
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	440b      	add	r3, r1
 8006aba:	331c      	adds	r3, #28
 8006abc:	220a      	movs	r2, #10
 8006abe:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8006af8 <USBD_HID_Init+0xc8>)
 8006ac2:	7819      	ldrb	r1, [r3, #0]
 8006ac4:	230c      	movs	r3, #12
 8006ac6:	2203      	movs	r2, #3
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f002 f81a 	bl	8008b02 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8006ace:	4b0a      	ldr	r3, [pc, #40]	@ (8006af8 <USBD_HID_Init+0xc8>)
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	f003 020f 	and.w	r2, r3, #15
 8006ad6:	6879      	ldr	r1, [r7, #4]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	440b      	add	r3, r1
 8006ae2:	3323      	adds	r3, #35	@ 0x23
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	701a      	strb	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	2000013d 	.word	0x2000013d

08006afc <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	460b      	mov	r3, r1
 8006b06:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8006b08:	4b1f      	ldr	r3, [pc, #124]	@ (8006b88 <USBD_HID_DeInit+0x8c>)
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f002 f81d 	bl	8008b4e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8006b14:	4b1c      	ldr	r3, [pc, #112]	@ (8006b88 <USBD_HID_DeInit+0x8c>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	f003 020f 	and.w	r2, r3, #15
 8006b1c:	6879      	ldr	r1, [r7, #4]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	440b      	add	r3, r1
 8006b28:	3323      	adds	r3, #35	@ 0x23
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8006b2e:	4b16      	ldr	r3, [pc, #88]	@ (8006b88 <USBD_HID_DeInit+0x8c>)
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	f003 020f 	and.w	r2, r3, #15
 8006b36:	6879      	ldr	r1, [r7, #4]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	440b      	add	r3, r1
 8006b42:	331c      	adds	r3, #28
 8006b44:	2200      	movs	r2, #0
 8006b46:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	32b0      	adds	r2, #176	@ 0xb0
 8006b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d011      	beq.n	8006b7e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	32b0      	adds	r2, #176	@ 0xb0
 8006b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f002 f8e9 	bl	8008d40 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	32b0      	adds	r2, #176	@ 0xb0
 8006b78:	2100      	movs	r1, #0
 8006b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	2000013d 	.word	0x2000013d

08006b8c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	32b0      	adds	r2, #176	@ 0xb0
 8006ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba4:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e0e8      	b.n	8006d8a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d046      	beq.n	8006c52 <USBD_HID_Setup+0xc6>
 8006bc4:	2b20      	cmp	r3, #32
 8006bc6:	f040 80d8 	bne.w	8006d7a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	785b      	ldrb	r3, [r3, #1]
 8006bce:	3b02      	subs	r3, #2
 8006bd0:	2b09      	cmp	r3, #9
 8006bd2:	d836      	bhi.n	8006c42 <USBD_HID_Setup+0xb6>
 8006bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8006bdc <USBD_HID_Setup+0x50>)
 8006bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bda:	bf00      	nop
 8006bdc:	08006c33 	.word	0x08006c33
 8006be0:	08006c13 	.word	0x08006c13
 8006be4:	08006c43 	.word	0x08006c43
 8006be8:	08006c43 	.word	0x08006c43
 8006bec:	08006c43 	.word	0x08006c43
 8006bf0:	08006c43 	.word	0x08006c43
 8006bf4:	08006c43 	.word	0x08006c43
 8006bf8:	08006c43 	.word	0x08006c43
 8006bfc:	08006c21 	.word	0x08006c21
 8006c00:	08006c05 	.word	0x08006c05
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	885b      	ldrh	r3, [r3, #2]
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	601a      	str	r2, [r3, #0]
          break;
 8006c10:	e01e      	b.n	8006c50 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2201      	movs	r2, #1
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f001 fbf9 	bl	8008410 <USBD_CtlSendData>
          break;
 8006c1e:	e017      	b.n	8006c50 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	885b      	ldrh	r3, [r3, #2]
 8006c24:	0a1b      	lsrs	r3, r3, #8
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	605a      	str	r2, [r3, #4]
          break;
 8006c30:	e00e      	b.n	8006c50 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	3304      	adds	r3, #4
 8006c36:	2201      	movs	r2, #1
 8006c38:	4619      	mov	r1, r3
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f001 fbe8 	bl	8008410 <USBD_CtlSendData>
          break;
 8006c40:	e006      	b.n	8006c50 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006c42:	6839      	ldr	r1, [r7, #0]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 fb66 	bl	8008316 <USBD_CtlError>
          ret = USBD_FAIL;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	75fb      	strb	r3, [r7, #23]
          break;
 8006c4e:	bf00      	nop
      }
      break;
 8006c50:	e09a      	b.n	8006d88 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	785b      	ldrb	r3, [r3, #1]
 8006c56:	2b0b      	cmp	r3, #11
 8006c58:	f200 8086 	bhi.w	8006d68 <USBD_HID_Setup+0x1dc>
 8006c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c64 <USBD_HID_Setup+0xd8>)
 8006c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c62:	bf00      	nop
 8006c64:	08006c95 	.word	0x08006c95
 8006c68:	08006d77 	.word	0x08006d77
 8006c6c:	08006d69 	.word	0x08006d69
 8006c70:	08006d69 	.word	0x08006d69
 8006c74:	08006d69 	.word	0x08006d69
 8006c78:	08006d69 	.word	0x08006d69
 8006c7c:	08006cbf 	.word	0x08006cbf
 8006c80:	08006d69 	.word	0x08006d69
 8006c84:	08006d69 	.word	0x08006d69
 8006c88:	08006d69 	.word	0x08006d69
 8006c8c:	08006d17 	.word	0x08006d17
 8006c90:	08006d41 	.word	0x08006d41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b03      	cmp	r3, #3
 8006c9e:	d107      	bne.n	8006cb0 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006ca0:	f107 030a 	add.w	r3, r7, #10
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f001 fbb1 	bl	8008410 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cae:	e063      	b.n	8006d78 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f001 fb2f 	bl	8008316 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	75fb      	strb	r3, [r7, #23]
          break;
 8006cbc:	e05c      	b.n	8006d78 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	885b      	ldrh	r3, [r3, #2]
 8006cc2:	0a1b      	lsrs	r3, r3, #8
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	2b22      	cmp	r3, #34	@ 0x22
 8006cc8:	d108      	bne.n	8006cdc <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	88db      	ldrh	r3, [r3, #6]
 8006cce:	2b65      	cmp	r3, #101	@ 0x65
 8006cd0:	bf28      	it	cs
 8006cd2:	2365      	movcs	r3, #101	@ 0x65
 8006cd4:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8006cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8006d94 <USBD_HID_Setup+0x208>)
 8006cd8:	613b      	str	r3, [r7, #16]
 8006cda:	e015      	b.n	8006d08 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	885b      	ldrh	r3, [r3, #2]
 8006ce0:	0a1b      	lsrs	r3, r3, #8
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	2b21      	cmp	r3, #33	@ 0x21
 8006ce6:	d108      	bne.n	8006cfa <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8006ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8006d98 <USBD_HID_Setup+0x20c>)
 8006cea:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	88db      	ldrh	r3, [r3, #6]
 8006cf0:	2b09      	cmp	r3, #9
 8006cf2:	bf28      	it	cs
 8006cf4:	2309      	movcs	r3, #9
 8006cf6:	82bb      	strh	r3, [r7, #20]
 8006cf8:	e006      	b.n	8006d08 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006cfa:	6839      	ldr	r1, [r7, #0]
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f001 fb0a 	bl	8008316 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d02:	2303      	movs	r3, #3
 8006d04:	75fb      	strb	r3, [r7, #23]
            break;
 8006d06:	e037      	b.n	8006d78 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d08:	8abb      	ldrh	r3, [r7, #20]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	6939      	ldr	r1, [r7, #16]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f001 fb7e 	bl	8008410 <USBD_CtlSendData>
          break;
 8006d14:	e030      	b.n	8006d78 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d107      	bne.n	8006d32 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	3308      	adds	r3, #8
 8006d26:	2201      	movs	r2, #1
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f001 fb70 	bl	8008410 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d30:	e022      	b.n	8006d78 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 faee 	bl	8008316 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d3e:	e01b      	b.n	8006d78 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	2b03      	cmp	r3, #3
 8006d4a:	d106      	bne.n	8006d5a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	885b      	ldrh	r3, [r3, #2]
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	461a      	mov	r2, r3
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d58:	e00e      	b.n	8006d78 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006d5a:	6839      	ldr	r1, [r7, #0]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f001 fada 	bl	8008316 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d62:	2303      	movs	r3, #3
 8006d64:	75fb      	strb	r3, [r7, #23]
          break;
 8006d66:	e007      	b.n	8006d78 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006d68:	6839      	ldr	r1, [r7, #0]
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f001 fad3 	bl	8008316 <USBD_CtlError>
          ret = USBD_FAIL;
 8006d70:	2303      	movs	r3, #3
 8006d72:	75fb      	strb	r3, [r7, #23]
          break;
 8006d74:	e000      	b.n	8006d78 <USBD_HID_Setup+0x1ec>
          break;
 8006d76:	bf00      	nop
      }
      break;
 8006d78:	e006      	b.n	8006d88 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f001 faca 	bl	8008316 <USBD_CtlError>
      ret = USBD_FAIL;
 8006d82:	2303      	movs	r3, #3
 8006d84:	75fb      	strb	r3, [r7, #23]
      break;
 8006d86:	bf00      	nop
  }

  return (uint8_t)ret;
 8006d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3718      	adds	r7, #24
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	200000d8 	.word	0x200000d8
 8006d98:	200000c0 	.word	0x200000c0

08006d9c <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	4613      	mov	r3, r2
 8006da8:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	32b0      	adds	r2, #176	@ 0xb0
 8006db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db8:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e014      	b.n	8006dee <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b03      	cmp	r3, #3
 8006dce:	d10d      	bne.n	8006dec <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	7b1b      	ldrb	r3, [r3, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d109      	bne.n	8006dec <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8006dde:	4b06      	ldr	r3, [pc, #24]	@ (8006df8 <USBD_HID_SendReport+0x5c>)
 8006de0:	7819      	ldrb	r1, [r3, #0]
 8006de2:	88fb      	ldrh	r3, [r7, #6]
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f001 ff59 	bl	8008c9e <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	2000013d 	.word	0x2000013d

08006dfc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006e04:	2181      	movs	r1, #129	@ 0x81
 8006e06:	4809      	ldr	r0, [pc, #36]	@ (8006e2c <USBD_HID_GetFSCfgDesc+0x30>)
 8006e08:	f000 fc4e 	bl	80076a8 <USBD_GetEpDesc>
 8006e0c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	220a      	movs	r2, #10
 8006e18:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2222      	movs	r2, #34	@ 0x22
 8006e1e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006e20:	4b02      	ldr	r3, [pc, #8]	@ (8006e2c <USBD_HID_GetFSCfgDesc+0x30>)
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	2000009c 	.word	0x2000009c

08006e30 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006e38:	2181      	movs	r1, #129	@ 0x81
 8006e3a:	4809      	ldr	r0, [pc, #36]	@ (8006e60 <USBD_HID_GetHSCfgDesc+0x30>)
 8006e3c:	f000 fc34 	bl	80076a8 <USBD_GetEpDesc>
 8006e40:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2207      	movs	r2, #7
 8006e4c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2222      	movs	r2, #34	@ 0x22
 8006e52:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006e54:	4b02      	ldr	r3, [pc, #8]	@ (8006e60 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	2000009c 	.word	0x2000009c

08006e64 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006e6c:	2181      	movs	r1, #129	@ 0x81
 8006e6e:	4809      	ldr	r0, [pc, #36]	@ (8006e94 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8006e70:	f000 fc1a 	bl	80076a8 <USBD_GetEpDesc>
 8006e74:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d002      	beq.n	8006e82 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	220a      	movs	r2, #10
 8006e80:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2222      	movs	r2, #34	@ 0x22
 8006e86:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006e88:	4b02      	ldr	r3, [pc, #8]	@ (8006e94 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	2000009c 	.word	0x2000009c

08006e98 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	32b0      	adds	r2, #176	@ 0xb0
 8006eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	220a      	movs	r2, #10
 8006ed0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006ed2:	4b03      	ldr	r3, [pc, #12]	@ (8006ee0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	200000cc 	.word	0x200000cc

08006ee4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e01f      	b.n	8006f3c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d003      	beq.n	8006f22 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	79fa      	ldrb	r2, [r7, #7]
 8006f2e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f001 fd79 	bl	8008a28 <USBD_LL_Init>
 8006f36:	4603      	mov	r3, r0
 8006f38:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3718      	adds	r7, #24
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e025      	b.n	8006fa8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	32ae      	adds	r2, #174	@ 0xae
 8006f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00f      	beq.n	8006f98 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	32ae      	adds	r2, #174	@ 0xae
 8006f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f88:	f107 020e 	add.w	r2, r7, #14
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	4798      	blx	r3
 8006f90:	4602      	mov	r2, r0
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f001 fd87 	bl	8008acc <USBD_LL_Start>
 8006fbe:	4603      	mov	r3, r0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fd0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d009      	beq.n	800700c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	78fa      	ldrb	r2, [r7, #3]
 8007002:	4611      	mov	r1, r2
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	4798      	blx	r3
 8007008:	4603      	mov	r3, r0
 800700a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800700c:	7bfb      	ldrb	r3, [r7, #15]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b084      	sub	sp, #16
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	460b      	mov	r3, r1
 8007020:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	78fa      	ldrb	r2, [r7, #3]
 8007030:	4611      	mov	r1, r2
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	4798      	blx	r3
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800703c:	2303      	movs	r3, #3
 800703e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007040:	7bfb      	ldrb	r3, [r7, #15]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b084      	sub	sp, #16
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	4618      	mov	r0, r3
 800705e:	f001 f920 	bl	80082a2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007070:	461a      	mov	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800707e:	f003 031f 	and.w	r3, r3, #31
 8007082:	2b02      	cmp	r3, #2
 8007084:	d01a      	beq.n	80070bc <USBD_LL_SetupStage+0x72>
 8007086:	2b02      	cmp	r3, #2
 8007088:	d822      	bhi.n	80070d0 <USBD_LL_SetupStage+0x86>
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <USBD_LL_SetupStage+0x4a>
 800708e:	2b01      	cmp	r3, #1
 8007090:	d00a      	beq.n	80070a8 <USBD_LL_SetupStage+0x5e>
 8007092:	e01d      	b.n	80070d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fb75 	bl	800778c <USBD_StdDevReq>
 80070a2:	4603      	mov	r3, r0
 80070a4:	73fb      	strb	r3, [r7, #15]
      break;
 80070a6:	e020      	b.n	80070ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070ae:	4619      	mov	r1, r3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fbdd 	bl	8007870 <USBD_StdItfReq>
 80070b6:	4603      	mov	r3, r0
 80070b8:	73fb      	strb	r3, [r7, #15]
      break;
 80070ba:	e016      	b.n	80070ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070c2:	4619      	mov	r1, r3
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fc3f 	bl	8007948 <USBD_StdEPReq>
 80070ca:	4603      	mov	r3, r0
 80070cc:	73fb      	strb	r3, [r7, #15]
      break;
 80070ce:	e00c      	b.n	80070ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80070d6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	4619      	mov	r1, r3
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f001 fd54 	bl	8008b8c <USBD_LL_StallEP>
 80070e4:	4603      	mov	r3, r0
 80070e6:	73fb      	strb	r3, [r7, #15]
      break;
 80070e8:	bf00      	nop
  }

  return ret;
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	460b      	mov	r3, r1
 80070fe:	607a      	str	r2, [r7, #4]
 8007100:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007106:	7afb      	ldrb	r3, [r7, #11]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d177      	bne.n	80071fc <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007112:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800711a:	2b03      	cmp	r3, #3
 800711c:	f040 80a1 	bne.w	8007262 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	8992      	ldrh	r2, [r2, #12]
 8007128:	4293      	cmp	r3, r2
 800712a:	d91c      	bls.n	8007166 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	8992      	ldrh	r2, [r2, #12]
 8007134:	1a9a      	subs	r2, r3, r2
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	8992      	ldrh	r2, [r2, #12]
 8007142:	441a      	add	r2, r3
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	6919      	ldr	r1, [r3, #16]
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	899b      	ldrh	r3, [r3, #12]
 8007150:	461a      	mov	r2, r3
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	4293      	cmp	r3, r2
 8007158:	bf38      	it	cc
 800715a:	4613      	movcc	r3, r2
 800715c:	461a      	mov	r2, r3
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f001 f985 	bl	800846e <USBD_CtlContinueRx>
 8007164:	e07d      	b.n	8007262 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800716c:	f003 031f 	and.w	r3, r3, #31
 8007170:	2b02      	cmp	r3, #2
 8007172:	d014      	beq.n	800719e <USBD_LL_DataOutStage+0xaa>
 8007174:	2b02      	cmp	r3, #2
 8007176:	d81d      	bhi.n	80071b4 <USBD_LL_DataOutStage+0xc0>
 8007178:	2b00      	cmp	r3, #0
 800717a:	d002      	beq.n	8007182 <USBD_LL_DataOutStage+0x8e>
 800717c:	2b01      	cmp	r3, #1
 800717e:	d003      	beq.n	8007188 <USBD_LL_DataOutStage+0x94>
 8007180:	e018      	b.n	80071b4 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007182:	2300      	movs	r3, #0
 8007184:	75bb      	strb	r3, [r7, #22]
            break;
 8007186:	e018      	b.n	80071ba <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800718e:	b2db      	uxtb	r3, r3
 8007190:	4619      	mov	r1, r3
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f000 fa6e 	bl	8007674 <USBD_CoreFindIF>
 8007198:	4603      	mov	r3, r0
 800719a:	75bb      	strb	r3, [r7, #22]
            break;
 800719c:	e00d      	b.n	80071ba <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	4619      	mov	r1, r3
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f000 fa70 	bl	800768e <USBD_CoreFindEP>
 80071ae:	4603      	mov	r3, r0
 80071b0:	75bb      	strb	r3, [r7, #22]
            break;
 80071b2:	e002      	b.n	80071ba <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80071b4:	2300      	movs	r3, #0
 80071b6:	75bb      	strb	r3, [r7, #22]
            break;
 80071b8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80071ba:	7dbb      	ldrb	r3, [r7, #22]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d119      	bne.n	80071f4 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b03      	cmp	r3, #3
 80071ca:	d113      	bne.n	80071f4 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80071cc:	7dba      	ldrb	r2, [r7, #22]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	32ae      	adds	r2, #174	@ 0xae
 80071d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00b      	beq.n	80071f4 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80071dc:	7dba      	ldrb	r2, [r7, #22]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80071e4:	7dba      	ldrb	r2, [r7, #22]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	32ae      	adds	r2, #174	@ 0xae
 80071ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f001 f94b 	bl	8008490 <USBD_CtlSendStatus>
 80071fa:	e032      	b.n	8007262 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80071fc:	7afb      	ldrb	r3, [r7, #11]
 80071fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007202:	b2db      	uxtb	r3, r3
 8007204:	4619      	mov	r1, r3
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f000 fa41 	bl	800768e <USBD_CoreFindEP>
 800720c:	4603      	mov	r3, r0
 800720e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007210:	7dbb      	ldrb	r3, [r7, #22]
 8007212:	2bff      	cmp	r3, #255	@ 0xff
 8007214:	d025      	beq.n	8007262 <USBD_LL_DataOutStage+0x16e>
 8007216:	7dbb      	ldrb	r3, [r7, #22]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d122      	bne.n	8007262 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b03      	cmp	r3, #3
 8007226:	d117      	bne.n	8007258 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007228:	7dba      	ldrb	r2, [r7, #22]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	32ae      	adds	r2, #174	@ 0xae
 800722e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00f      	beq.n	8007258 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007238:	7dba      	ldrb	r2, [r7, #22]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007240:	7dba      	ldrb	r2, [r7, #22]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	32ae      	adds	r2, #174	@ 0xae
 8007246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	7afa      	ldrb	r2, [r7, #11]
 800724e:	4611      	mov	r1, r2
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	4798      	blx	r3
 8007254:	4603      	mov	r3, r0
 8007256:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007258:	7dfb      	ldrb	r3, [r7, #23]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800725e:	7dfb      	ldrb	r3, [r7, #23]
 8007260:	e000      	b.n	8007264 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3718      	adds	r7, #24
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	460b      	mov	r3, r1
 8007276:	607a      	str	r2, [r7, #4]
 8007278:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800727a:	7afb      	ldrb	r3, [r7, #11]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d178      	bne.n	8007372 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	3314      	adds	r3, #20
 8007284:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800728c:	2b02      	cmp	r3, #2
 800728e:	d163      	bne.n	8007358 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	8992      	ldrh	r2, [r2, #12]
 8007298:	4293      	cmp	r3, r2
 800729a:	d91c      	bls.n	80072d6 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	8992      	ldrh	r2, [r2, #12]
 80072a4:	1a9a      	subs	r2, r3, r2
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	8992      	ldrh	r2, [r2, #12]
 80072b2:	441a      	add	r2, r3
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	6919      	ldr	r1, [r3, #16]
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	461a      	mov	r2, r3
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f001 f8c2 	bl	800844c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072c8:	2300      	movs	r3, #0
 80072ca:	2200      	movs	r2, #0
 80072cc:	2100      	movs	r1, #0
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f001 fd06 	bl	8008ce0 <USBD_LL_PrepareReceive>
 80072d4:	e040      	b.n	8007358 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	899b      	ldrh	r3, [r3, #12]
 80072da:	461a      	mov	r2, r3
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d11c      	bne.n	800731e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d316      	bcc.n	800731e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d20f      	bcs.n	800731e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80072fe:	2200      	movs	r2, #0
 8007300:	2100      	movs	r1, #0
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f001 f8a2 	bl	800844c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007310:	2300      	movs	r3, #0
 8007312:	2200      	movs	r2, #0
 8007314:	2100      	movs	r1, #0
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f001 fce2 	bl	8008ce0 <USBD_LL_PrepareReceive>
 800731c:	e01c      	b.n	8007358 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b03      	cmp	r3, #3
 8007328:	d10f      	bne.n	800734a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d009      	beq.n	800734a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800734a:	2180      	movs	r1, #128	@ 0x80
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f001 fc1d 	bl	8008b8c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f001 f8af 	bl	80084b6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d03a      	beq.n	80073d8 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f7ff fe30 	bl	8006fc8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007370:	e032      	b.n	80073d8 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007372:	7afb      	ldrb	r3, [r7, #11]
 8007374:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007378:	b2db      	uxtb	r3, r3
 800737a:	4619      	mov	r1, r3
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f000 f986 	bl	800768e <USBD_CoreFindEP>
 8007382:	4603      	mov	r3, r0
 8007384:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007386:	7dfb      	ldrb	r3, [r7, #23]
 8007388:	2bff      	cmp	r3, #255	@ 0xff
 800738a:	d025      	beq.n	80073d8 <USBD_LL_DataInStage+0x16c>
 800738c:	7dfb      	ldrb	r3, [r7, #23]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d122      	bne.n	80073d8 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b03      	cmp	r3, #3
 800739c:	d11c      	bne.n	80073d8 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800739e:	7dfa      	ldrb	r2, [r7, #23]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	32ae      	adds	r2, #174	@ 0xae
 80073a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d014      	beq.n	80073d8 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80073ae:	7dfa      	ldrb	r2, [r7, #23]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80073b6:	7dfa      	ldrb	r2, [r7, #23]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	32ae      	adds	r2, #174	@ 0xae
 80073bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	7afa      	ldrb	r2, [r7, #11]
 80073c4:	4611      	mov	r1, r2
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	4798      	blx	r3
 80073ca:	4603      	mov	r3, r0
 80073cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80073ce:	7dbb      	ldrb	r3, [r7, #22]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80073d4:	7dbb      	ldrb	r3, [r7, #22]
 80073d6:	e000      	b.n	80073da <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ea:	2300      	movs	r3, #0
 80073ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800741a:	2b00      	cmp	r3, #0
 800741c:	d014      	beq.n	8007448 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00e      	beq.n	8007448 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	6852      	ldr	r2, [r2, #4]
 8007436:	b2d2      	uxtb	r2, r2
 8007438:	4611      	mov	r1, r2
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	4798      	blx	r3
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007444:	2303      	movs	r3, #3
 8007446:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007448:	2340      	movs	r3, #64	@ 0x40
 800744a:	2200      	movs	r2, #0
 800744c:	2100      	movs	r1, #0
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f001 fb57 	bl	8008b02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2240      	movs	r2, #64	@ 0x40
 8007460:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007464:	2340      	movs	r3, #64	@ 0x40
 8007466:	2200      	movs	r2, #0
 8007468:	2180      	movs	r1, #128	@ 0x80
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f001 fb49 	bl	8008b02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2240      	movs	r2, #64	@ 0x40
 800747c:	841a      	strh	r2, [r3, #32]

  return ret;
 800747e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	460b      	mov	r3, r1
 8007492:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	78fa      	ldrb	r2, [r7, #3]
 8007498:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b04      	cmp	r3, #4
 80074ba:	d006      	beq.n	80074ca <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2204      	movs	r2, #4
 80074ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	d106      	bne.n	8007502 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b03      	cmp	r3, #3
 8007522:	d110      	bne.n	8007546 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00b      	beq.n	8007546 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007534:	69db      	ldr	r3, [r3, #28]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d005      	beq.n	8007546 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	460b      	mov	r3, r1
 800755a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	32ae      	adds	r2, #174	@ 0xae
 8007566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800756e:	2303      	movs	r3, #3
 8007570:	e01c      	b.n	80075ac <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b03      	cmp	r3, #3
 800757c:	d115      	bne.n	80075aa <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	32ae      	adds	r2, #174	@ 0xae
 8007588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00b      	beq.n	80075aa <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	32ae      	adds	r2, #174	@ 0xae
 800759c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	78fa      	ldrb	r2, [r7, #3]
 80075a4:	4611      	mov	r1, r2
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	460b      	mov	r3, r1
 80075be:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	32ae      	adds	r2, #174	@ 0xae
 80075ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d101      	bne.n	80075d6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80075d2:	2303      	movs	r3, #3
 80075d4:	e01c      	b.n	8007610 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d115      	bne.n	800760e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	32ae      	adds	r2, #174	@ 0xae
 80075ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00b      	beq.n	800760e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	32ae      	adds	r2, #174	@ 0xae
 8007600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007606:	78fa      	ldrb	r2, [r7, #3]
 8007608:	4611      	mov	r1, r2
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b084      	sub	sp, #16
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007636:	2300      	movs	r3, #0
 8007638:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00e      	beq.n	800766a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	6852      	ldr	r2, [r2, #4]
 8007658:	b2d2      	uxtb	r2, r2
 800765a:	4611      	mov	r1, r2
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	4798      	blx	r3
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007666:	2303      	movs	r3, #3
 8007668:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800766a:	7bfb      	ldrb	r3, [r7, #15]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	460b      	mov	r3, r1
 800767e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007680:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007682:	4618      	mov	r0, r3
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800768e:	b480      	push	{r7}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	460b      	mov	r3, r1
 8007698:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800769a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800769c:	4618      	mov	r0, r3
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	460b      	mov	r3, r1
 80076b2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80076bc:	2300      	movs	r3, #0
 80076be:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	885b      	ldrh	r3, [r3, #2]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	7812      	ldrb	r2, [r2, #0]
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d91f      	bls.n	800770e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80076d4:	e013      	b.n	80076fe <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80076d6:	f107 030a 	add.w	r3, r7, #10
 80076da:	4619      	mov	r1, r3
 80076dc:	6978      	ldr	r0, [r7, #20]
 80076de:	f000 f81b 	bl	8007718 <USBD_GetNextDesc>
 80076e2:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	785b      	ldrb	r3, [r3, #1]
 80076e8:	2b05      	cmp	r3, #5
 80076ea:	d108      	bne.n	80076fe <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	789b      	ldrb	r3, [r3, #2]
 80076f4:	78fa      	ldrb	r2, [r7, #3]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d008      	beq.n	800770c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80076fa:	2300      	movs	r3, #0
 80076fc:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	885b      	ldrh	r3, [r3, #2]
 8007702:	b29a      	uxth	r2, r3
 8007704:	897b      	ldrh	r3, [r7, #10]
 8007706:	429a      	cmp	r2, r3
 8007708:	d8e5      	bhi.n	80076d6 <USBD_GetEpDesc+0x2e>
 800770a:	e000      	b.n	800770e <USBD_GetEpDesc+0x66>
          break;
 800770c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800770e:	693b      	ldr	r3, [r7, #16]
}
 8007710:	4618      	mov	r0, r3
 8007712:	3718      	adds	r7, #24
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	881b      	ldrh	r3, [r3, #0]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	7812      	ldrb	r2, [r2, #0]
 800772e:	4413      	add	r3, r2
 8007730:	b29a      	uxth	r2, r3
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	461a      	mov	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4413      	add	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007742:	68fb      	ldr	r3, [r7, #12]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3714      	adds	r7, #20
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007750:	b480      	push	{r7}
 8007752:	b087      	sub	sp, #28
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	3301      	adds	r3, #1
 8007766:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800776e:	8a3b      	ldrh	r3, [r7, #16]
 8007770:	021b      	lsls	r3, r3, #8
 8007772:	b21a      	sxth	r2, r3
 8007774:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007778:	4313      	orrs	r3, r2
 800777a:	b21b      	sxth	r3, r3
 800777c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800777e:	89fb      	ldrh	r3, [r7, #14]
}
 8007780:	4618      	mov	r0, r3
 8007782:	371c      	adds	r7, #28
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077a2:	2b40      	cmp	r3, #64	@ 0x40
 80077a4:	d005      	beq.n	80077b2 <USBD_StdDevReq+0x26>
 80077a6:	2b40      	cmp	r3, #64	@ 0x40
 80077a8:	d857      	bhi.n	800785a <USBD_StdDevReq+0xce>
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00f      	beq.n	80077ce <USBD_StdDevReq+0x42>
 80077ae:	2b20      	cmp	r3, #32
 80077b0:	d153      	bne.n	800785a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	32ae      	adds	r2, #174	@ 0xae
 80077bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	6839      	ldr	r1, [r7, #0]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	4798      	blx	r3
 80077c8:	4603      	mov	r3, r0
 80077ca:	73fb      	strb	r3, [r7, #15]
      break;
 80077cc:	e04a      	b.n	8007864 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	785b      	ldrb	r3, [r3, #1]
 80077d2:	2b09      	cmp	r3, #9
 80077d4:	d83b      	bhi.n	800784e <USBD_StdDevReq+0xc2>
 80077d6:	a201      	add	r2, pc, #4	@ (adr r2, 80077dc <USBD_StdDevReq+0x50>)
 80077d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077dc:	08007831 	.word	0x08007831
 80077e0:	08007845 	.word	0x08007845
 80077e4:	0800784f 	.word	0x0800784f
 80077e8:	0800783b 	.word	0x0800783b
 80077ec:	0800784f 	.word	0x0800784f
 80077f0:	0800780f 	.word	0x0800780f
 80077f4:	08007805 	.word	0x08007805
 80077f8:	0800784f 	.word	0x0800784f
 80077fc:	08007827 	.word	0x08007827
 8007800:	08007819 	.word	0x08007819
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fa3e 	bl	8007c88 <USBD_GetDescriptor>
          break;
 800780c:	e024      	b.n	8007858 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 fba3 	bl	8007f5c <USBD_SetAddress>
          break;
 8007816:	e01f      	b.n	8007858 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fbe2 	bl	8007fe4 <USBD_SetConfig>
 8007820:	4603      	mov	r3, r0
 8007822:	73fb      	strb	r3, [r7, #15]
          break;
 8007824:	e018      	b.n	8007858 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fc85 	bl	8008138 <USBD_GetConfig>
          break;
 800782e:	e013      	b.n	8007858 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fcb6 	bl	80081a4 <USBD_GetStatus>
          break;
 8007838:	e00e      	b.n	8007858 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fce5 	bl	800820c <USBD_SetFeature>
          break;
 8007842:	e009      	b.n	8007858 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fd09 	bl	800825e <USBD_ClrFeature>
          break;
 800784c:	e004      	b.n	8007858 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fd60 	bl	8008316 <USBD_CtlError>
          break;
 8007856:	bf00      	nop
      }
      break;
 8007858:	e004      	b.n	8007864 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fd5a 	bl	8008316 <USBD_CtlError>
      break;
 8007862:	bf00      	nop
  }

  return ret;
 8007864:	7bfb      	ldrb	r3, [r7, #15]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop

08007870 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007886:	2b40      	cmp	r3, #64	@ 0x40
 8007888:	d005      	beq.n	8007896 <USBD_StdItfReq+0x26>
 800788a:	2b40      	cmp	r3, #64	@ 0x40
 800788c:	d852      	bhi.n	8007934 <USBD_StdItfReq+0xc4>
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <USBD_StdItfReq+0x26>
 8007892:	2b20      	cmp	r3, #32
 8007894:	d14e      	bne.n	8007934 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800789c:	b2db      	uxtb	r3, r3
 800789e:	3b01      	subs	r3, #1
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d840      	bhi.n	8007926 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	889b      	ldrh	r3, [r3, #4]
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d836      	bhi.n	800791c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	889b      	ldrh	r3, [r3, #4]
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	4619      	mov	r1, r3
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7ff fedc 	bl	8007674 <USBD_CoreFindIF>
 80078bc:	4603      	mov	r3, r0
 80078be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	2bff      	cmp	r3, #255	@ 0xff
 80078c4:	d01d      	beq.n	8007902 <USBD_StdItfReq+0x92>
 80078c6:	7bbb      	ldrb	r3, [r7, #14]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d11a      	bne.n	8007902 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80078cc:	7bba      	ldrb	r2, [r7, #14]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	32ae      	adds	r2, #174	@ 0xae
 80078d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00f      	beq.n	80078fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80078dc:	7bba      	ldrb	r2, [r7, #14]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80078e4:	7bba      	ldrb	r2, [r7, #14]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	32ae      	adds	r2, #174	@ 0xae
 80078ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	4798      	blx	r3
 80078f6:	4603      	mov	r3, r0
 80078f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80078fa:	e004      	b.n	8007906 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80078fc:	2303      	movs	r3, #3
 80078fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007900:	e001      	b.n	8007906 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007902:	2303      	movs	r3, #3
 8007904:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	88db      	ldrh	r3, [r3, #6]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d110      	bne.n	8007930 <USBD_StdItfReq+0xc0>
 800790e:	7bfb      	ldrb	r3, [r7, #15]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10d      	bne.n	8007930 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fdbb 	bl	8008490 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800791a:	e009      	b.n	8007930 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fcf9 	bl	8008316 <USBD_CtlError>
          break;
 8007924:	e004      	b.n	8007930 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fcf4 	bl	8008316 <USBD_CtlError>
          break;
 800792e:	e000      	b.n	8007932 <USBD_StdItfReq+0xc2>
          break;
 8007930:	bf00      	nop
      }
      break;
 8007932:	e004      	b.n	800793e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fced 	bl	8008316 <USBD_CtlError>
      break;
 800793c:	bf00      	nop
  }

  return ret;
 800793e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	889b      	ldrh	r3, [r3, #4]
 800795a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007964:	2b40      	cmp	r3, #64	@ 0x40
 8007966:	d007      	beq.n	8007978 <USBD_StdEPReq+0x30>
 8007968:	2b40      	cmp	r3, #64	@ 0x40
 800796a:	f200 8181 	bhi.w	8007c70 <USBD_StdEPReq+0x328>
 800796e:	2b00      	cmp	r3, #0
 8007970:	d02a      	beq.n	80079c8 <USBD_StdEPReq+0x80>
 8007972:	2b20      	cmp	r3, #32
 8007974:	f040 817c 	bne.w	8007c70 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007978:	7bbb      	ldrb	r3, [r7, #14]
 800797a:	4619      	mov	r1, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7ff fe86 	bl	800768e <USBD_CoreFindEP>
 8007982:	4603      	mov	r3, r0
 8007984:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007986:	7b7b      	ldrb	r3, [r7, #13]
 8007988:	2bff      	cmp	r3, #255	@ 0xff
 800798a:	f000 8176 	beq.w	8007c7a <USBD_StdEPReq+0x332>
 800798e:	7b7b      	ldrb	r3, [r7, #13]
 8007990:	2b00      	cmp	r3, #0
 8007992:	f040 8172 	bne.w	8007c7a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8007996:	7b7a      	ldrb	r2, [r7, #13]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800799e:	7b7a      	ldrb	r2, [r7, #13]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	32ae      	adds	r2, #174	@ 0xae
 80079a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 8165 	beq.w	8007c7a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80079b0:	7b7a      	ldrb	r2, [r7, #13]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	32ae      	adds	r2, #174	@ 0xae
 80079b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	4798      	blx	r3
 80079c2:	4603      	mov	r3, r0
 80079c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079c6:	e158      	b.n	8007c7a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	785b      	ldrb	r3, [r3, #1]
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	d008      	beq.n	80079e2 <USBD_StdEPReq+0x9a>
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	f300 8147 	bgt.w	8007c64 <USBD_StdEPReq+0x31c>
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 809b 	beq.w	8007b12 <USBD_StdEPReq+0x1ca>
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d03c      	beq.n	8007a5a <USBD_StdEPReq+0x112>
 80079e0:	e140      	b.n	8007c64 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d002      	beq.n	80079f4 <USBD_StdEPReq+0xac>
 80079ee:	2b03      	cmp	r3, #3
 80079f0:	d016      	beq.n	8007a20 <USBD_StdEPReq+0xd8>
 80079f2:	e02c      	b.n	8007a4e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079f4:	7bbb      	ldrb	r3, [r7, #14]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00d      	beq.n	8007a16 <USBD_StdEPReq+0xce>
 80079fa:	7bbb      	ldrb	r3, [r7, #14]
 80079fc:	2b80      	cmp	r3, #128	@ 0x80
 80079fe:	d00a      	beq.n	8007a16 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a00:	7bbb      	ldrb	r3, [r7, #14]
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f001 f8c1 	bl	8008b8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a0a:	2180      	movs	r1, #128	@ 0x80
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f001 f8bd 	bl	8008b8c <USBD_LL_StallEP>
 8007a12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a14:	e020      	b.n	8007a58 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fc7c 	bl	8008316 <USBD_CtlError>
              break;
 8007a1e:	e01b      	b.n	8007a58 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	885b      	ldrh	r3, [r3, #2]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10e      	bne.n	8007a46 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00b      	beq.n	8007a46 <USBD_StdEPReq+0xfe>
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	2b80      	cmp	r3, #128	@ 0x80
 8007a32:	d008      	beq.n	8007a46 <USBD_StdEPReq+0xfe>
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	88db      	ldrh	r3, [r3, #6]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d104      	bne.n	8007a46 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a3c:	7bbb      	ldrb	r3, [r7, #14]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 f8a3 	bl	8008b8c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fd22 	bl	8008490 <USBD_CtlSendStatus>

              break;
 8007a4c:	e004      	b.n	8007a58 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007a4e:	6839      	ldr	r1, [r7, #0]
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fc60 	bl	8008316 <USBD_CtlError>
              break;
 8007a56:	bf00      	nop
          }
          break;
 8007a58:	e109      	b.n	8007c6e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d002      	beq.n	8007a6c <USBD_StdEPReq+0x124>
 8007a66:	2b03      	cmp	r3, #3
 8007a68:	d016      	beq.n	8007a98 <USBD_StdEPReq+0x150>
 8007a6a:	e04b      	b.n	8007b04 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00d      	beq.n	8007a8e <USBD_StdEPReq+0x146>
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
 8007a74:	2b80      	cmp	r3, #128	@ 0x80
 8007a76:	d00a      	beq.n	8007a8e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a78:	7bbb      	ldrb	r3, [r7, #14]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f001 f885 	bl	8008b8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a82:	2180      	movs	r1, #128	@ 0x80
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 f881 	bl	8008b8c <USBD_LL_StallEP>
 8007a8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a8c:	e040      	b.n	8007b10 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fc40 	bl	8008316 <USBD_CtlError>
              break;
 8007a96:	e03b      	b.n	8007b10 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	885b      	ldrh	r3, [r3, #2]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d136      	bne.n	8007b0e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d004      	beq.n	8007ab4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	4619      	mov	r1, r3
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f001 f88b 	bl	8008bca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fceb 	bl	8008490 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007aba:	7bbb      	ldrb	r3, [r7, #14]
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7ff fde5 	bl	800768e <USBD_CoreFindEP>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ac8:	7b7b      	ldrb	r3, [r7, #13]
 8007aca:	2bff      	cmp	r3, #255	@ 0xff
 8007acc:	d01f      	beq.n	8007b0e <USBD_StdEPReq+0x1c6>
 8007ace:	7b7b      	ldrb	r3, [r7, #13]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d11c      	bne.n	8007b0e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ad4:	7b7a      	ldrb	r2, [r7, #13]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007adc:	7b7a      	ldrb	r2, [r7, #13]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	32ae      	adds	r2, #174	@ 0xae
 8007ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d010      	beq.n	8007b0e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007aec:	7b7a      	ldrb	r2, [r7, #13]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	32ae      	adds	r2, #174	@ 0xae
 8007af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	4798      	blx	r3
 8007afe:	4603      	mov	r3, r0
 8007b00:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b02:	e004      	b.n	8007b0e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fc05 	bl	8008316 <USBD_CtlError>
              break;
 8007b0c:	e000      	b.n	8007b10 <USBD_StdEPReq+0x1c8>
              break;
 8007b0e:	bf00      	nop
          }
          break;
 8007b10:	e0ad      	b.n	8007c6e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d002      	beq.n	8007b24 <USBD_StdEPReq+0x1dc>
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d033      	beq.n	8007b8a <USBD_StdEPReq+0x242>
 8007b22:	e099      	b.n	8007c58 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d007      	beq.n	8007b3a <USBD_StdEPReq+0x1f2>
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
 8007b2c:	2b80      	cmp	r3, #128	@ 0x80
 8007b2e:	d004      	beq.n	8007b3a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fbef 	bl	8008316 <USBD_CtlError>
                break;
 8007b38:	e093      	b.n	8007c62 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	da0b      	bge.n	8007b5a <USBD_StdEPReq+0x212>
 8007b42:	7bbb      	ldrb	r3, [r7, #14]
 8007b44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b48:	4613      	mov	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	3310      	adds	r3, #16
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	4413      	add	r3, r2
 8007b56:	3304      	adds	r3, #4
 8007b58:	e00b      	b.n	8007b72 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b5a:	7bbb      	ldrb	r3, [r7, #14]
 8007b5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b60:	4613      	mov	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	4413      	add	r3, r2
 8007b70:	3304      	adds	r3, #4
 8007b72:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2200      	movs	r2, #0
 8007b78:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	330e      	adds	r3, #14
 8007b7e:	2202      	movs	r2, #2
 8007b80:	4619      	mov	r1, r3
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fc44 	bl	8008410 <USBD_CtlSendData>
              break;
 8007b88:	e06b      	b.n	8007c62 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	da11      	bge.n	8007bb6 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b92:	7bbb      	ldrb	r3, [r7, #14]
 8007b94:	f003 020f 	and.w	r2, r3, #15
 8007b98:	6879      	ldr	r1, [r7, #4]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	4413      	add	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	440b      	add	r3, r1
 8007ba4:	3323      	adds	r3, #35	@ 0x23
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d117      	bne.n	8007bdc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fbb1 	bl	8008316 <USBD_CtlError>
                  break;
 8007bb4:	e055      	b.n	8007c62 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
 8007bb8:	f003 020f 	and.w	r2, r3, #15
 8007bbc:	6879      	ldr	r1, [r7, #4]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	440b      	add	r3, r1
 8007bc8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d104      	bne.n	8007bdc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007bd2:	6839      	ldr	r1, [r7, #0]
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fb9e 	bl	8008316 <USBD_CtlError>
                  break;
 8007bda:	e042      	b.n	8007c62 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	da0b      	bge.n	8007bfc <USBD_StdEPReq+0x2b4>
 8007be4:	7bbb      	ldrb	r3, [r7, #14]
 8007be6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bea:	4613      	mov	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4413      	add	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	3310      	adds	r3, #16
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	3304      	adds	r3, #4
 8007bfa:	e00b      	b.n	8007c14 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bfc:	7bbb      	ldrb	r3, [r7, #14]
 8007bfe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c02:	4613      	mov	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4413      	add	r3, r2
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	4413      	add	r3, r2
 8007c12:	3304      	adds	r3, #4
 8007c14:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c16:	7bbb      	ldrb	r3, [r7, #14]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d002      	beq.n	8007c22 <USBD_StdEPReq+0x2da>
 8007c1c:	7bbb      	ldrb	r3, [r7, #14]
 8007c1e:	2b80      	cmp	r3, #128	@ 0x80
 8007c20:	d103      	bne.n	8007c2a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	2200      	movs	r2, #0
 8007c26:	739a      	strb	r2, [r3, #14]
 8007c28:	e00e      	b.n	8007c48 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c2a:	7bbb      	ldrb	r3, [r7, #14]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 ffea 	bl	8008c08 <USBD_LL_IsStallEP>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	739a      	strb	r2, [r3, #14]
 8007c40:	e002      	b.n	8007c48 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	2200      	movs	r2, #0
 8007c46:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	330e      	adds	r3, #14
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fbdd 	bl	8008410 <USBD_CtlSendData>
              break;
 8007c56:	e004      	b.n	8007c62 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fb5b 	bl	8008316 <USBD_CtlError>
              break;
 8007c60:	bf00      	nop
          }
          break;
 8007c62:	e004      	b.n	8007c6e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fb55 	bl	8008316 <USBD_CtlError>
          break;
 8007c6c:	bf00      	nop
      }
      break;
 8007c6e:	e005      	b.n	8007c7c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fb4f 	bl	8008316 <USBD_CtlError>
      break;
 8007c78:	e000      	b.n	8007c7c <USBD_StdEPReq+0x334>
      break;
 8007c7a:	bf00      	nop
  }

  return ret;
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
	...

08007c88 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c92:	2300      	movs	r3, #0
 8007c94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c96:	2300      	movs	r3, #0
 8007c98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	885b      	ldrh	r3, [r3, #2]
 8007ca2:	0a1b      	lsrs	r3, r3, #8
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	2b06      	cmp	r3, #6
 8007caa:	f200 8128 	bhi.w	8007efe <USBD_GetDescriptor+0x276>
 8007cae:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb4 <USBD_GetDescriptor+0x2c>)
 8007cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb4:	08007cd1 	.word	0x08007cd1
 8007cb8:	08007ce9 	.word	0x08007ce9
 8007cbc:	08007d29 	.word	0x08007d29
 8007cc0:	08007eff 	.word	0x08007eff
 8007cc4:	08007eff 	.word	0x08007eff
 8007cc8:	08007e9f 	.word	0x08007e9f
 8007ccc:	08007ecb 	.word	0x08007ecb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	7c12      	ldrb	r2, [r2, #16]
 8007cdc:	f107 0108 	add.w	r1, r7, #8
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	4798      	blx	r3
 8007ce4:	60f8      	str	r0, [r7, #12]
      break;
 8007ce6:	e112      	b.n	8007f0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	7c1b      	ldrb	r3, [r3, #16]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10d      	bne.n	8007d0c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cf8:	f107 0208 	add.w	r2, r7, #8
 8007cfc:	4610      	mov	r0, r2
 8007cfe:	4798      	blx	r3
 8007d00:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	3301      	adds	r3, #1
 8007d06:	2202      	movs	r2, #2
 8007d08:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d0a:	e100      	b.n	8007f0e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d14:	f107 0208 	add.w	r2, r7, #8
 8007d18:	4610      	mov	r0, r2
 8007d1a:	4798      	blx	r3
 8007d1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	3301      	adds	r3, #1
 8007d22:	2202      	movs	r2, #2
 8007d24:	701a      	strb	r2, [r3, #0]
      break;
 8007d26:	e0f2      	b.n	8007f0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	885b      	ldrh	r3, [r3, #2]
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b05      	cmp	r3, #5
 8007d30:	f200 80ac 	bhi.w	8007e8c <USBD_GetDescriptor+0x204>
 8007d34:	a201      	add	r2, pc, #4	@ (adr r2, 8007d3c <USBD_GetDescriptor+0xb4>)
 8007d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3a:	bf00      	nop
 8007d3c:	08007d55 	.word	0x08007d55
 8007d40:	08007d89 	.word	0x08007d89
 8007d44:	08007dbd 	.word	0x08007dbd
 8007d48:	08007df1 	.word	0x08007df1
 8007d4c:	08007e25 	.word	0x08007e25
 8007d50:	08007e59 	.word	0x08007e59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00b      	beq.n	8007d78 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	7c12      	ldrb	r2, [r2, #16]
 8007d6c:	f107 0108 	add.w	r1, r7, #8
 8007d70:	4610      	mov	r0, r2
 8007d72:	4798      	blx	r3
 8007d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d76:	e091      	b.n	8007e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d78:	6839      	ldr	r1, [r7, #0]
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 facb 	bl	8008316 <USBD_CtlError>
            err++;
 8007d80:	7afb      	ldrb	r3, [r7, #11]
 8007d82:	3301      	adds	r3, #1
 8007d84:	72fb      	strb	r3, [r7, #11]
          break;
 8007d86:	e089      	b.n	8007e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00b      	beq.n	8007dac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	7c12      	ldrb	r2, [r2, #16]
 8007da0:	f107 0108 	add.w	r1, r7, #8
 8007da4:	4610      	mov	r0, r2
 8007da6:	4798      	blx	r3
 8007da8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007daa:	e077      	b.n	8007e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fab1 	bl	8008316 <USBD_CtlError>
            err++;
 8007db4:	7afb      	ldrb	r3, [r7, #11]
 8007db6:	3301      	adds	r3, #1
 8007db8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dba:	e06f      	b.n	8007e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00b      	beq.n	8007de0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	7c12      	ldrb	r2, [r2, #16]
 8007dd4:	f107 0108 	add.w	r1, r7, #8
 8007dd8:	4610      	mov	r0, r2
 8007dda:	4798      	blx	r3
 8007ddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dde:	e05d      	b.n	8007e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fa97 	bl	8008316 <USBD_CtlError>
            err++;
 8007de8:	7afb      	ldrb	r3, [r7, #11]
 8007dea:	3301      	adds	r3, #1
 8007dec:	72fb      	strb	r3, [r7, #11]
          break;
 8007dee:	e055      	b.n	8007e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00b      	beq.n	8007e14 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	7c12      	ldrb	r2, [r2, #16]
 8007e08:	f107 0108 	add.w	r1, r7, #8
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	4798      	blx	r3
 8007e10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e12:	e043      	b.n	8007e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fa7d 	bl	8008316 <USBD_CtlError>
            err++;
 8007e1c:	7afb      	ldrb	r3, [r7, #11]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	72fb      	strb	r3, [r7, #11]
          break;
 8007e22:	e03b      	b.n	8007e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00b      	beq.n	8007e48 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e36:	695b      	ldr	r3, [r3, #20]
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	7c12      	ldrb	r2, [r2, #16]
 8007e3c:	f107 0108 	add.w	r1, r7, #8
 8007e40:	4610      	mov	r0, r2
 8007e42:	4798      	blx	r3
 8007e44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e46:	e029      	b.n	8007e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fa63 	bl	8008316 <USBD_CtlError>
            err++;
 8007e50:	7afb      	ldrb	r3, [r7, #11]
 8007e52:	3301      	adds	r3, #1
 8007e54:	72fb      	strb	r3, [r7, #11]
          break;
 8007e56:	e021      	b.n	8007e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e5e:	699b      	ldr	r3, [r3, #24]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00b      	beq.n	8007e7c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	7c12      	ldrb	r2, [r2, #16]
 8007e70:	f107 0108 	add.w	r1, r7, #8
 8007e74:	4610      	mov	r0, r2
 8007e76:	4798      	blx	r3
 8007e78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e7a:	e00f      	b.n	8007e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fa49 	bl	8008316 <USBD_CtlError>
            err++;
 8007e84:	7afb      	ldrb	r3, [r7, #11]
 8007e86:	3301      	adds	r3, #1
 8007e88:	72fb      	strb	r3, [r7, #11]
          break;
 8007e8a:	e007      	b.n	8007e9c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fa41 	bl	8008316 <USBD_CtlError>
          err++;
 8007e94:	7afb      	ldrb	r3, [r7, #11]
 8007e96:	3301      	adds	r3, #1
 8007e98:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007e9a:	bf00      	nop
      }
      break;
 8007e9c:	e037      	b.n	8007f0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	7c1b      	ldrb	r3, [r3, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d109      	bne.n	8007eba <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eae:	f107 0208 	add.w	r2, r7, #8
 8007eb2:	4610      	mov	r0, r2
 8007eb4:	4798      	blx	r3
 8007eb6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007eb8:	e029      	b.n	8007f0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007eba:	6839      	ldr	r1, [r7, #0]
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fa2a 	bl	8008316 <USBD_CtlError>
        err++;
 8007ec2:	7afb      	ldrb	r3, [r7, #11]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ec8:	e021      	b.n	8007f0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	7c1b      	ldrb	r3, [r3, #16]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d10d      	bne.n	8007eee <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eda:	f107 0208 	add.w	r2, r7, #8
 8007ede:	4610      	mov	r0, r2
 8007ee0:	4798      	blx	r3
 8007ee2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	2207      	movs	r2, #7
 8007eea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007eec:	e00f      	b.n	8007f0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007eee:	6839      	ldr	r1, [r7, #0]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fa10 	bl	8008316 <USBD_CtlError>
        err++;
 8007ef6:	7afb      	ldrb	r3, [r7, #11]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	72fb      	strb	r3, [r7, #11]
      break;
 8007efc:	e007      	b.n	8007f0e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007efe:	6839      	ldr	r1, [r7, #0]
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fa08 	bl	8008316 <USBD_CtlError>
      err++;
 8007f06:	7afb      	ldrb	r3, [r7, #11]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f0c:	bf00      	nop
  }

  if (err != 0U)
 8007f0e:	7afb      	ldrb	r3, [r7, #11]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d11e      	bne.n	8007f52 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	88db      	ldrh	r3, [r3, #6]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d016      	beq.n	8007f4a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007f1c:	893b      	ldrh	r3, [r7, #8]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00e      	beq.n	8007f40 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	88da      	ldrh	r2, [r3, #6]
 8007f26:	893b      	ldrh	r3, [r7, #8]
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	bf28      	it	cs
 8007f2c:	4613      	movcs	r3, r2
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f32:	893b      	ldrh	r3, [r7, #8]
 8007f34:	461a      	mov	r2, r3
 8007f36:	68f9      	ldr	r1, [r7, #12]
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fa69 	bl	8008410 <USBD_CtlSendData>
 8007f3e:	e009      	b.n	8007f54 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f9e7 	bl	8008316 <USBD_CtlError>
 8007f48:	e004      	b.n	8007f54 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 faa0 	bl	8008490 <USBD_CtlSendStatus>
 8007f50:	e000      	b.n	8007f54 <USBD_GetDescriptor+0x2cc>
    return;
 8007f52:	bf00      	nop
  }
}
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop

08007f5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	889b      	ldrh	r3, [r3, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d131      	bne.n	8007fd2 <USBD_SetAddress+0x76>
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	88db      	ldrh	r3, [r3, #6]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d12d      	bne.n	8007fd2 <USBD_SetAddress+0x76>
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	885b      	ldrh	r3, [r3, #2]
 8007f7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f7c:	d829      	bhi.n	8007fd2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	885b      	ldrh	r3, [r3, #2]
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d104      	bne.n	8007fa0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007f96:	6839      	ldr	r1, [r7, #0]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 f9bc 	bl	8008316 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f9e:	e01d      	b.n	8007fdc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	7bfa      	ldrb	r2, [r7, #15]
 8007fa4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fe57 	bl	8008c60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fa6c 	bl	8008490 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007fb8:	7bfb      	ldrb	r3, [r7, #15]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d004      	beq.n	8007fc8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fc6:	e009      	b.n	8007fdc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fd0:	e004      	b.n	8007fdc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 f99e 	bl	8008316 <USBD_CtlError>
  }
}
 8007fda:	bf00      	nop
 8007fdc:	bf00      	nop
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	885b      	ldrh	r3, [r3, #2]
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	4b4e      	ldr	r3, [pc, #312]	@ (8008134 <USBD_SetConfig+0x150>)
 8007ffa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ffc:	4b4d      	ldr	r3, [pc, #308]	@ (8008134 <USBD_SetConfig+0x150>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d905      	bls.n	8008010 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008004:	6839      	ldr	r1, [r7, #0]
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f985 	bl	8008316 <USBD_CtlError>
    return USBD_FAIL;
 800800c:	2303      	movs	r3, #3
 800800e:	e08c      	b.n	800812a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b02      	cmp	r3, #2
 800801a:	d002      	beq.n	8008022 <USBD_SetConfig+0x3e>
 800801c:	2b03      	cmp	r3, #3
 800801e:	d029      	beq.n	8008074 <USBD_SetConfig+0x90>
 8008020:	e075      	b.n	800810e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008022:	4b44      	ldr	r3, [pc, #272]	@ (8008134 <USBD_SetConfig+0x150>)
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d020      	beq.n	800806c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800802a:	4b42      	ldr	r3, [pc, #264]	@ (8008134 <USBD_SetConfig+0x150>)
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	461a      	mov	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008034:	4b3f      	ldr	r3, [pc, #252]	@ (8008134 <USBD_SetConfig+0x150>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7fe ffcf 	bl	8006fde <USBD_SetClassConfig>
 8008040:	4603      	mov	r3, r0
 8008042:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008044:	7bfb      	ldrb	r3, [r7, #15]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d008      	beq.n	800805c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f962 	bl	8008316 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2202      	movs	r2, #2
 8008056:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800805a:	e065      	b.n	8008128 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fa17 	bl	8008490 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2203      	movs	r2, #3
 8008066:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800806a:	e05d      	b.n	8008128 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fa0f 	bl	8008490 <USBD_CtlSendStatus>
      break;
 8008072:	e059      	b.n	8008128 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008074:	4b2f      	ldr	r3, [pc, #188]	@ (8008134 <USBD_SetConfig+0x150>)
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d112      	bne.n	80080a2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2202      	movs	r2, #2
 8008080:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008084:	4b2b      	ldr	r3, [pc, #172]	@ (8008134 <USBD_SetConfig+0x150>)
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	461a      	mov	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800808e:	4b29      	ldr	r3, [pc, #164]	@ (8008134 <USBD_SetConfig+0x150>)
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7fe ffbe 	bl	8007016 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f9f8 	bl	8008490 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080a0:	e042      	b.n	8008128 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80080a2:	4b24      	ldr	r3, [pc, #144]	@ (8008134 <USBD_SetConfig+0x150>)
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	461a      	mov	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d02a      	beq.n	8008106 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f7fe ffac 	bl	8007016 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80080be:	4b1d      	ldr	r3, [pc, #116]	@ (8008134 <USBD_SetConfig+0x150>)
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	461a      	mov	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080c8:	4b1a      	ldr	r3, [pc, #104]	@ (8008134 <USBD_SetConfig+0x150>)
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	4619      	mov	r1, r3
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f7fe ff85 	bl	8006fde <USBD_SetClassConfig>
 80080d4:	4603      	mov	r3, r0
 80080d6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00f      	beq.n	80080fe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80080de:	6839      	ldr	r1, [r7, #0]
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f918 	bl	8008316 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	4619      	mov	r1, r3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7fe ff91 	bl	8007016 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2202      	movs	r2, #2
 80080f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80080fc:	e014      	b.n	8008128 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f9c6 	bl	8008490 <USBD_CtlSendStatus>
      break;
 8008104:	e010      	b.n	8008128 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f9c2 	bl	8008490 <USBD_CtlSendStatus>
      break;
 800810c:	e00c      	b.n	8008128 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800810e:	6839      	ldr	r1, [r7, #0]
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f900 	bl	8008316 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008116:	4b07      	ldr	r3, [pc, #28]	@ (8008134 <USBD_SetConfig+0x150>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7fe ff7a 	bl	8007016 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008122:	2303      	movs	r3, #3
 8008124:	73fb      	strb	r3, [r7, #15]
      break;
 8008126:	bf00      	nop
  }

  return ret;
 8008128:	7bfb      	ldrb	r3, [r7, #15]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	200002b8 	.word	0x200002b8

08008138 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	88db      	ldrh	r3, [r3, #6]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d004      	beq.n	8008154 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f8e2 	bl	8008316 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008152:	e023      	b.n	800819c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800815a:	b2db      	uxtb	r3, r3
 800815c:	2b02      	cmp	r3, #2
 800815e:	dc02      	bgt.n	8008166 <USBD_GetConfig+0x2e>
 8008160:	2b00      	cmp	r3, #0
 8008162:	dc03      	bgt.n	800816c <USBD_GetConfig+0x34>
 8008164:	e015      	b.n	8008192 <USBD_GetConfig+0x5a>
 8008166:	2b03      	cmp	r3, #3
 8008168:	d00b      	beq.n	8008182 <USBD_GetConfig+0x4a>
 800816a:	e012      	b.n	8008192 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	3308      	adds	r3, #8
 8008176:	2201      	movs	r2, #1
 8008178:	4619      	mov	r1, r3
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f948 	bl	8008410 <USBD_CtlSendData>
        break;
 8008180:	e00c      	b.n	800819c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	3304      	adds	r3, #4
 8008186:	2201      	movs	r2, #1
 8008188:	4619      	mov	r1, r3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f940 	bl	8008410 <USBD_CtlSendData>
        break;
 8008190:	e004      	b.n	800819c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008192:	6839      	ldr	r1, [r7, #0]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f8be 	bl	8008316 <USBD_CtlError>
        break;
 800819a:	bf00      	nop
}
 800819c:	bf00      	nop
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	3b01      	subs	r3, #1
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d81e      	bhi.n	80081fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	88db      	ldrh	r3, [r3, #6]
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d004      	beq.n	80081ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f8a5 	bl	8008316 <USBD_CtlError>
        break;
 80081cc:	e01a      	b.n	8008204 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2201      	movs	r2, #1
 80081d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d005      	beq.n	80081ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	f043 0202 	orr.w	r2, r3, #2
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	330c      	adds	r3, #12
 80081ee:	2202      	movs	r2, #2
 80081f0:	4619      	mov	r1, r3
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f90c 	bl	8008410 <USBD_CtlSendData>
      break;
 80081f8:	e004      	b.n	8008204 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80081fa:	6839      	ldr	r1, [r7, #0]
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f88a 	bl	8008316 <USBD_CtlError>
      break;
 8008202:	bf00      	nop
  }
}
 8008204:	bf00      	nop
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	885b      	ldrh	r3, [r3, #2]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d107      	bne.n	800822e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f932 	bl	8008490 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800822c:	e013      	b.n	8008256 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	885b      	ldrh	r3, [r3, #2]
 8008232:	2b02      	cmp	r3, #2
 8008234:	d10b      	bne.n	800824e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	889b      	ldrh	r3, [r3, #4]
 800823a:	0a1b      	lsrs	r3, r3, #8
 800823c:	b29b      	uxth	r3, r3
 800823e:	b2da      	uxtb	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f922 	bl	8008490 <USBD_CtlSendStatus>
}
 800824c:	e003      	b.n	8008256 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f860 	bl	8008316 <USBD_CtlError>
}
 8008256:	bf00      	nop
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b082      	sub	sp, #8
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800826e:	b2db      	uxtb	r3, r3
 8008270:	3b01      	subs	r3, #1
 8008272:	2b02      	cmp	r3, #2
 8008274:	d80b      	bhi.n	800828e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	885b      	ldrh	r3, [r3, #2]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d10c      	bne.n	8008298 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f902 	bl	8008490 <USBD_CtlSendStatus>
      }
      break;
 800828c:	e004      	b.n	8008298 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f840 	bl	8008316 <USBD_CtlError>
      break;
 8008296:	e000      	b.n	800829a <USBD_ClrFeature+0x3c>
      break;
 8008298:	bf00      	nop
  }
}
 800829a:	bf00      	nop
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b084      	sub	sp, #16
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	781a      	ldrb	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	3301      	adds	r3, #1
 80082bc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	781a      	ldrb	r2, [r3, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	3301      	adds	r3, #1
 80082ca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f7ff fa3f 	bl	8007750 <SWAPBYTE>
 80082d2:	4603      	mov	r3, r0
 80082d4:	461a      	mov	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	3301      	adds	r3, #1
 80082de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	3301      	adds	r3, #1
 80082e4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f7ff fa32 	bl	8007750 <SWAPBYTE>
 80082ec:	4603      	mov	r3, r0
 80082ee:	461a      	mov	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	3301      	adds	r3, #1
 80082f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	3301      	adds	r3, #1
 80082fe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f7ff fa25 	bl	8007750 <SWAPBYTE>
 8008306:	4603      	mov	r3, r0
 8008308:	461a      	mov	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	80da      	strh	r2, [r3, #6]
}
 800830e:	bf00      	nop
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b082      	sub	sp, #8
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008320:	2180      	movs	r1, #128	@ 0x80
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fc32 	bl	8008b8c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008328:	2100      	movs	r1, #0
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fc2e 	bl	8008b8c <USBD_LL_StallEP>
}
 8008330:	bf00      	nop
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b086      	sub	sp, #24
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008344:	2300      	movs	r3, #0
 8008346:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d042      	beq.n	80083d4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008352:	6938      	ldr	r0, [r7, #16]
 8008354:	f000 f842 	bl	80083dc <USBD_GetLen>
 8008358:	4603      	mov	r3, r0
 800835a:	3301      	adds	r3, #1
 800835c:	005b      	lsls	r3, r3, #1
 800835e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008362:	d808      	bhi.n	8008376 <USBD_GetString+0x3e>
 8008364:	6938      	ldr	r0, [r7, #16]
 8008366:	f000 f839 	bl	80083dc <USBD_GetLen>
 800836a:	4603      	mov	r3, r0
 800836c:	3301      	adds	r3, #1
 800836e:	b29b      	uxth	r3, r3
 8008370:	005b      	lsls	r3, r3, #1
 8008372:	b29a      	uxth	r2, r3
 8008374:	e001      	b.n	800837a <USBD_GetString+0x42>
 8008376:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800837e:	7dfb      	ldrb	r3, [r7, #23]
 8008380:	68ba      	ldr	r2, [r7, #8]
 8008382:	4413      	add	r3, r2
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	7812      	ldrb	r2, [r2, #0]
 8008388:	701a      	strb	r2, [r3, #0]
  idx++;
 800838a:	7dfb      	ldrb	r3, [r7, #23]
 800838c:	3301      	adds	r3, #1
 800838e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008390:	7dfb      	ldrb	r3, [r7, #23]
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	4413      	add	r3, r2
 8008396:	2203      	movs	r2, #3
 8008398:	701a      	strb	r2, [r3, #0]
  idx++;
 800839a:	7dfb      	ldrb	r3, [r7, #23]
 800839c:	3301      	adds	r3, #1
 800839e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083a0:	e013      	b.n	80083ca <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80083a2:	7dfb      	ldrb	r3, [r7, #23]
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	4413      	add	r3, r2
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	7812      	ldrb	r2, [r2, #0]
 80083ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	3301      	adds	r3, #1
 80083b2:	613b      	str	r3, [r7, #16]
    idx++;
 80083b4:	7dfb      	ldrb	r3, [r7, #23]
 80083b6:	3301      	adds	r3, #1
 80083b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80083ba:	7dfb      	ldrb	r3, [r7, #23]
 80083bc:	68ba      	ldr	r2, [r7, #8]
 80083be:	4413      	add	r3, r2
 80083c0:	2200      	movs	r2, #0
 80083c2:	701a      	strb	r2, [r3, #0]
    idx++;
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
 80083c6:	3301      	adds	r3, #1
 80083c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1e7      	bne.n	80083a2 <USBD_GetString+0x6a>
 80083d2:	e000      	b.n	80083d6 <USBD_GetString+0x9e>
    return;
 80083d4:	bf00      	nop
  }
}
 80083d6:	3718      	adds	r7, #24
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083e4:	2300      	movs	r3, #0
 80083e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80083ec:	e005      	b.n	80083fa <USBD_GetLen+0x1e>
  {
    len++;
 80083ee:	7bfb      	ldrb	r3, [r7, #15]
 80083f0:	3301      	adds	r3, #1
 80083f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	3301      	adds	r3, #1
 80083f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1f5      	bne.n	80083ee <USBD_GetLen+0x12>
  }

  return len;
 8008402:	7bfb      	ldrb	r3, [r7, #15]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3714      	adds	r7, #20
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2202      	movs	r2, #2
 8008420:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	2100      	movs	r1, #0
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f000 fc2e 	bl	8008c9e <USBD_LL_Transmit>

  return USBD_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	2100      	movs	r1, #0
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f000 fc1d 	bl	8008c9e <USBD_LL_Transmit>

  return USBD_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b084      	sub	sp, #16
 8008472:	af00      	add	r7, sp, #0
 8008474:	60f8      	str	r0, [r7, #12]
 8008476:	60b9      	str	r1, [r7, #8]
 8008478:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	2100      	movs	r1, #0
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 fc2d 	bl	8008ce0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2204      	movs	r2, #4
 800849c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084a0:	2300      	movs	r3, #0
 80084a2:	2200      	movs	r2, #0
 80084a4:	2100      	movs	r1, #0
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fbf9 	bl	8008c9e <USBD_LL_Transmit>

  return USBD_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b082      	sub	sp, #8
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2205      	movs	r2, #5
 80084c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084c6:	2300      	movs	r3, #0
 80084c8:	2200      	movs	r2, #0
 80084ca:	2100      	movs	r1, #0
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fc07 	bl	8008ce0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80084e0:	2201      	movs	r2, #1
 80084e2:	490e      	ldr	r1, [pc, #56]	@ (800851c <MX_USB_DEVICE_Init+0x40>)
 80084e4:	480e      	ldr	r0, [pc, #56]	@ (8008520 <MX_USB_DEVICE_Init+0x44>)
 80084e6:	f7fe fcfd 	bl	8006ee4 <USBD_Init>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d001      	beq.n	80084f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80084f0:	f7f8 fee0 	bl	80012b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 80084f4:	490b      	ldr	r1, [pc, #44]	@ (8008524 <MX_USB_DEVICE_Init+0x48>)
 80084f6:	480a      	ldr	r0, [pc, #40]	@ (8008520 <MX_USB_DEVICE_Init+0x44>)
 80084f8:	f7fe fd24 	bl	8006f44 <USBD_RegisterClass>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008502:	f7f8 fed7 	bl	80012b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8008506:	4806      	ldr	r0, [pc, #24]	@ (8008520 <MX_USB_DEVICE_Init+0x44>)
 8008508:	f7fe fd52 	bl	8006fb0 <USBD_Start>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008512:	f7f8 fecf 	bl	80012b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008516:	bf00      	nop
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	20000140 	.word	0x20000140
 8008520:	200002bc 	.word	0x200002bc
 8008524:	20000064 	.word	0x20000064

08008528 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	4603      	mov	r3, r0
 8008530:	6039      	str	r1, [r7, #0]
 8008532:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2212      	movs	r2, #18
 8008538:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800853a:	4b03      	ldr	r3, [pc, #12]	@ (8008548 <USBD_HS_DeviceDescriptor+0x20>)
}
 800853c:	4618      	mov	r0, r3
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	2000015c 	.word	0x2000015c

0800854c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	4603      	mov	r3, r0
 8008554:	6039      	str	r1, [r7, #0]
 8008556:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	2204      	movs	r2, #4
 800855c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800855e:	4b03      	ldr	r3, [pc, #12]	@ (800856c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8008560:	4618      	mov	r0, r3
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	20000170 	.word	0x20000170

08008570 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	4603      	mov	r3, r0
 8008578:	6039      	str	r1, [r7, #0]
 800857a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800857c:	79fb      	ldrb	r3, [r7, #7]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d105      	bne.n	800858e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	4907      	ldr	r1, [pc, #28]	@ (80085a4 <USBD_HS_ProductStrDescriptor+0x34>)
 8008586:	4808      	ldr	r0, [pc, #32]	@ (80085a8 <USBD_HS_ProductStrDescriptor+0x38>)
 8008588:	f7ff fed6 	bl	8008338 <USBD_GetString>
 800858c:	e004      	b.n	8008598 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	4904      	ldr	r1, [pc, #16]	@ (80085a4 <USBD_HS_ProductStrDescriptor+0x34>)
 8008592:	4805      	ldr	r0, [pc, #20]	@ (80085a8 <USBD_HS_ProductStrDescriptor+0x38>)
 8008594:	f7ff fed0 	bl	8008338 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008598:	4b02      	ldr	r3, [pc, #8]	@ (80085a4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	20000598 	.word	0x20000598
 80085a8:	08008e1c 	.word	0x08008e1c

080085ac <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	4603      	mov	r3, r0
 80085b4:	6039      	str	r1, [r7, #0]
 80085b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085b8:	683a      	ldr	r2, [r7, #0]
 80085ba:	4904      	ldr	r1, [pc, #16]	@ (80085cc <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80085bc:	4804      	ldr	r0, [pc, #16]	@ (80085d0 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80085be:	f7ff febb 	bl	8008338 <USBD_GetString>
  return USBD_StrDesc;
 80085c2:	4b02      	ldr	r3, [pc, #8]	@ (80085cc <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3708      	adds	r7, #8
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	20000598 	.word	0x20000598
 80085d0:	08008e34 	.word	0x08008e34

080085d4 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	4603      	mov	r3, r0
 80085dc:	6039      	str	r1, [r7, #0]
 80085de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	221a      	movs	r2, #26
 80085e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80085e6:	f000 f843 	bl	8008670 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80085ea:	4b02      	ldr	r3, [pc, #8]	@ (80085f4 <USBD_HS_SerialStrDescriptor+0x20>)
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	20000174 	.word	0x20000174

080085f8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	4603      	mov	r3, r0
 8008600:	6039      	str	r1, [r7, #0]
 8008602:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008604:	79fb      	ldrb	r3, [r7, #7]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d105      	bne.n	8008616 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	4907      	ldr	r1, [pc, #28]	@ (800862c <USBD_HS_ConfigStrDescriptor+0x34>)
 800860e:	4808      	ldr	r0, [pc, #32]	@ (8008630 <USBD_HS_ConfigStrDescriptor+0x38>)
 8008610:	f7ff fe92 	bl	8008338 <USBD_GetString>
 8008614:	e004      	b.n	8008620 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	4904      	ldr	r1, [pc, #16]	@ (800862c <USBD_HS_ConfigStrDescriptor+0x34>)
 800861a:	4805      	ldr	r0, [pc, #20]	@ (8008630 <USBD_HS_ConfigStrDescriptor+0x38>)
 800861c:	f7ff fe8c 	bl	8008338 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008620:	4b02      	ldr	r3, [pc, #8]	@ (800862c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	20000598 	.word	0x20000598
 8008630:	08008e48 	.word	0x08008e48

08008634 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	4603      	mov	r3, r0
 800863c:	6039      	str	r1, [r7, #0]
 800863e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008640:	79fb      	ldrb	r3, [r7, #7]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d105      	bne.n	8008652 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	4907      	ldr	r1, [pc, #28]	@ (8008668 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800864a:	4808      	ldr	r0, [pc, #32]	@ (800866c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800864c:	f7ff fe74 	bl	8008338 <USBD_GetString>
 8008650:	e004      	b.n	800865c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	4904      	ldr	r1, [pc, #16]	@ (8008668 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8008656:	4805      	ldr	r0, [pc, #20]	@ (800866c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8008658:	f7ff fe6e 	bl	8008338 <USBD_GetString>
  }
  return USBD_StrDesc;
 800865c:	4b02      	ldr	r3, [pc, #8]	@ (8008668 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800865e:	4618      	mov	r0, r3
 8008660:	3708      	adds	r7, #8
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	20000598 	.word	0x20000598
 800866c:	08008e54 	.word	0x08008e54

08008670 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008676:	4b0f      	ldr	r3, [pc, #60]	@ (80086b4 <Get_SerialNum+0x44>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800867c:	4b0e      	ldr	r3, [pc, #56]	@ (80086b8 <Get_SerialNum+0x48>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008682:	4b0e      	ldr	r3, [pc, #56]	@ (80086bc <Get_SerialNum+0x4c>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4413      	add	r3, r2
 800868e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d009      	beq.n	80086aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008696:	2208      	movs	r2, #8
 8008698:	4909      	ldr	r1, [pc, #36]	@ (80086c0 <Get_SerialNum+0x50>)
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f000 f814 	bl	80086c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086a0:	2204      	movs	r2, #4
 80086a2:	4908      	ldr	r1, [pc, #32]	@ (80086c4 <Get_SerialNum+0x54>)
 80086a4:	68b8      	ldr	r0, [r7, #8]
 80086a6:	f000 f80f 	bl	80086c8 <IntToUnicode>
  }
}
 80086aa:	bf00      	nop
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	1fff7a10 	.word	0x1fff7a10
 80086b8:	1fff7a14 	.word	0x1fff7a14
 80086bc:	1fff7a18 	.word	0x1fff7a18
 80086c0:	20000176 	.word	0x20000176
 80086c4:	20000186 	.word	0x20000186

080086c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b087      	sub	sp, #28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	4613      	mov	r3, r2
 80086d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80086d6:	2300      	movs	r3, #0
 80086d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80086da:	2300      	movs	r3, #0
 80086dc:	75fb      	strb	r3, [r7, #23]
 80086de:	e027      	b.n	8008730 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	0f1b      	lsrs	r3, r3, #28
 80086e4:	2b09      	cmp	r3, #9
 80086e6:	d80b      	bhi.n	8008700 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	0f1b      	lsrs	r3, r3, #28
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	7dfb      	ldrb	r3, [r7, #23]
 80086f0:	005b      	lsls	r3, r3, #1
 80086f2:	4619      	mov	r1, r3
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	440b      	add	r3, r1
 80086f8:	3230      	adds	r2, #48	@ 0x30
 80086fa:	b2d2      	uxtb	r2, r2
 80086fc:	701a      	strb	r2, [r3, #0]
 80086fe:	e00a      	b.n	8008716 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	0f1b      	lsrs	r3, r3, #28
 8008704:	b2da      	uxtb	r2, r3
 8008706:	7dfb      	ldrb	r3, [r7, #23]
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	4619      	mov	r1, r3
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	440b      	add	r3, r1
 8008710:	3237      	adds	r2, #55	@ 0x37
 8008712:	b2d2      	uxtb	r2, r2
 8008714:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	011b      	lsls	r3, r3, #4
 800871a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800871c:	7dfb      	ldrb	r3, [r7, #23]
 800871e:	005b      	lsls	r3, r3, #1
 8008720:	3301      	adds	r3, #1
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	4413      	add	r3, r2
 8008726:	2200      	movs	r2, #0
 8008728:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800872a:	7dfb      	ldrb	r3, [r7, #23]
 800872c:	3301      	adds	r3, #1
 800872e:	75fb      	strb	r3, [r7, #23]
 8008730:	7dfa      	ldrb	r2, [r7, #23]
 8008732:	79fb      	ldrb	r3, [r7, #7]
 8008734:	429a      	cmp	r2, r3
 8008736:	d3d3      	bcc.n	80086e0 <IntToUnicode+0x18>
  }
}
 8008738:	bf00      	nop
 800873a:	bf00      	nop
 800873c:	371c      	adds	r7, #28
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
	...

08008748 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b08a      	sub	sp, #40	@ 0x28
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008750:	f107 0314 	add.w	r3, r7, #20
 8008754:	2200      	movs	r2, #0
 8008756:	601a      	str	r2, [r3, #0]
 8008758:	605a      	str	r2, [r3, #4]
 800875a:	609a      	str	r2, [r3, #8]
 800875c:	60da      	str	r2, [r3, #12]
 800875e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a33      	ldr	r2, [pc, #204]	@ (8008834 <HAL_PCD_MspInit+0xec>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d15f      	bne.n	800882a <HAL_PCD_MspInit+0xe2>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800876a:	2300      	movs	r3, #0
 800876c:	613b      	str	r3, [r7, #16]
 800876e:	4b32      	ldr	r3, [pc, #200]	@ (8008838 <HAL_PCD_MspInit+0xf0>)
 8008770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008772:	4a31      	ldr	r2, [pc, #196]	@ (8008838 <HAL_PCD_MspInit+0xf0>)
 8008774:	f043 0301 	orr.w	r3, r3, #1
 8008778:	6313      	str	r3, [r2, #48]	@ 0x30
 800877a:	4b2f      	ldr	r3, [pc, #188]	@ (8008838 <HAL_PCD_MspInit+0xf0>)
 800877c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	613b      	str	r3, [r7, #16]
 8008784:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008786:	2300      	movs	r3, #0
 8008788:	60fb      	str	r3, [r7, #12]
 800878a:	4b2b      	ldr	r3, [pc, #172]	@ (8008838 <HAL_PCD_MspInit+0xf0>)
 800878c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800878e:	4a2a      	ldr	r2, [pc, #168]	@ (8008838 <HAL_PCD_MspInit+0xf0>)
 8008790:	f043 0302 	orr.w	r3, r3, #2
 8008794:	6313      	str	r3, [r2, #48]	@ 0x30
 8008796:	4b28      	ldr	r3, [pc, #160]	@ (8008838 <HAL_PCD_MspInit+0xf0>)
 8008798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800879a:	f003 0302 	and.w	r3, r3, #2
 800879e:	60fb      	str	r3, [r7, #12]
 80087a0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> USB_OTG_HS_SOF
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80087a2:	2310      	movs	r3, #16
 80087a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087a6:	2302      	movs	r3, #2
 80087a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087aa:	2300      	movs	r3, #0
 80087ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087ae:	2303      	movs	r3, #3
 80087b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80087b2:	230c      	movs	r3, #12
 80087b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087b6:	f107 0314 	add.w	r3, r7, #20
 80087ba:	4619      	mov	r1, r3
 80087bc:	481f      	ldr	r0, [pc, #124]	@ (800883c <HAL_PCD_MspInit+0xf4>)
 80087be:	f7fa fa75 	bl	8002cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80087c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80087c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80087c8:	2300      	movs	r3, #0
 80087ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087cc:	2300      	movs	r3, #0
 80087ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80087d0:	f107 0314 	add.w	r3, r7, #20
 80087d4:	4619      	mov	r1, r3
 80087d6:	481a      	ldr	r0, [pc, #104]	@ (8008840 <HAL_PCD_MspInit+0xf8>)
 80087d8:	f7fa fa68 	bl	8002cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80087dc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80087e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087e2:	2302      	movs	r3, #2
 80087e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087e6:	2300      	movs	r3, #0
 80087e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087ea:	2303      	movs	r3, #3
 80087ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80087ee:	230c      	movs	r3, #12
 80087f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80087f2:	f107 0314 	add.w	r3, r7, #20
 80087f6:	4619      	mov	r1, r3
 80087f8:	4811      	ldr	r0, [pc, #68]	@ (8008840 <HAL_PCD_MspInit+0xf8>)
 80087fa:	f7fa fa57 	bl	8002cac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80087fe:	2300      	movs	r3, #0
 8008800:	60bb      	str	r3, [r7, #8]
 8008802:	4b0d      	ldr	r3, [pc, #52]	@ (8008838 <HAL_PCD_MspInit+0xf0>)
 8008804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008806:	4a0c      	ldr	r2, [pc, #48]	@ (8008838 <HAL_PCD_MspInit+0xf0>)
 8008808:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800880c:	6313      	str	r3, [r2, #48]	@ 0x30
 800880e:	4b0a      	ldr	r3, [pc, #40]	@ (8008838 <HAL_PCD_MspInit+0xf0>)
 8008810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008812:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008816:	60bb      	str	r3, [r7, #8]
 8008818:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800881a:	2200      	movs	r2, #0
 800881c:	2100      	movs	r1, #0
 800881e:	204d      	movs	r0, #77	@ 0x4d
 8008820:	f7f9 fe9d 	bl	800255e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8008824:	204d      	movs	r0, #77	@ 0x4d
 8008826:	f7f9 feb6 	bl	8002596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800882a:	bf00      	nop
 800882c:	3728      	adds	r7, #40	@ 0x28
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	40040000 	.word	0x40040000
 8008838:	40023800 	.word	0x40023800
 800883c:	40020000 	.word	0x40020000
 8008840:	40020400 	.word	0x40020400

08008844 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008858:	4619      	mov	r1, r3
 800885a:	4610      	mov	r0, r2
 800885c:	f7fe fbf5 	bl	800704a <USBD_LL_SetupStage>
}
 8008860:	bf00      	nop
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	460b      	mov	r3, r1
 8008872:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800887a:	78fa      	ldrb	r2, [r7, #3]
 800887c:	6879      	ldr	r1, [r7, #4]
 800887e:	4613      	mov	r3, r2
 8008880:	00db      	lsls	r3, r3, #3
 8008882:	4413      	add	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	440b      	add	r3, r1
 8008888:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	78fb      	ldrb	r3, [r7, #3]
 8008890:	4619      	mov	r1, r3
 8008892:	f7fe fc2f 	bl	80070f4 <USBD_LL_DataOutStage>
}
 8008896:	bf00      	nop
 8008898:	3708      	adds	r7, #8
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b082      	sub	sp, #8
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	460b      	mov	r3, r1
 80088a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80088b0:	78fa      	ldrb	r2, [r7, #3]
 80088b2:	6879      	ldr	r1, [r7, #4]
 80088b4:	4613      	mov	r3, r2
 80088b6:	00db      	lsls	r3, r3, #3
 80088b8:	4413      	add	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	440b      	add	r3, r1
 80088be:	3320      	adds	r3, #32
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	78fb      	ldrb	r3, [r7, #3]
 80088c4:	4619      	mov	r1, r3
 80088c6:	f7fe fcd1 	bl	800726c <USBD_LL_DataInStage>
}
 80088ca:	bf00      	nop
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7fe fe15 	bl	8007510 <USBD_LL_SOF>
}
 80088e6:	bf00      	nop
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b084      	sub	sp, #16
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80088f6:	2301      	movs	r3, #1
 80088f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	79db      	ldrb	r3, [r3, #7]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d102      	bne.n	8008908 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008902:	2300      	movs	r3, #0
 8008904:	73fb      	strb	r3, [r7, #15]
 8008906:	e008      	b.n	800891a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	79db      	ldrb	r3, [r3, #7]
 800890c:	2b02      	cmp	r3, #2
 800890e:	d102      	bne.n	8008916 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008910:	2301      	movs	r3, #1
 8008912:	73fb      	strb	r3, [r7, #15]
 8008914:	e001      	b.n	800891a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008916:	f7f8 fccd 	bl	80012b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008920:	7bfa      	ldrb	r2, [r7, #15]
 8008922:	4611      	mov	r1, r2
 8008924:	4618      	mov	r0, r3
 8008926:	f7fe fdaf 	bl	8007488 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008930:	4618      	mov	r0, r3
 8008932:	f7fe fd56 	bl	80073e2 <USBD_LL_Reset>
}
 8008936:	bf00      	nop
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
	...

08008940 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800894e:	4618      	mov	r0, r3
 8008950:	f7fe fdaa 	bl	80074a8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	6812      	ldr	r2, [r2, #0]
 8008962:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008966:	f043 0301 	orr.w	r3, r3, #1
 800896a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	7adb      	ldrb	r3, [r3, #11]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d005      	beq.n	8008980 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008974:	4b04      	ldr	r3, [pc, #16]	@ (8008988 <HAL_PCD_SuspendCallback+0x48>)
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	4a03      	ldr	r2, [pc, #12]	@ (8008988 <HAL_PCD_SuspendCallback+0x48>)
 800897a:	f043 0306 	orr.w	r3, r3, #6
 800897e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	e000ed00 	.word	0xe000ed00

0800898c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800899a:	4618      	mov	r0, r3
 800899c:	f7fe fda0 	bl	80074e0 <USBD_LL_Resume>
}
 80089a0:	bf00      	nop
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	460b      	mov	r3, r1
 80089b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089ba:	78fa      	ldrb	r2, [r7, #3]
 80089bc:	4611      	mov	r1, r2
 80089be:	4618      	mov	r0, r3
 80089c0:	f7fe fdf8 	bl	80075b4 <USBD_LL_IsoOUTIncomplete>
}
 80089c4:	bf00      	nop
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	460b      	mov	r3, r1
 80089d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089de:	78fa      	ldrb	r2, [r7, #3]
 80089e0:	4611      	mov	r1, r2
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7fe fdb4 	bl	8007550 <USBD_LL_IsoINIncomplete>
}
 80089e8:	bf00      	nop
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fe fe0a 	bl	8007618 <USBD_LL_DevConnected>
}
 8008a04:	bf00      	nop
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fe fe07 	bl	800762e <USBD_LL_DevDisconnected>
}
 8008a20:	bf00      	nop
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d140      	bne.n	8008aba <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8008a38:	4a22      	ldr	r2, [pc, #136]	@ (8008ac4 <USBD_LL_Init+0x9c>)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a20      	ldr	r2, [pc, #128]	@ (8008ac4 <USBD_LL_Init+0x9c>)
 8008a44:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8008a48:	4b1e      	ldr	r3, [pc, #120]	@ (8008ac4 <USBD_LL_Init+0x9c>)
 8008a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8008ac8 <USBD_LL_Init+0xa0>)
 8008a4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8008a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8008ac4 <USBD_LL_Init+0x9c>)
 8008a50:	2206      	movs	r2, #6
 8008a52:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8008a54:	4b1b      	ldr	r3, [pc, #108]	@ (8008ac4 <USBD_LL_Init+0x9c>)
 8008a56:	2202      	movs	r2, #2
 8008a58:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8008a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8008ac4 <USBD_LL_Init+0x9c>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8008a60:	4b18      	ldr	r3, [pc, #96]	@ (8008ac4 <USBD_LL_Init+0x9c>)
 8008a62:	2202      	movs	r2, #2
 8008a64:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = ENABLE;
 8008a66:	4b17      	ldr	r3, [pc, #92]	@ (8008ac4 <USBD_LL_Init+0x9c>)
 8008a68:	2201      	movs	r2, #1
 8008a6a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8008a6c:	4b15      	ldr	r3, [pc, #84]	@ (8008ac4 <USBD_LL_Init+0x9c>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8008a72:	4b14      	ldr	r3, [pc, #80]	@ (8008ac4 <USBD_LL_Init+0x9c>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8008a78:	4b12      	ldr	r3, [pc, #72]	@ (8008ac4 <USBD_LL_Init+0x9c>)
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8008a7e:	4b11      	ldr	r3, [pc, #68]	@ (8008ac4 <USBD_LL_Init+0x9c>)
 8008a80:	2200      	movs	r2, #0
 8008a82:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8008a84:	4b0f      	ldr	r3, [pc, #60]	@ (8008ac4 <USBD_LL_Init+0x9c>)
 8008a86:	2200      	movs	r2, #0
 8008a88:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8008a8a:	480e      	ldr	r0, [pc, #56]	@ (8008ac4 <USBD_LL_Init+0x9c>)
 8008a8c:	f7fa faeb 	bl	8003066 <HAL_PCD_Init>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8008a96:	f7f8 fc0d 	bl	80012b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8008a9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008a9e:	4809      	ldr	r0, [pc, #36]	@ (8008ac4 <USBD_LL_Init+0x9c>)
 8008aa0:	f7fb fcff 	bl	80044a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8008aa4:	2280      	movs	r2, #128	@ 0x80
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	4806      	ldr	r0, [pc, #24]	@ (8008ac4 <USBD_LL_Init+0x9c>)
 8008aaa:	f7fb fcb3 	bl	8004414 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8008aae:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8008ab2:	2101      	movs	r1, #1
 8008ab4:	4803      	ldr	r0, [pc, #12]	@ (8008ac4 <USBD_LL_Init+0x9c>)
 8008ab6:	f7fb fcad 	bl	8004414 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	20000798 	.word	0x20000798
 8008ac8:	40040000 	.word	0x40040000

08008acc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7fa fbce 	bl	8003284 <HAL_PCD_Start>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 f930 	bl	8008d54 <USBD_Get_USB_Status>
 8008af4:	4603      	mov	r3, r0
 8008af6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008af8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b084      	sub	sp, #16
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	4608      	mov	r0, r1
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	461a      	mov	r2, r3
 8008b10:	4603      	mov	r3, r0
 8008b12:	70fb      	strb	r3, [r7, #3]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70bb      	strb	r3, [r7, #2]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008b2a:	78bb      	ldrb	r3, [r7, #2]
 8008b2c:	883a      	ldrh	r2, [r7, #0]
 8008b2e:	78f9      	ldrb	r1, [r7, #3]
 8008b30:	f7fb f8a2 	bl	8003c78 <HAL_PCD_EP_Open>
 8008b34:	4603      	mov	r3, r0
 8008b36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 f90a 	bl	8008d54 <USBD_Get_USB_Status>
 8008b40:	4603      	mov	r3, r0
 8008b42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b084      	sub	sp, #16
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
 8008b56:	460b      	mov	r3, r1
 8008b58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b68:	78fa      	ldrb	r2, [r7, #3]
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fb f8ed 	bl	8003d4c <HAL_PCD_EP_Close>
 8008b72:	4603      	mov	r3, r0
 8008b74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 f8eb 	bl	8008d54 <USBD_Get_USB_Status>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b82:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	460b      	mov	r3, r1
 8008b96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ba6:	78fa      	ldrb	r2, [r7, #3]
 8008ba8:	4611      	mov	r1, r2
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fb f98d 	bl	8003eca <HAL_PCD_EP_SetStall>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f000 f8cc 	bl	8008d54 <USBD_Get_USB_Status>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b084      	sub	sp, #16
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008be4:	78fa      	ldrb	r2, [r7, #3]
 8008be6:	4611      	mov	r1, r2
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7fb f9d1 	bl	8003f90 <HAL_PCD_EP_ClrStall>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bf2:	7bfb      	ldrb	r3, [r7, #15]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f000 f8ad 	bl	8008d54 <USBD_Get_USB_Status>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	460b      	mov	r3, r1
 8008c12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	da0b      	bge.n	8008c3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c24:	78fb      	ldrb	r3, [r7, #3]
 8008c26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c2a:	68f9      	ldr	r1, [r7, #12]
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	00db      	lsls	r3, r3, #3
 8008c30:	4413      	add	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	440b      	add	r3, r1
 8008c36:	3316      	adds	r3, #22
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	e00b      	b.n	8008c54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c3c:	78fb      	ldrb	r3, [r7, #3]
 8008c3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c42:	68f9      	ldr	r1, [r7, #12]
 8008c44:	4613      	mov	r3, r2
 8008c46:	00db      	lsls	r3, r3, #3
 8008c48:	4413      	add	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	440b      	add	r3, r1
 8008c4e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008c52:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c7a:	78fa      	ldrb	r2, [r7, #3]
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fa ffd6 	bl	8003c30 <HAL_PCD_SetAddress>
 8008c84:	4603      	mov	r3, r0
 8008c86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f000 f862 	bl	8008d54 <USBD_Get_USB_Status>
 8008c90:	4603      	mov	r3, r0
 8008c92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c94:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b086      	sub	sp, #24
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	60f8      	str	r0, [r7, #12]
 8008ca6:	607a      	str	r2, [r7, #4]
 8008ca8:	603b      	str	r3, [r7, #0]
 8008caa:	460b      	mov	r3, r1
 8008cac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008cbc:	7af9      	ldrb	r1, [r7, #11]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	f7fb f8c8 	bl	8003e56 <HAL_PCD_EP_Transmit>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cca:	7dfb      	ldrb	r3, [r7, #23]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 f841 	bl	8008d54 <USBD_Get_USB_Status>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cd6:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3718      	adds	r7, #24
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	607a      	str	r2, [r7, #4]
 8008cea:	603b      	str	r3, [r7, #0]
 8008cec:	460b      	mov	r3, r1
 8008cee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008cfe:	7af9      	ldrb	r1, [r7, #11]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	f7fb f86c 	bl	8003de0 <HAL_PCD_EP_Receive>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d0c:	7dfb      	ldrb	r3, [r7, #23]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 f820 	bl	8008d54 <USBD_Get_USB_Status>
 8008d14:	4603      	mov	r3, r0
 8008d16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d18:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3718      	adds	r7, #24
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
	...

08008d24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d2c:	4b03      	ldr	r3, [pc, #12]	@ (8008d3c <USBD_static_malloc+0x18>)
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	20000c7c 	.word	0x20000c7c

08008d40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]

}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d62:	79fb      	ldrb	r3, [r7, #7]
 8008d64:	2b03      	cmp	r3, #3
 8008d66:	d817      	bhi.n	8008d98 <USBD_Get_USB_Status+0x44>
 8008d68:	a201      	add	r2, pc, #4	@ (adr r2, 8008d70 <USBD_Get_USB_Status+0x1c>)
 8008d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6e:	bf00      	nop
 8008d70:	08008d81 	.word	0x08008d81
 8008d74:	08008d87 	.word	0x08008d87
 8008d78:	08008d8d 	.word	0x08008d8d
 8008d7c:	08008d93 	.word	0x08008d93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	73fb      	strb	r3, [r7, #15]
    break;
 8008d84:	e00b      	b.n	8008d9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d86:	2303      	movs	r3, #3
 8008d88:	73fb      	strb	r3, [r7, #15]
    break;
 8008d8a:	e008      	b.n	8008d9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d90:	e005      	b.n	8008d9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d92:	2303      	movs	r3, #3
 8008d94:	73fb      	strb	r3, [r7, #15]
    break;
 8008d96:	e002      	b.n	8008d9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d9c:	bf00      	nop
  }
  return usb_status;
 8008d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3714      	adds	r7, #20
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <memset>:
 8008dac:	4402      	add	r2, r0
 8008dae:	4603      	mov	r3, r0
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d100      	bne.n	8008db6 <memset+0xa>
 8008db4:	4770      	bx	lr
 8008db6:	f803 1b01 	strb.w	r1, [r3], #1
 8008dba:	e7f9      	b.n	8008db0 <memset+0x4>

08008dbc <__libc_init_array>:
 8008dbc:	b570      	push	{r4, r5, r6, lr}
 8008dbe:	4d0d      	ldr	r5, [pc, #52]	@ (8008df4 <__libc_init_array+0x38>)
 8008dc0:	4c0d      	ldr	r4, [pc, #52]	@ (8008df8 <__libc_init_array+0x3c>)
 8008dc2:	1b64      	subs	r4, r4, r5
 8008dc4:	10a4      	asrs	r4, r4, #2
 8008dc6:	2600      	movs	r6, #0
 8008dc8:	42a6      	cmp	r6, r4
 8008dca:	d109      	bne.n	8008de0 <__libc_init_array+0x24>
 8008dcc:	4d0b      	ldr	r5, [pc, #44]	@ (8008dfc <__libc_init_array+0x40>)
 8008dce:	4c0c      	ldr	r4, [pc, #48]	@ (8008e00 <__libc_init_array+0x44>)
 8008dd0:	f000 f818 	bl	8008e04 <_init>
 8008dd4:	1b64      	subs	r4, r4, r5
 8008dd6:	10a4      	asrs	r4, r4, #2
 8008dd8:	2600      	movs	r6, #0
 8008dda:	42a6      	cmp	r6, r4
 8008ddc:	d105      	bne.n	8008dea <__libc_init_array+0x2e>
 8008dde:	bd70      	pop	{r4, r5, r6, pc}
 8008de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008de4:	4798      	blx	r3
 8008de6:	3601      	adds	r6, #1
 8008de8:	e7ee      	b.n	8008dc8 <__libc_init_array+0xc>
 8008dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dee:	4798      	blx	r3
 8008df0:	3601      	adds	r6, #1
 8008df2:	e7f2      	b.n	8008dda <__libc_init_array+0x1e>
 8008df4:	08008e8c 	.word	0x08008e8c
 8008df8:	08008e8c 	.word	0x08008e8c
 8008dfc:	08008e8c 	.word	0x08008e8c
 8008e00:	08008e90 	.word	0x08008e90

08008e04 <_init>:
 8008e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e06:	bf00      	nop
 8008e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e0a:	bc08      	pop	{r3}
 8008e0c:	469e      	mov	lr, r3
 8008e0e:	4770      	bx	lr

08008e10 <_fini>:
 8008e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e12:	bf00      	nop
 8008e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e16:	bc08      	pop	{r3}
 8008e18:	469e      	mov	lr, r3
 8008e1a:	4770      	bx	lr
