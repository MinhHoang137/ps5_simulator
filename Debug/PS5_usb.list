
PS5_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cb0  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08008e5c  08008e5c  00009e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ec4  08008ec4  0000a190  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008ec4  08008ec4  00009ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ecc  08008ecc  0000a190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ecc  08008ecc  00009ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ed0  08008ed0  00009ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000190  20000000  08008ed4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a190  2**0
                  CONTENTS
 10 .bss          00000b00  20000190  20000190  0000a190  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c90  20000c90  0000a190  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a190  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014402  00000000  00000000  0000a1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036da  00000000  00000000  0001e5c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  00021ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000be7  00000000  00000000  00022c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027385  00000000  00000000  0002383f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001645e  00000000  00000000  0004abc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2eb6  00000000  00000000  00061022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00143ed8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004100  00000000  00000000  00143f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0014801c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000190 	.word	0x20000190
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008e44 	.word	0x08008e44

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000194 	.word	0x20000194
 80001e8:	08008e44 	.word	0x08008e44

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	@ 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__aeabi_d2iz>:
 8000988:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800098c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000990:	d215      	bcs.n	80009be <__aeabi_d2iz+0x36>
 8000992:	d511      	bpl.n	80009b8 <__aeabi_d2iz+0x30>
 8000994:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000998:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800099c:	d912      	bls.n	80009c4 <__aeabi_d2iz+0x3c>
 800099e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ae:	fa23 f002 	lsr.w	r0, r3, r2
 80009b2:	bf18      	it	ne
 80009b4:	4240      	negne	r0, r0
 80009b6:	4770      	bx	lr
 80009b8:	f04f 0000 	mov.w	r0, #0
 80009bc:	4770      	bx	lr
 80009be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c2:	d105      	bne.n	80009d0 <__aeabi_d2iz+0x48>
 80009c4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009c8:	bf08      	it	eq
 80009ca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ce:	4770      	bx	lr
 80009d0:	f04f 0000 	mov.w	r0, #0
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <__aeabi_uldivmod>:
 80009d8:	b953      	cbnz	r3, 80009f0 <__aeabi_uldivmod+0x18>
 80009da:	b94a      	cbnz	r2, 80009f0 <__aeabi_uldivmod+0x18>
 80009dc:	2900      	cmp	r1, #0
 80009de:	bf08      	it	eq
 80009e0:	2800      	cmpeq	r0, #0
 80009e2:	bf1c      	itt	ne
 80009e4:	f04f 31ff 	movne.w	r1, #4294967295
 80009e8:	f04f 30ff 	movne.w	r0, #4294967295
 80009ec:	f000 b988 	b.w	8000d00 <__aeabi_idiv0>
 80009f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009f8:	f000 f806 	bl	8000a08 <__udivmoddi4>
 80009fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a04:	b004      	add	sp, #16
 8000a06:	4770      	bx	lr

08000a08 <__udivmoddi4>:
 8000a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a0c:	9d08      	ldr	r5, [sp, #32]
 8000a0e:	468e      	mov	lr, r1
 8000a10:	4604      	mov	r4, r0
 8000a12:	4688      	mov	r8, r1
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d14a      	bne.n	8000aae <__udivmoddi4+0xa6>
 8000a18:	428a      	cmp	r2, r1
 8000a1a:	4617      	mov	r7, r2
 8000a1c:	d962      	bls.n	8000ae4 <__udivmoddi4+0xdc>
 8000a1e:	fab2 f682 	clz	r6, r2
 8000a22:	b14e      	cbz	r6, 8000a38 <__udivmoddi4+0x30>
 8000a24:	f1c6 0320 	rsb	r3, r6, #32
 8000a28:	fa01 f806 	lsl.w	r8, r1, r6
 8000a2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a30:	40b7      	lsls	r7, r6
 8000a32:	ea43 0808 	orr.w	r8, r3, r8
 8000a36:	40b4      	lsls	r4, r6
 8000a38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a3c:	fa1f fc87 	uxth.w	ip, r7
 8000a40:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a44:	0c23      	lsrs	r3, r4, #16
 8000a46:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a4e:	fb01 f20c 	mul.w	r2, r1, ip
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d909      	bls.n	8000a6a <__udivmoddi4+0x62>
 8000a56:	18fb      	adds	r3, r7, r3
 8000a58:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a5c:	f080 80ea 	bcs.w	8000c34 <__udivmoddi4+0x22c>
 8000a60:	429a      	cmp	r2, r3
 8000a62:	f240 80e7 	bls.w	8000c34 <__udivmoddi4+0x22c>
 8000a66:	3902      	subs	r1, #2
 8000a68:	443b      	add	r3, r7
 8000a6a:	1a9a      	subs	r2, r3, r2
 8000a6c:	b2a3      	uxth	r3, r4
 8000a6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a7a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a7e:	459c      	cmp	ip, r3
 8000a80:	d909      	bls.n	8000a96 <__udivmoddi4+0x8e>
 8000a82:	18fb      	adds	r3, r7, r3
 8000a84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a88:	f080 80d6 	bcs.w	8000c38 <__udivmoddi4+0x230>
 8000a8c:	459c      	cmp	ip, r3
 8000a8e:	f240 80d3 	bls.w	8000c38 <__udivmoddi4+0x230>
 8000a92:	443b      	add	r3, r7
 8000a94:	3802      	subs	r0, #2
 8000a96:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a9a:	eba3 030c 	sub.w	r3, r3, ip
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	b11d      	cbz	r5, 8000aaa <__udivmoddi4+0xa2>
 8000aa2:	40f3      	lsrs	r3, r6
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	e9c5 3200 	strd	r3, r2, [r5]
 8000aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d905      	bls.n	8000abe <__udivmoddi4+0xb6>
 8000ab2:	b10d      	cbz	r5, 8000ab8 <__udivmoddi4+0xb0>
 8000ab4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4608      	mov	r0, r1
 8000abc:	e7f5      	b.n	8000aaa <__udivmoddi4+0xa2>
 8000abe:	fab3 f183 	clz	r1, r3
 8000ac2:	2900      	cmp	r1, #0
 8000ac4:	d146      	bne.n	8000b54 <__udivmoddi4+0x14c>
 8000ac6:	4573      	cmp	r3, lr
 8000ac8:	d302      	bcc.n	8000ad0 <__udivmoddi4+0xc8>
 8000aca:	4282      	cmp	r2, r0
 8000acc:	f200 8105 	bhi.w	8000cda <__udivmoddi4+0x2d2>
 8000ad0:	1a84      	subs	r4, r0, r2
 8000ad2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	4690      	mov	r8, r2
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	d0e5      	beq.n	8000aaa <__udivmoddi4+0xa2>
 8000ade:	e9c5 4800 	strd	r4, r8, [r5]
 8000ae2:	e7e2      	b.n	8000aaa <__udivmoddi4+0xa2>
 8000ae4:	2a00      	cmp	r2, #0
 8000ae6:	f000 8090 	beq.w	8000c0a <__udivmoddi4+0x202>
 8000aea:	fab2 f682 	clz	r6, r2
 8000aee:	2e00      	cmp	r6, #0
 8000af0:	f040 80a4 	bne.w	8000c3c <__udivmoddi4+0x234>
 8000af4:	1a8a      	subs	r2, r1, r2
 8000af6:	0c03      	lsrs	r3, r0, #16
 8000af8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000afc:	b280      	uxth	r0, r0
 8000afe:	b2bc      	uxth	r4, r7
 8000b00:	2101      	movs	r1, #1
 8000b02:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b06:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b0e:	fb04 f20c 	mul.w	r2, r4, ip
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d907      	bls.n	8000b26 <__udivmoddi4+0x11e>
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b1c:	d202      	bcs.n	8000b24 <__udivmoddi4+0x11c>
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	f200 80e0 	bhi.w	8000ce4 <__udivmoddi4+0x2dc>
 8000b24:	46c4      	mov	ip, r8
 8000b26:	1a9b      	subs	r3, r3, r2
 8000b28:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b2c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b30:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b34:	fb02 f404 	mul.w	r4, r2, r4
 8000b38:	429c      	cmp	r4, r3
 8000b3a:	d907      	bls.n	8000b4c <__udivmoddi4+0x144>
 8000b3c:	18fb      	adds	r3, r7, r3
 8000b3e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b42:	d202      	bcs.n	8000b4a <__udivmoddi4+0x142>
 8000b44:	429c      	cmp	r4, r3
 8000b46:	f200 80ca 	bhi.w	8000cde <__udivmoddi4+0x2d6>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	1b1b      	subs	r3, r3, r4
 8000b4e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b52:	e7a5      	b.n	8000aa0 <__udivmoddi4+0x98>
 8000b54:	f1c1 0620 	rsb	r6, r1, #32
 8000b58:	408b      	lsls	r3, r1
 8000b5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b5e:	431f      	orrs	r7, r3
 8000b60:	fa0e f401 	lsl.w	r4, lr, r1
 8000b64:	fa20 f306 	lsr.w	r3, r0, r6
 8000b68:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b6c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b70:	4323      	orrs	r3, r4
 8000b72:	fa00 f801 	lsl.w	r8, r0, r1
 8000b76:	fa1f fc87 	uxth.w	ip, r7
 8000b7a:	fbbe f0f9 	udiv	r0, lr, r9
 8000b7e:	0c1c      	lsrs	r4, r3, #16
 8000b80:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b84:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b88:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b8c:	45a6      	cmp	lr, r4
 8000b8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x1a0>
 8000b94:	193c      	adds	r4, r7, r4
 8000b96:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b9a:	f080 809c 	bcs.w	8000cd6 <__udivmoddi4+0x2ce>
 8000b9e:	45a6      	cmp	lr, r4
 8000ba0:	f240 8099 	bls.w	8000cd6 <__udivmoddi4+0x2ce>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	443c      	add	r4, r7
 8000ba8:	eba4 040e 	sub.w	r4, r4, lr
 8000bac:	fa1f fe83 	uxth.w	lr, r3
 8000bb0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bb4:	fb09 4413 	mls	r4, r9, r3, r4
 8000bb8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000bbc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bc0:	45a4      	cmp	ip, r4
 8000bc2:	d908      	bls.n	8000bd6 <__udivmoddi4+0x1ce>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000bca:	f080 8082 	bcs.w	8000cd2 <__udivmoddi4+0x2ca>
 8000bce:	45a4      	cmp	ip, r4
 8000bd0:	d97f      	bls.n	8000cd2 <__udivmoddi4+0x2ca>
 8000bd2:	3b02      	subs	r3, #2
 8000bd4:	443c      	add	r4, r7
 8000bd6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bda:	eba4 040c 	sub.w	r4, r4, ip
 8000bde:	fba0 ec02 	umull	lr, ip, r0, r2
 8000be2:	4564      	cmp	r4, ip
 8000be4:	4673      	mov	r3, lr
 8000be6:	46e1      	mov	r9, ip
 8000be8:	d362      	bcc.n	8000cb0 <__udivmoddi4+0x2a8>
 8000bea:	d05f      	beq.n	8000cac <__udivmoddi4+0x2a4>
 8000bec:	b15d      	cbz	r5, 8000c06 <__udivmoddi4+0x1fe>
 8000bee:	ebb8 0203 	subs.w	r2, r8, r3
 8000bf2:	eb64 0409 	sbc.w	r4, r4, r9
 8000bf6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bfa:	fa22 f301 	lsr.w	r3, r2, r1
 8000bfe:	431e      	orrs	r6, r3
 8000c00:	40cc      	lsrs	r4, r1
 8000c02:	e9c5 6400 	strd	r6, r4, [r5]
 8000c06:	2100      	movs	r1, #0
 8000c08:	e74f      	b.n	8000aaa <__udivmoddi4+0xa2>
 8000c0a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c0e:	0c01      	lsrs	r1, r0, #16
 8000c10:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c14:	b280      	uxth	r0, r0
 8000c16:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	4638      	mov	r0, r7
 8000c1e:	463c      	mov	r4, r7
 8000c20:	46b8      	mov	r8, r7
 8000c22:	46be      	mov	lr, r7
 8000c24:	2620      	movs	r6, #32
 8000c26:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c2a:	eba2 0208 	sub.w	r2, r2, r8
 8000c2e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c32:	e766      	b.n	8000b02 <__udivmoddi4+0xfa>
 8000c34:	4601      	mov	r1, r0
 8000c36:	e718      	b.n	8000a6a <__udivmoddi4+0x62>
 8000c38:	4610      	mov	r0, r2
 8000c3a:	e72c      	b.n	8000a96 <__udivmoddi4+0x8e>
 8000c3c:	f1c6 0220 	rsb	r2, r6, #32
 8000c40:	fa2e f302 	lsr.w	r3, lr, r2
 8000c44:	40b7      	lsls	r7, r6
 8000c46:	40b1      	lsls	r1, r6
 8000c48:	fa20 f202 	lsr.w	r2, r0, r2
 8000c4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c50:	430a      	orrs	r2, r1
 8000c52:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c56:	b2bc      	uxth	r4, r7
 8000c58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c5c:	0c11      	lsrs	r1, r2, #16
 8000c5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c62:	fb08 f904 	mul.w	r9, r8, r4
 8000c66:	40b0      	lsls	r0, r6
 8000c68:	4589      	cmp	r9, r1
 8000c6a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c6e:	b280      	uxth	r0, r0
 8000c70:	d93e      	bls.n	8000cf0 <__udivmoddi4+0x2e8>
 8000c72:	1879      	adds	r1, r7, r1
 8000c74:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c78:	d201      	bcs.n	8000c7e <__udivmoddi4+0x276>
 8000c7a:	4589      	cmp	r9, r1
 8000c7c:	d81f      	bhi.n	8000cbe <__udivmoddi4+0x2b6>
 8000c7e:	eba1 0109 	sub.w	r1, r1, r9
 8000c82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c86:	fb09 f804 	mul.w	r8, r9, r4
 8000c8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c8e:	b292      	uxth	r2, r2
 8000c90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c94:	4542      	cmp	r2, r8
 8000c96:	d229      	bcs.n	8000cec <__udivmoddi4+0x2e4>
 8000c98:	18ba      	adds	r2, r7, r2
 8000c9a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c9e:	d2c4      	bcs.n	8000c2a <__udivmoddi4+0x222>
 8000ca0:	4542      	cmp	r2, r8
 8000ca2:	d2c2      	bcs.n	8000c2a <__udivmoddi4+0x222>
 8000ca4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ca8:	443a      	add	r2, r7
 8000caa:	e7be      	b.n	8000c2a <__udivmoddi4+0x222>
 8000cac:	45f0      	cmp	r8, lr
 8000cae:	d29d      	bcs.n	8000bec <__udivmoddi4+0x1e4>
 8000cb0:	ebbe 0302 	subs.w	r3, lr, r2
 8000cb4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000cb8:	3801      	subs	r0, #1
 8000cba:	46e1      	mov	r9, ip
 8000cbc:	e796      	b.n	8000bec <__udivmoddi4+0x1e4>
 8000cbe:	eba7 0909 	sub.w	r9, r7, r9
 8000cc2:	4449      	add	r1, r9
 8000cc4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000cc8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ccc:	fb09 f804 	mul.w	r8, r9, r4
 8000cd0:	e7db      	b.n	8000c8a <__udivmoddi4+0x282>
 8000cd2:	4673      	mov	r3, lr
 8000cd4:	e77f      	b.n	8000bd6 <__udivmoddi4+0x1ce>
 8000cd6:	4650      	mov	r0, sl
 8000cd8:	e766      	b.n	8000ba8 <__udivmoddi4+0x1a0>
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e6fd      	b.n	8000ada <__udivmoddi4+0xd2>
 8000cde:	443b      	add	r3, r7
 8000ce0:	3a02      	subs	r2, #2
 8000ce2:	e733      	b.n	8000b4c <__udivmoddi4+0x144>
 8000ce4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	e71c      	b.n	8000b26 <__udivmoddi4+0x11e>
 8000cec:	4649      	mov	r1, r9
 8000cee:	e79c      	b.n	8000c2a <__udivmoddi4+0x222>
 8000cf0:	eba1 0109 	sub.w	r1, r1, r9
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cfa:	fb09 f804 	mul.w	r8, r9, r4
 8000cfe:	e7c4      	b.n	8000c8a <__udivmoddi4+0x282>

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <HAL_ADC_ConvCpltCallback>:
extern int mouse_x; // Biến toàn cục để lưu trữ giá trị dịch chuyển chuột theo trục X
extern int mouse_y; // Biến toàn cục để lưu trữ giá trị dịch chuyển chuột theo trục Y
extern int move_x; // Biến toàn cục để lưu trữ giá trị dịch chuyển joystick theo trục X
extern int move_y; // Biến toàn cục để lưu trữ giá trị dịch chuyển joystick theo trục Y

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
    if (hadc == &hadc1) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a13      	ldr	r2, [pc, #76]	@ (8000d5c <HAL_ADC_ConvCpltCallback+0x58>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d11f      	bne.n	8000d54 <HAL_ADC_ConvCpltCallback+0x50>
        move_x = ConvertADCValues(adc_buffer[0]); // Chuyển đổi giá trị ADC từ kênh 0
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 f82b 	bl	8000d74 <ConvertADCValues>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4a10      	ldr	r2, [pc, #64]	@ (8000d64 <HAL_ADC_ConvCpltCallback+0x60>)
 8000d22:	6013      	str	r3, [r2, #0]
        move_y = ConvertADCValues(adc_buffer[1]); // Chuyển đổi giá
 8000d24:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000d26:	885b      	ldrh	r3, [r3, #2]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 f823 	bl	8000d74 <ConvertADCValues>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4a0d      	ldr	r2, [pc, #52]	@ (8000d68 <HAL_ADC_ConvCpltCallback+0x64>)
 8000d32:	6013      	str	r3, [r2, #0]
        mouse_x = ConvertADCValues(adc_buffer[2]); // Chuyển đổi giá trị ADC từ kênh 2
 8000d34:	4b0a      	ldr	r3, [pc, #40]	@ (8000d60 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000d36:	889b      	ldrh	r3, [r3, #4]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 f81b 	bl	8000d74 <ConvertADCValues>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4a0a      	ldr	r2, [pc, #40]	@ (8000d6c <HAL_ADC_ConvCpltCallback+0x68>)
 8000d42:	6013      	str	r3, [r2, #0]
        mouse_y = ConvertADCValues(adc_buffer[3]); // Chuyển đổi giá trị ADC từ kênh 3
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000d46:	88db      	ldrh	r3, [r3, #6]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 f813 	bl	8000d74 <ConvertADCValues>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	4a07      	ldr	r2, [pc, #28]	@ (8000d70 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000d52:	6013      	str	r3, [r2, #0]
    }
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	200001b4 	.word	0x200001b4
 8000d60:	200001ac 	.word	0x200001ac
 8000d64:	200002a4 	.word	0x200002a4
 8000d68:	200002a8 	.word	0x200002a8
 8000d6c:	200002ac 	.word	0x200002ac
 8000d70:	200002b0 	.word	0x200002b0

08000d74 <ConvertADCValues>:



int ConvertADCValues(uint16_t value){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	80fb      	strh	r3, [r7, #6]
    int rawValue = (int)value; // Chuyển đổi giá trị ADC sang kiểu int
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	61bb      	str	r3, [r7, #24]
    rawValue -= 2048; // Giả sử giá trị ADC nằm trong khoảng 0-4095, trừ đi 2048 để đưa về khoảng -2048 đến 2047
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000d88:	61bb      	str	r3, [r7, #24]
    int deadzone = 200; // Giả sử bạn muốn bỏ qua các giá trị nhỏ hơn 10
 8000d8a:	23c8      	movs	r3, #200	@ 0xc8
 8000d8c:	617b      	str	r3, [r7, #20]
    int upper_limit = 30;
 8000d8e:	231e      	movs	r3, #30
 8000d90:	613b      	str	r3, [r7, #16]
    double scale = upper_limit * 1.0 / 2048.0; 
 8000d92:	6938      	ldr	r0, [r7, #16]
 8000d94:	f7ff fb7c 	bl	8000490 <__aeabi_i2d>
 8000d98:	f04f 0200 	mov.w	r2, #0
 8000d9c:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <ConvertADCValues+0x90>)
 8000d9e:	f7ff fd0b 	bl	80007b8 <__aeabi_ddiv>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    if (abs(rawValue) < deadzone) {
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	bfb8      	it	lt
 8000db0:	425b      	neglt	r3, r3
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	dd01      	ble.n	8000dbc <ConvertADCValues+0x48>
        return 0; // Trả về 0 nếu giá trị nhỏ hơn deadzone
 8000db8:	2300      	movs	r3, #0
 8000dba:	e01e      	b.n	8000dfa <ConvertADCValues+0x86>
    }
    int converted_value = (int)(rawValue * scale);
 8000dbc:	69b8      	ldr	r0, [r7, #24]
 8000dbe:	f7ff fb67 	bl	8000490 <__aeabi_i2d>
 8000dc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000dc6:	f7ff fbcd 	bl	8000564 <__aeabi_dmul>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	460b      	mov	r3, r1
 8000dce:	4610      	mov	r0, r2
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f7ff fdd9 	bl	8000988 <__aeabi_d2iz>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	61fb      	str	r3, [r7, #28]
    if (converted_value > upper_limit) {
 8000dda:	69fa      	ldr	r2, [r7, #28]
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	dd02      	ble.n	8000de8 <ConvertADCValues+0x74>
        converted_value = upper_limit; // Giới hạn giá trị tối đa là 127
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	61fb      	str	r3, [r7, #28]
 8000de6:	e007      	b.n	8000df8 <ConvertADCValues+0x84>
    } else if (converted_value < -upper_limit) {
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	425b      	negs	r3, r3
 8000dec:	69fa      	ldr	r2, [r7, #28]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	da02      	bge.n	8000df8 <ConvertADCValues+0x84>
        converted_value = -upper_limit; // Giới hạn giá trị tối thiểu là -127
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	425b      	negs	r3, r3
 8000df6:	61fb      	str	r3, [r7, #28]
    }
    return converted_value; // Trả về giá trị đã chuyển đổi
 8000df8:	69fb      	ldr	r3, [r7, #28]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3720      	adds	r7, #32
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40a00000 	.word	0x40a00000

08000e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b088      	sub	sp, #32
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0e:	f000 fd13 	bl	8001838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e12:	f000 f8b1 	bl	8000f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e16:	f000 f9df 	bl	80011d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e1a:	f000 f9bd 	bl	8001198 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000e1e:	f007 fb7d 	bl	800851c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000e22:	f000 f913 	bl	800104c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000e26:	f000 f98d 	bl	8001144 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE); // Bắt đầu chuyển đổi ADC với DMA
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	494a      	ldr	r1, [pc, #296]	@ (8000f58 <main+0x150>)
 8000e2e:	484b      	ldr	r0, [pc, #300]	@ (8000f5c <main+0x154>)
 8000e30:	f000 feec 	bl	8001c0c <HAL_ADC_Start_DMA>
  int8_t limit = 10;
 8000e34:	230a      	movs	r3, #10
 8000e36:	77fb      	strb	r3, [r7, #31]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    KeyboardReport_t keyboard_report = {0};
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	721a      	strb	r2, [r3, #8]
    keyboard_report.report_id = 0x01; // ID báo cáo luôn là 0x01
 8000e44:	2301      	movs	r3, #1
 8000e46:	733b      	strb	r3, [r7, #12]
    MouseReport_t mouse_report = {0};
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	711a      	strb	r2, [r3, #4]
    mouse_report.report_id = 0x02; // ID báo cáo chuột là 0x02
 8000e50:	2302      	movs	r3, #2
 8000e52:	713b      	strb	r3, [r7, #4]
   if (move_x < -limit){
 8000e54:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e58:	425a      	negs	r2, r3
 8000e5a:	4b41      	ldr	r3, [pc, #260]	@ (8000f60 <main+0x158>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	dd06      	ble.n	8000e70 <main+0x68>
     AddKeyToReport(&keyboard_report, KEY_A);
 8000e62:	f107 030c 	add.w	r3, r7, #12
 8000e66:	2104      	movs	r1, #4
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 fa47 	bl	80012fc <AddKeyToReport>
 8000e6e:	e00b      	b.n	8000e88 <main+0x80>
   }
   else if (move_x > limit){
 8000e70:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8000e74:	4b3a      	ldr	r3, [pc, #232]	@ (8000f60 <main+0x158>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	da05      	bge.n	8000e88 <main+0x80>
     AddKeyToReport(&keyboard_report, KEY_D);
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	2107      	movs	r1, #7
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 fa3a 	bl	80012fc <AddKeyToReport>
   }
  if (move_y < -limit){
 8000e88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e8c:	425a      	negs	r2, r3
 8000e8e:	4b35      	ldr	r3, [pc, #212]	@ (8000f64 <main+0x15c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	dd06      	ble.n	8000ea4 <main+0x9c>
    AddKeyToReport(&keyboard_report, KEY_W);
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	211a      	movs	r1, #26
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 fa2d 	bl	80012fc <AddKeyToReport>
 8000ea2:	e00b      	b.n	8000ebc <main+0xb4>
  }
  else if (move_y > limit){
 8000ea4:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8000ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8000f64 <main+0x15c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	da05      	bge.n	8000ebc <main+0xb4>
    AddKeyToReport(&keyboard_report, KEY_S);
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	2116      	movs	r1, #22
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fa20 	bl	80012fc <AddKeyToReport>
  }
    CreateKeyboardReport(&keyboard_report); // Tạo báo cáo bàn phím từ các nút nhấn
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 fa63 	bl	800138c <CreateKeyboardReport>
    int res = USBD_HID_SendReport(&hUsbDeviceHS, (uint8_t*)&keyboard_report, sizeof(keyboard_report));
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	2209      	movs	r2, #9
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4826      	ldr	r0, [pc, #152]	@ (8000f68 <main+0x160>)
 8000ed0:	f005 ff82 	bl	8006dd8 <USBD_HID_SendReport>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	61bb      	str	r3, [r7, #24]

    if (res != USBD_OK) {
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d006      	beq.n	8000eec <main+0xe4>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET); // Bật đèn LED nếu gửi báo cáo không thành công
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ee4:	4821      	ldr	r0, [pc, #132]	@ (8000f6c <main+0x164>)
 8000ee6:	f002 f8c3 	bl	8003070 <HAL_GPIO_WritePin>
 8000eea:	e005      	b.n	8000ef8 <main+0xf0>
    }
     else {
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ef2:	481e      	ldr	r0, [pc, #120]	@ (8000f6c <main+0x164>)
 8000ef4:	f002 f8bc 	bl	8003070 <HAL_GPIO_WritePin>
     }       // Tắt đèn LED nếu gửi báo cáo thành công
    HAL_Delay(3);
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f000 fd0f 	bl	800191c <HAL_Delay>

    mouse_report.x = mouse_x; // Cập nhật giá trị dịch chuyển chuột theo trục X
 8000efe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f70 <main+0x168>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	71bb      	strb	r3, [r7, #6]
    mouse_report.y = mouse_y; // Cập nhật giá trị dịch chuyển chuột theo trục Y
 8000f06:	4b1b      	ldr	r3, [pc, #108]	@ (8000f74 <main+0x16c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	b25b      	sxtb	r3, r3
 8000f0c:	71fb      	strb	r3, [r7, #7]
    mouse_report.wheel = 0; // Không sử dụng cuộn chuột trong trường hợp này
 8000f0e:	2300      	movs	r3, #0
 8000f10:	723b      	strb	r3, [r7, #8]
    mouse_report.buttons = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	717b      	strb	r3, [r7, #5]
    CreateMouseReport(&mouse_report); // Tạo báo cáo chuột từ các nút nhấn
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 fabb 	bl	8001494 <CreateMouseReport>
    res = USBD_HID_SendReport(&hUsbDeviceHS, (uint8_t*)&mouse_report, sizeof(mouse_report));
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2205      	movs	r2, #5
 8000f22:	4619      	mov	r1, r3
 8000f24:	4810      	ldr	r0, [pc, #64]	@ (8000f68 <main+0x160>)
 8000f26:	f005 ff57 	bl	8006dd8 <USBD_HID_SendReport>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	61bb      	str	r3, [r7, #24]
    if (res != USBD_OK) {
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d006      	beq.n	8000f42 <main+0x13a>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET); // Bật đèn LED nếu gửi báo cáo không thành công
 8000f34:	2201      	movs	r2, #1
 8000f36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f3a:	480c      	ldr	r0, [pc, #48]	@ (8000f6c <main+0x164>)
 8000f3c:	f002 f898 	bl	8003070 <HAL_GPIO_WritePin>
 8000f40:	e005      	b.n	8000f4e <main+0x146>
    }
    else {
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET); // Tắt đèn LED nếu gửi báo cáo thành công
 8000f42:	2200      	movs	r2, #0
 8000f44:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f48:	4808      	ldr	r0, [pc, #32]	@ (8000f6c <main+0x164>)
 8000f4a:	f002 f891 	bl	8003070 <HAL_GPIO_WritePin>
//     snprintf(msg, sizeof(msg), "ADC: %d %d %d %d\r\n",
//              move_x, move_y, mouse_x, mouse_y);
//
//     // Gửi qua UART1
//     HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    HAL_Delay(3);
 8000f4e:	2003      	movs	r0, #3
 8000f50:	f000 fce4 	bl	800191c <HAL_Delay>
  {
 8000f54:	e770      	b.n	8000e38 <main+0x30>
 8000f56:	bf00      	nop
 8000f58:	200001ac 	.word	0x200001ac
 8000f5c:	200001b4 	.word	0x200001b4
 8000f60:	200002a4 	.word	0x200002a4
 8000f64:	200002a8 	.word	0x200002a8
 8000f68:	200002bc 	.word	0x200002bc
 8000f6c:	40021800 	.word	0x40021800
 8000f70:	200002ac 	.word	0x200002ac
 8000f74:	200002b0 	.word	0x200002b0

08000f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b094      	sub	sp, #80	@ 0x50
 8000f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7e:	f107 0320 	add.w	r3, r7, #32
 8000f82:	2230      	movs	r2, #48	@ 0x30
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f007 ff30 	bl	8008dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	4b28      	ldr	r3, [pc, #160]	@ (8001044 <SystemClock_Config+0xcc>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa4:	4a27      	ldr	r2, [pc, #156]	@ (8001044 <SystemClock_Config+0xcc>)
 8000fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000faa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fac:	4b25      	ldr	r3, [pc, #148]	@ (8001044 <SystemClock_Config+0xcc>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb8:	2300      	movs	r3, #0
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	4b22      	ldr	r3, [pc, #136]	@ (8001048 <SystemClock_Config+0xd0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a21      	ldr	r2, [pc, #132]	@ (8001048 <SystemClock_Config+0xd0>)
 8000fc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001048 <SystemClock_Config+0xd0>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fe2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fe8:	2304      	movs	r3, #4
 8000fea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fec:	23a8      	movs	r3, #168	@ 0xa8
 8000fee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff8:	f107 0320 	add.w	r3, r7, #32
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f003 fa8b 	bl	8004518 <HAL_RCC_OscConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001008:	f000 f972 	bl	80012f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100c:	230f      	movs	r3, #15
 800100e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001010:	2302      	movs	r3, #2
 8001012:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001018:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800101c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800101e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001022:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	2105      	movs	r1, #5
 800102a:	4618      	mov	r0, r3
 800102c:	f003 fcec 	bl	8004a08 <HAL_RCC_ClockConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001036:	f000 f95b 	bl	80012f0 <Error_Handler>
  }
}
 800103a:	bf00      	nop
 800103c:	3750      	adds	r7, #80	@ 0x50
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800
 8001048:	40007000 	.word	0x40007000

0800104c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001052:	463b      	mov	r3, r7
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800105e:	4b36      	ldr	r3, [pc, #216]	@ (8001138 <MX_ADC1_Init+0xec>)
 8001060:	4a36      	ldr	r2, [pc, #216]	@ (800113c <MX_ADC1_Init+0xf0>)
 8001062:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001064:	4b34      	ldr	r3, [pc, #208]	@ (8001138 <MX_ADC1_Init+0xec>)
 8001066:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800106a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800106c:	4b32      	ldr	r3, [pc, #200]	@ (8001138 <MX_ADC1_Init+0xec>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001072:	4b31      	ldr	r3, [pc, #196]	@ (8001138 <MX_ADC1_Init+0xec>)
 8001074:	2201      	movs	r2, #1
 8001076:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001078:	4b2f      	ldr	r3, [pc, #188]	@ (8001138 <MX_ADC1_Init+0xec>)
 800107a:	2201      	movs	r2, #1
 800107c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800107e:	4b2e      	ldr	r3, [pc, #184]	@ (8001138 <MX_ADC1_Init+0xec>)
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001086:	4b2c      	ldr	r3, [pc, #176]	@ (8001138 <MX_ADC1_Init+0xec>)
 8001088:	2200      	movs	r2, #0
 800108a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800108c:	4b2a      	ldr	r3, [pc, #168]	@ (8001138 <MX_ADC1_Init+0xec>)
 800108e:	4a2c      	ldr	r2, [pc, #176]	@ (8001140 <MX_ADC1_Init+0xf4>)
 8001090:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001092:	4b29      	ldr	r3, [pc, #164]	@ (8001138 <MX_ADC1_Init+0xec>)
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001098:	4b27      	ldr	r3, [pc, #156]	@ (8001138 <MX_ADC1_Init+0xec>)
 800109a:	2204      	movs	r2, #4
 800109c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800109e:	4b26      	ldr	r3, [pc, #152]	@ (8001138 <MX_ADC1_Init+0xec>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010a6:	4b24      	ldr	r3, [pc, #144]	@ (8001138 <MX_ADC1_Init+0xec>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ac:	4822      	ldr	r0, [pc, #136]	@ (8001138 <MX_ADC1_Init+0xec>)
 80010ae:	f000 fc59 	bl	8001964 <HAL_ADC_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010b8:	f000 f91a 	bl	80012f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010bc:	2306      	movs	r3, #6
 80010be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80010c4:	2307      	movs	r3, #7
 80010c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	4619      	mov	r1, r3
 80010cc:	481a      	ldr	r0, [pc, #104]	@ (8001138 <MX_ADC1_Init+0xec>)
 80010ce:	f000 fecf 	bl	8001e70 <HAL_ADC_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010d8:	f000 f90a 	bl	80012f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80010dc:	2307      	movs	r3, #7
 80010de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e4:	463b      	mov	r3, r7
 80010e6:	4619      	mov	r1, r3
 80010e8:	4813      	ldr	r0, [pc, #76]	@ (8001138 <MX_ADC1_Init+0xec>)
 80010ea:	f000 fec1 	bl	8001e70 <HAL_ADC_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010f4:	f000 f8fc 	bl	80012f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010f8:	2303      	movs	r3, #3
 80010fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80010fc:	2303      	movs	r3, #3
 80010fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001100:	463b      	mov	r3, r7
 8001102:	4619      	mov	r1, r3
 8001104:	480c      	ldr	r0, [pc, #48]	@ (8001138 <MX_ADC1_Init+0xec>)
 8001106:	f000 feb3 	bl	8001e70 <HAL_ADC_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001110:	f000 f8ee 	bl	80012f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001114:	2305      	movs	r3, #5
 8001116:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001118:	2304      	movs	r3, #4
 800111a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111c:	463b      	mov	r3, r7
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	@ (8001138 <MX_ADC1_Init+0xec>)
 8001122:	f000 fea5 	bl	8001e70 <HAL_ADC_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800112c:	f000 f8e0 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200001b4 	.word	0x200001b4
 800113c:	40012000 	.word	0x40012000
 8001140:	0f000001 	.word	0x0f000001

08001144 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001148:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <MX_USART1_UART_Init+0x4c>)
 800114a:	4a12      	ldr	r2, [pc, #72]	@ (8001194 <MX_USART1_UART_Init+0x50>)
 800114c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800114e:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <MX_USART1_UART_Init+0x4c>)
 8001150:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001154:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001156:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <MX_USART1_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800115c:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <MX_USART1_UART_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <MX_USART1_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001168:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <MX_USART1_UART_Init+0x4c>)
 800116a:	220c      	movs	r2, #12
 800116c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116e:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <MX_USART1_UART_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <MX_USART1_UART_Init+0x4c>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	@ (8001190 <MX_USART1_UART_Init+0x4c>)
 800117c:	f003 fe64 	bl	8004e48 <HAL_UART_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001186:	f000 f8b3 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2000025c 	.word	0x2000025c
 8001194:	40011000 	.word	0x40011000

08001198 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <MX_DMA_Init+0x3c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a0b      	ldr	r2, [pc, #44]	@ (80011d4 <MX_DMA_Init+0x3c>)
 80011a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <MX_DMA_Init+0x3c>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	203c      	movs	r0, #60	@ 0x3c
 80011c0:	f001 f9eb 	bl	800259a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80011c4:	203c      	movs	r0, #60	@ 0x3c
 80011c6:	f001 fa04 	bl	80025d2 <HAL_NVIC_EnableIRQ>

}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800

080011d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	@ 0x28
 80011dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b3b      	ldr	r3, [pc, #236]	@ (80012e0 <MX_GPIO_Init+0x108>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	4a3a      	ldr	r2, [pc, #232]	@ (80012e0 <MX_GPIO_Init+0x108>)
 80011f8:	f043 0320 	orr.w	r3, r3, #32
 80011fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fe:	4b38      	ldr	r3, [pc, #224]	@ (80012e0 <MX_GPIO_Init+0x108>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	f003 0320 	and.w	r3, r3, #32
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b34      	ldr	r3, [pc, #208]	@ (80012e0 <MX_GPIO_Init+0x108>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a33      	ldr	r2, [pc, #204]	@ (80012e0 <MX_GPIO_Init+0x108>)
 8001214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b31      	ldr	r3, [pc, #196]	@ (80012e0 <MX_GPIO_Init+0x108>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	4b2d      	ldr	r3, [pc, #180]	@ (80012e0 <MX_GPIO_Init+0x108>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	4a2c      	ldr	r2, [pc, #176]	@ (80012e0 <MX_GPIO_Init+0x108>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6313      	str	r3, [r2, #48]	@ 0x30
 8001236:	4b2a      	ldr	r3, [pc, #168]	@ (80012e0 <MX_GPIO_Init+0x108>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b26      	ldr	r3, [pc, #152]	@ (80012e0 <MX_GPIO_Init+0x108>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a25      	ldr	r2, [pc, #148]	@ (80012e0 <MX_GPIO_Init+0x108>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b23      	ldr	r3, [pc, #140]	@ (80012e0 <MX_GPIO_Init+0x108>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	4b1f      	ldr	r3, [pc, #124]	@ (80012e0 <MX_GPIO_Init+0x108>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	4a1e      	ldr	r2, [pc, #120]	@ (80012e0 <MX_GPIO_Init+0x108>)
 8001268:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800126c:	6313      	str	r3, [r2, #48]	@ 0x30
 800126e:	4b1c      	ldr	r3, [pc, #112]	@ (80012e0 <MX_GPIO_Init+0x108>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001280:	4818      	ldr	r0, [pc, #96]	@ (80012e4 <MX_GPIO_Init+0x10c>)
 8001282:	f001 fef5 	bl	8003070 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : btnE_Pin btnQ_Pin btnTab_Pin btnZ_Pin
                           btn1_Pin btn2_Pin btn3_Pin btn4_Pin
                           btnSpace_Pin btnX_Pin leftMouse_Pin rightMouse_Pin
                           btnL_Pin btnEsc_Pin */
  GPIO_InitStruct.Pin = btnE_Pin|btnQ_Pin|btnTab_Pin|btnZ_Pin
 8001286:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 800128a:	617b      	str	r3, [r7, #20]
                          |btn1_Pin|btn2_Pin|btn3_Pin|btn4_Pin
                          |btnSpace_Pin|btnX_Pin|leftMouse_Pin|rightMouse_Pin
                          |btnL_Pin|btnEsc_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001290:	2302      	movs	r3, #2
 8001292:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	4813      	ldr	r0, [pc, #76]	@ (80012e8 <MX_GPIO_Init+0x110>)
 800129c:	f001 fd24 	bl	8002ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : modifier_Pin */
  GPIO_InitStruct.Pin = modifier_Pin;
 80012a0:	2301      	movs	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012a8:	2302      	movs	r3, #2
 80012aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(modifier_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	480e      	ldr	r0, [pc, #56]	@ (80012ec <MX_GPIO_Init+0x114>)
 80012b4:	f001 fd18 	bl	8002ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80012b8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80012bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	4804      	ldr	r0, [pc, #16]	@ (80012e4 <MX_GPIO_Init+0x10c>)
 80012d2:	f001 fd09 	bl	8002ce8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80012d6:	bf00      	nop
 80012d8:	3728      	adds	r7, #40	@ 0x28
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40021800 	.word	0x40021800
 80012e8:	40021400 	.word	0x40021400
 80012ec:	40020000 	.word	0x40020000

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <Error_Handler+0x8>

080012fc <AddKeyToReport>:
MapPinKey mpMod[] = { // Mảng chứa các phím modifier
    {btnX_Pin, MOD_LCTRL},
    {btnSpace_Pin, MOD_LSHIFT},
    {btnL_Pin, MOD_LALT}
};
void AddKeyToReport(KeyboardReport_t *report, uint8_t keycode) {
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < 6; i++) {
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	e010      	b.n	8001330 <AddKeyToReport+0x34>
        if (report->keycodes[i] == 0) { // Tìm vị trí trống
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4413      	add	r3, r2
 8001314:	3303      	adds	r3, #3
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d106      	bne.n	800132a <AddKeyToReport+0x2e>
            report->keycodes[i] = keycode;
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4413      	add	r3, r2
 8001322:	3303      	adds	r3, #3
 8001324:	78fa      	ldrb	r2, [r7, #3]
 8001326:	701a      	strb	r2, [r3, #0]
            return;
 8001328:	e005      	b.n	8001336 <AddKeyToReport+0x3a>
    for (int i = 0; i < 6; i++) {
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3301      	adds	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2b05      	cmp	r3, #5
 8001334:	ddeb      	ble.n	800130e <AddKeyToReport+0x12>
        }
    }
}
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <AddMouseButtonToReport>:
void AddMouseButtonToReport(MouseReport_t *report, uint8_t button) {
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	70fb      	strb	r3, [r7, #3]
    report->buttons |= button; // Thêm nút vào báo cáo
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	785a      	ldrb	r2, [r3, #1]
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	4313      	orrs	r3, r2
 8001354:	b2da      	uxtb	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	705a      	strb	r2, [r3, #1]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <AddModifierToReport>:
void AddModifierToReport(KeyboardReport_t *report, uint8_t modifier) {
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	460b      	mov	r3, r1
 8001370:	70fb      	strb	r3, [r7, #3]
    report->modifier |= modifier; // Thêm modifier vào báo cáo
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	785a      	ldrb	r2, [r3, #1]
 8001376:	78fb      	ldrb	r3, [r7, #3]
 8001378:	4313      	orrs	r3, r2
 800137a:	b2da      	uxtb	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	705a      	strb	r2, [r3, #1]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <CreateKeyboardReport>:
    return 0; // Không thể thay thế
}



void CreateKeyboardReport(KeyboardReport_t *report) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	@ 0x28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
    report->report_id = 0x01; // ID báo cáo bàn phím
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]
    int size = sizeof(mpkArray) / sizeof(MapPinKey);
 800139a:	230c      	movs	r3, #12
 800139c:	61bb      	str	r3, [r7, #24]
    int alternateSize = sizeof(alternateArray) / sizeof(MapPinKey);
 800139e:	2305      	movs	r3, #5
 80013a0:	617b      	str	r3, [r7, #20]
    int modSize = sizeof(mpMod) / sizeof(MapPinKey);
 80013a2:	2303      	movs	r3, #3
 80013a4:	613b      	str	r3, [r7, #16]
    uint8_t isModifierPressed = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET; // Kiểm tra nút PA0
 80013a6:	2101      	movs	r1, #1
 80013a8:	4835      	ldr	r0, [pc, #212]	@ (8001480 <CreateKeyboardReport+0xf4>)
 80013aa:	f001 fe49 	bl	8003040 <HAL_GPIO_ReadPin>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	bf0c      	ite	eq
 80013b4:	2301      	moveq	r3, #1
 80013b6:	2300      	movne	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	73fb      	strb	r3, [r7, #15]
    if (isModifierPressed) {
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d03c      	beq.n	800143c <CreateKeyboardReport+0xb0>
        // Nếu PA0 được nhấn và phím có thể thay thế, sử dụng giá trị thay thế
        for (int j = 0; j < alternateSize; j++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80013c6:	e016      	b.n	80013f6 <CreateKeyboardReport+0x6a>
            if (HAL_GPIO_ReadPin(GPIOF, alternateArray[j].pin) == GPIO_PIN_SET)
 80013c8:	4a2e      	ldr	r2, [pc, #184]	@ (8001484 <CreateKeyboardReport+0xf8>)
 80013ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013cc:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80013d0:	4619      	mov	r1, r3
 80013d2:	482d      	ldr	r0, [pc, #180]	@ (8001488 <CreateKeyboardReport+0xfc>)
 80013d4:	f001 fe34 	bl	8003040 <HAL_GPIO_ReadPin>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d108      	bne.n	80013f0 <CreateKeyboardReport+0x64>
                AddKeyToReport(report, alternateArray[j].keycode);
 80013de:	4a29      	ldr	r2, [pc, #164]	@ (8001484 <CreateKeyboardReport+0xf8>)
 80013e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	789b      	ldrb	r3, [r3, #2]
 80013e8:	4619      	mov	r1, r3
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff ff86 	bl	80012fc <AddKeyToReport>
        for (int j = 0; j < alternateSize; j++) {
 80013f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f2:	3301      	adds	r3, #1
 80013f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80013f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	dbe4      	blt.n	80013c8 <CreateKeyboardReport+0x3c>
        } 
        for (int i = 0; i < modSize; i++) {
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
 8001402:	e016      	b.n	8001432 <CreateKeyboardReport+0xa6>
            if (HAL_GPIO_ReadPin(GPIOF, mpMod[i].pin) == GPIO_PIN_SET) {
 8001404:	4a21      	ldr	r2, [pc, #132]	@ (800148c <CreateKeyboardReport+0x100>)
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800140c:	4619      	mov	r1, r3
 800140e:	481e      	ldr	r0, [pc, #120]	@ (8001488 <CreateKeyboardReport+0xfc>)
 8001410:	f001 fe16 	bl	8003040 <HAL_GPIO_ReadPin>
 8001414:	4603      	mov	r3, r0
 8001416:	2b01      	cmp	r3, #1
 8001418:	d108      	bne.n	800142c <CreateKeyboardReport+0xa0>
                AddModifierToReport(report, mpMod[i].keycode);
 800141a:	4a1c      	ldr	r2, [pc, #112]	@ (800148c <CreateKeyboardReport+0x100>)
 800141c:	6a3b      	ldr	r3, [r7, #32]
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	789b      	ldrb	r3, [r3, #2]
 8001424:	4619      	mov	r1, r3
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ff9d 	bl	8001366 <AddModifierToReport>
        for (int i = 0; i < modSize; i++) {
 800142c:	6a3b      	ldr	r3, [r7, #32]
 800142e:	3301      	adds	r3, #1
 8001430:	623b      	str	r3, [r7, #32]
 8001432:	6a3a      	ldr	r2, [r7, #32]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	429a      	cmp	r2, r3
 8001438:	dbe4      	blt.n	8001404 <CreateKeyboardReport+0x78>
                AddKeyToReport(report, mpkArray[i].keycode);
            }
        }
    }
    
}
 800143a:	e01d      	b.n	8001478 <CreateKeyboardReport+0xec>
        for (int i = 0; i < size; i++) {
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
 8001440:	e016      	b.n	8001470 <CreateKeyboardReport+0xe4>
        if (HAL_GPIO_ReadPin(GPIOF, mpkArray[i].pin) == GPIO_PIN_SET) {
 8001442:	4a13      	ldr	r2, [pc, #76]	@ (8001490 <CreateKeyboardReport+0x104>)
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800144a:	4619      	mov	r1, r3
 800144c:	480e      	ldr	r0, [pc, #56]	@ (8001488 <CreateKeyboardReport+0xfc>)
 800144e:	f001 fdf7 	bl	8003040 <HAL_GPIO_ReadPin>
 8001452:	4603      	mov	r3, r0
 8001454:	2b01      	cmp	r3, #1
 8001456:	d108      	bne.n	800146a <CreateKeyboardReport+0xde>
                AddKeyToReport(report, mpkArray[i].keycode);
 8001458:	4a0d      	ldr	r2, [pc, #52]	@ (8001490 <CreateKeyboardReport+0x104>)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	789b      	ldrb	r3, [r3, #2]
 8001462:	4619      	mov	r1, r3
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff49 	bl	80012fc <AddKeyToReport>
        for (int i = 0; i < size; i++) {
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3301      	adds	r3, #1
 800146e:	61fb      	str	r3, [r7, #28]
 8001470:	69fa      	ldr	r2, [r7, #28]
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	429a      	cmp	r2, r3
 8001476:	dbe4      	blt.n	8001442 <CreateKeyboardReport+0xb6>
}
 8001478:	bf00      	nop
 800147a:	3728      	adds	r7, #40	@ 0x28
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40020000 	.word	0x40020000
 8001484:	20000030 	.word	0x20000030
 8001488:	40021400 	.word	0x40021400
 800148c:	2000004c 	.word	0x2000004c
 8001490:	20000000 	.word	0x20000000

08001494 <CreateMouseReport>:

void CreateMouseReport(MouseReport_t *report) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
    report->report_id = 0x02; // ID báo cáo chuột
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2202      	movs	r2, #2
 80014a0:	701a      	strb	r2, [r3, #0]
    int size = sizeof(mpmArray) / sizeof(MapPinMouse);
 80014a2:	2302      	movs	r3, #2
 80014a4:	613b      	str	r3, [r7, #16]
    uint8_t isModifierPressed = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET; // Kiểm tra nút PA0
 80014a6:	2101      	movs	r1, #1
 80014a8:	4823      	ldr	r0, [pc, #140]	@ (8001538 <CreateMouseReport+0xa4>)
 80014aa:	f001 fdc9 	bl	8003040 <HAL_GPIO_ReadPin>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	bf0c      	ite	eq
 80014b4:	2301      	moveq	r3, #1
 80014b6:	2300      	movne	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < size; i++) {
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	e016      	b.n	80014f0 <CreateMouseReport+0x5c>
        if (HAL_GPIO_ReadPin(GPIOF, mpmArray[i].pin) == GPIO_PIN_SET) {
 80014c2:	4a1e      	ldr	r2, [pc, #120]	@ (800153c <CreateMouseReport+0xa8>)
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80014ca:	4619      	mov	r1, r3
 80014cc:	481c      	ldr	r0, [pc, #112]	@ (8001540 <CreateMouseReport+0xac>)
 80014ce:	f001 fdb7 	bl	8003040 <HAL_GPIO_ReadPin>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d108      	bne.n	80014ea <CreateMouseReport+0x56>
            AddMouseButtonToReport(report, mpmArray[i].button);
 80014d8:	4a18      	ldr	r2, [pc, #96]	@ (800153c <CreateMouseReport+0xa8>)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	789b      	ldrb	r3, [r3, #2]
 80014e2:	4619      	mov	r1, r3
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ff2b 	bl	8001340 <AddMouseButtonToReport>
    for (int i = 0; i < size; i++) {
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	dbe4      	blt.n	80014c2 <CreateMouseReport+0x2e>
        }
    }
    if (isModifierPressed) {
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d018      	beq.n	8001530 <CreateMouseReport+0x9c>
        if (HAL_GPIO_ReadPin(GPIOF, btn2_Pin) == GPIO_PIN_SET) {
 80014fe:	2120      	movs	r1, #32
 8001500:	480f      	ldr	r0, [pc, #60]	@ (8001540 <CreateMouseReport+0xac>)
 8001502:	f001 fd9d 	bl	8003040 <HAL_GPIO_ReadPin>
 8001506:	4603      	mov	r3, r0
 8001508:	2b01      	cmp	r3, #1
 800150a:	d103      	bne.n	8001514 <CreateMouseReport+0x80>
            report->wheel = 1; // Dịch chuyển lên
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	711a      	strb	r2, [r3, #4]
            report->wheel = -1; // Dịch chuyển xuống
        } else {
            report->wheel = 0; // Không dịch chuyển
        }
    } 
}
 8001512:	e00d      	b.n	8001530 <CreateMouseReport+0x9c>
        } else if (HAL_GPIO_ReadPin(GPIOF, btn4_Pin) == GPIO_PIN_SET) {
 8001514:	2180      	movs	r1, #128	@ 0x80
 8001516:	480a      	ldr	r0, [pc, #40]	@ (8001540 <CreateMouseReport+0xac>)
 8001518:	f001 fd92 	bl	8003040 <HAL_GPIO_ReadPin>
 800151c:	4603      	mov	r3, r0
 800151e:	2b01      	cmp	r3, #1
 8001520:	d103      	bne.n	800152a <CreateMouseReport+0x96>
            report->wheel = -1; // Dịch chuyển xuống
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	22ff      	movs	r2, #255	@ 0xff
 8001526:	711a      	strb	r2, [r3, #4]
}
 8001528:	e002      	b.n	8001530 <CreateMouseReport+0x9c>
            report->wheel = 0; // Không dịch chuyển
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	711a      	strb	r2, [r3, #4]
}
 8001530:	bf00      	nop
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40020000 	.word	0x40020000
 800153c:	20000044 	.word	0x20000044
 8001540:	40021400 	.word	0x40021400

08001544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <HAL_MspInit+0x4c>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001552:	4a0f      	ldr	r2, [pc, #60]	@ (8001590 <HAL_MspInit+0x4c>)
 8001554:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001558:	6453      	str	r3, [r2, #68]	@ 0x44
 800155a:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <HAL_MspInit+0x4c>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <HAL_MspInit+0x4c>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	4a08      	ldr	r2, [pc, #32]	@ (8001590 <HAL_MspInit+0x4c>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001574:	6413      	str	r3, [r2, #64]	@ 0x40
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <HAL_MspInit+0x4c>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800

08001594 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	@ 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a33      	ldr	r2, [pc, #204]	@ (8001680 <HAL_ADC_MspInit+0xec>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d160      	bne.n	8001678 <HAL_ADC_MspInit+0xe4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b32      	ldr	r3, [pc, #200]	@ (8001684 <HAL_ADC_MspInit+0xf0>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015be:	4a31      	ldr	r2, [pc, #196]	@ (8001684 <HAL_ADC_MspInit+0xf0>)
 80015c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001684 <HAL_ADC_MspInit+0xf0>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001684 <HAL_ADC_MspInit+0xf0>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a2a      	ldr	r2, [pc, #168]	@ (8001684 <HAL_ADC_MspInit+0xf0>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b28      	ldr	r3, [pc, #160]	@ (8001684 <HAL_ADC_MspInit+0xf0>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 80015ee:	23ee      	movs	r3, #238	@ 0xee
 80015f0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f2:	2303      	movs	r3, #3
 80015f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	4821      	ldr	r0, [pc, #132]	@ (8001688 <HAL_ADC_MspInit+0xf4>)
 8001602:	f001 fb71 	bl	8002ce8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001606:	4b21      	ldr	r3, [pc, #132]	@ (800168c <HAL_ADC_MspInit+0xf8>)
 8001608:	4a21      	ldr	r2, [pc, #132]	@ (8001690 <HAL_ADC_MspInit+0xfc>)
 800160a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800160c:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <HAL_ADC_MspInit+0xf8>)
 800160e:	2200      	movs	r2, #0
 8001610:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001612:	4b1e      	ldr	r3, [pc, #120]	@ (800168c <HAL_ADC_MspInit+0xf8>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001618:	4b1c      	ldr	r3, [pc, #112]	@ (800168c <HAL_ADC_MspInit+0xf8>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800161e:	4b1b      	ldr	r3, [pc, #108]	@ (800168c <HAL_ADC_MspInit+0xf8>)
 8001620:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001624:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001626:	4b19      	ldr	r3, [pc, #100]	@ (800168c <HAL_ADC_MspInit+0xf8>)
 8001628:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800162c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800162e:	4b17      	ldr	r3, [pc, #92]	@ (800168c <HAL_ADC_MspInit+0xf8>)
 8001630:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001634:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <HAL_ADC_MspInit+0xf8>)
 8001638:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800163c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800163e:	4b13      	ldr	r3, [pc, #76]	@ (800168c <HAL_ADC_MspInit+0xf8>)
 8001640:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001644:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001646:	4b11      	ldr	r3, [pc, #68]	@ (800168c <HAL_ADC_MspInit+0xf8>)
 8001648:	2200      	movs	r2, #0
 800164a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800164c:	480f      	ldr	r0, [pc, #60]	@ (800168c <HAL_ADC_MspInit+0xf8>)
 800164e:	f000 ffdb 	bl	8002608 <HAL_DMA_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001658:	f7ff fe4a 	bl	80012f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a0b      	ldr	r2, [pc, #44]	@ (800168c <HAL_ADC_MspInit+0xf8>)
 8001660:	639a      	str	r2, [r3, #56]	@ 0x38
 8001662:	4a0a      	ldr	r2, [pc, #40]	@ (800168c <HAL_ADC_MspInit+0xf8>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2100      	movs	r1, #0
 800166c:	2012      	movs	r0, #18
 800166e:	f000 ff94 	bl	800259a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001672:	2012      	movs	r0, #18
 8001674:	f000 ffad 	bl	80025d2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001678:	bf00      	nop
 800167a:	3728      	adds	r7, #40	@ 0x28
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40012000 	.word	0x40012000
 8001684:	40023800 	.word	0x40023800
 8001688:	40020000 	.word	0x40020000
 800168c:	200001fc 	.word	0x200001fc
 8001690:	40026470 	.word	0x40026470

08001694 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	@ 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a19      	ldr	r2, [pc, #100]	@ (8001718 <HAL_UART_MspInit+0x84>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d12c      	bne.n	8001710 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	4b18      	ldr	r3, [pc, #96]	@ (800171c <HAL_UART_MspInit+0x88>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016be:	4a17      	ldr	r2, [pc, #92]	@ (800171c <HAL_UART_MspInit+0x88>)
 80016c0:	f043 0310 	orr.w	r3, r3, #16
 80016c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016c6:	4b15      	ldr	r3, [pc, #84]	@ (800171c <HAL_UART_MspInit+0x88>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b11      	ldr	r3, [pc, #68]	@ (800171c <HAL_UART_MspInit+0x88>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	4a10      	ldr	r2, [pc, #64]	@ (800171c <HAL_UART_MspInit+0x88>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e2:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <HAL_UART_MspInit+0x88>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016ee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f4:	2302      	movs	r3, #2
 80016f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fc:	2303      	movs	r3, #3
 80016fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001700:	2307      	movs	r3, #7
 8001702:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	4805      	ldr	r0, [pc, #20]	@ (8001720 <HAL_UART_MspInit+0x8c>)
 800170c:	f001 faec 	bl	8002ce8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001710:	bf00      	nop
 8001712:	3728      	adds	r7, #40	@ 0x28
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40011000 	.word	0x40011000
 800171c:	40023800 	.word	0x40023800
 8001720:	40020000 	.word	0x40020000

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <NMI_Handler+0x4>

0800172c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <HardFault_Handler+0x4>

08001734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <MemManage_Handler+0x4>

0800173c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <UsageFault_Handler+0x4>

0800174c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177a:	f000 f8af 	bl	80018dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <ADC_IRQHandler+0x10>)
 800178a:	f000 f92e 	bl	80019ea <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200001b4 	.word	0x200001b4

08001798 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800179c:	4802      	ldr	r0, [pc, #8]	@ (80017a8 <DMA2_Stream4_IRQHandler+0x10>)
 800179e:	f001 f839 	bl	8002814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200001fc 	.word	0x200001fc

080017ac <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80017b0:	4802      	ldr	r0, [pc, #8]	@ (80017bc <OTG_HS_IRQHandler+0x10>)
 80017b2:	f001 fdba 	bl	800332a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000798 	.word	0x20000798

080017c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <SystemInit+0x20>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ca:	4a05      	ldr	r2, [pc, #20]	@ (80017e0 <SystemInit+0x20>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800181c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017e8:	f7ff ffea 	bl	80017c0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017ec:	480c      	ldr	r0, [pc, #48]	@ (8001820 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ee:	490d      	ldr	r1, [pc, #52]	@ (8001824 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001828 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a0a      	ldr	r2, [pc, #40]	@ (800182c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001804:	4c0a      	ldr	r4, [pc, #40]	@ (8001830 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001812:	f007 faf3 	bl	8008dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001816:	f7ff faf7 	bl	8000e08 <main>
  bx  lr    
 800181a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800181c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001824:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001828:	08008ed4 	.word	0x08008ed4
  ldr r2, =_sbss
 800182c:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8001830:	20000c90 	.word	0x20000c90

08001834 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001834:	e7fe      	b.n	8001834 <CAN1_RX0_IRQHandler>
	...

08001838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800183c:	4b0e      	ldr	r3, [pc, #56]	@ (8001878 <HAL_Init+0x40>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0d      	ldr	r2, [pc, #52]	@ (8001878 <HAL_Init+0x40>)
 8001842:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001846:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001848:	4b0b      	ldr	r3, [pc, #44]	@ (8001878 <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0a      	ldr	r2, [pc, #40]	@ (8001878 <HAL_Init+0x40>)
 800184e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001852:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001854:	4b08      	ldr	r3, [pc, #32]	@ (8001878 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a07      	ldr	r2, [pc, #28]	@ (8001878 <HAL_Init+0x40>)
 800185a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800185e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001860:	2003      	movs	r0, #3
 8001862:	f000 fe8f 	bl	8002584 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001866:	200f      	movs	r0, #15
 8001868:	f000 f808 	bl	800187c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800186c:	f7ff fe6a 	bl	8001544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023c00 	.word	0x40023c00

0800187c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <HAL_InitTick+0x54>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <HAL_InitTick+0x58>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001892:	fbb3 f3f1 	udiv	r3, r3, r1
 8001896:	fbb2 f3f3 	udiv	r3, r2, r3
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fea7 	bl	80025ee <HAL_SYSTICK_Config>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00e      	b.n	80018c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b0f      	cmp	r3, #15
 80018ae:	d80a      	bhi.n	80018c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b0:	2200      	movs	r2, #0
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	f000 fe6f 	bl	800259a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018bc:	4a06      	ldr	r2, [pc, #24]	@ (80018d8 <HAL_InitTick+0x5c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e000      	b.n	80018c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000058 	.word	0x20000058
 80018d4:	20000060 	.word	0x20000060
 80018d8:	2000005c 	.word	0x2000005c

080018dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <HAL_IncTick+0x20>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_IncTick+0x24>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	4a04      	ldr	r2, [pc, #16]	@ (8001900 <HAL_IncTick+0x24>)
 80018ee:	6013      	str	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000060 	.word	0x20000060
 8001900:	200002b4 	.word	0x200002b4

08001904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;
 8001908:	4b03      	ldr	r3, [pc, #12]	@ (8001918 <HAL_GetTick+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	200002b4 	.word	0x200002b4

0800191c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001924:	f7ff ffee 	bl	8001904 <HAL_GetTick>
 8001928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001934:	d005      	beq.n	8001942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001936:	4b0a      	ldr	r3, [pc, #40]	@ (8001960 <HAL_Delay+0x44>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001942:	bf00      	nop
 8001944:	f7ff ffde 	bl	8001904 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	429a      	cmp	r2, r3
 8001952:	d8f7      	bhi.n	8001944 <HAL_Delay+0x28>
  {
  }
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000060 	.word	0x20000060

08001964 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800196c:	2300      	movs	r3, #0
 800196e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e033      	b.n	80019e2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	2b00      	cmp	r3, #0
 8001980:	d109      	bne.n	8001996 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff fe06 	bl	8001594 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	f003 0310 	and.w	r3, r3, #16
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d118      	bne.n	80019d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019aa:	f023 0302 	bic.w	r3, r3, #2
 80019ae:	f043 0202 	orr.w	r2, r3, #2
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 fb8c 	bl	80020d4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	f023 0303 	bic.w	r3, r3, #3
 80019ca:	f043 0201 	orr.w	r2, r3, #1
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80019d2:	e001      	b.n	80019d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	f003 0320 	and.w	r3, r3, #32
 8001a18:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d049      	beq.n	8001ab4 <HAL_ADC_IRQHandler+0xca>
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d046      	beq.n	8001ab4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d105      	bne.n	8001a3e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d12b      	bne.n	8001aa4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d127      	bne.n	8001aa4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a5a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d006      	beq.n	8001a70 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d119      	bne.n	8001aa4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0220 	bic.w	r2, r2, #32
 8001a7e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d105      	bne.n	8001aa4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9c:	f043 0201 	orr.w	r2, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff f92d 	bl	8000d04 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f06f 0212 	mvn.w	r2, #18
 8001ab2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ac2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d057      	beq.n	8001b7a <HAL_ADC_IRQHandler+0x190>
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d054      	beq.n	8001b7a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad4:	f003 0310 	and.w	r3, r3, #16
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d105      	bne.n	8001ae8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d139      	bne.n	8001b6a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001afc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d006      	beq.n	8001b12 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d12b      	bne.n	8001b6a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d124      	bne.n	8001b6a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d11d      	bne.n	8001b6a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d119      	bne.n	8001b6a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b44:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d105      	bne.n	8001b6a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	f043 0201 	orr.w	r2, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 fc30 	bl	80023d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f06f 020c 	mvn.w	r2, #12
 8001b78:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b88:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d017      	beq.n	8001bc0 <HAL_ADC_IRQHandler+0x1d6>
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d014      	beq.n	8001bc0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d10d      	bne.n	8001bc0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f949 	bl	8001e48 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f06f 0201 	mvn.w	r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 0320 	and.w	r3, r3, #32
 8001bc6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bce:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d015      	beq.n	8001c02 <HAL_ADC_IRQHandler+0x218>
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d012      	beq.n	8001c02 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be0:	f043 0202 	orr.w	r2, r3, #2
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0220 	mvn.w	r2, #32
 8001bf0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f932 	bl	8001e5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0220 	mvn.w	r2, #32
 8001c00:	601a      	str	r2, [r3, #0]
  }
}
 8001c02:	bf00      	nop
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_Start_DMA+0x22>
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e0eb      	b.n	8001e06 <HAL_ADC_Start_DMA+0x1fa>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d018      	beq.n	8001c76 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0201 	orr.w	r2, r2, #1
 8001c52:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c54:	4b6e      	ldr	r3, [pc, #440]	@ (8001e10 <HAL_ADC_Start_DMA+0x204>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a6e      	ldr	r2, [pc, #440]	@ (8001e14 <HAL_ADC_Start_DMA+0x208>)
 8001c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5e:	0c9a      	lsrs	r2, r3, #18
 8001c60:	4613      	mov	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4413      	add	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001c68:	e002      	b.n	8001c70 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f9      	bne.n	8001c6a <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c84:	d107      	bne.n	8001c96 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c94:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	f040 80a3 	bne.w	8001dec <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001cae:	f023 0301 	bic.w	r3, r3, #1
 8001cb2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d007      	beq.n	8001cd8 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ccc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001cd0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ce4:	d106      	bne.n	8001cf4 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	f023 0206 	bic.w	r2, r3, #6
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	645a      	str	r2, [r3, #68]	@ 0x44
 8001cf2:	e002      	b.n	8001cfa <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d02:	4b45      	ldr	r3, [pc, #276]	@ (8001e18 <HAL_ADC_Start_DMA+0x20c>)
 8001d04:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d0a:	4a44      	ldr	r2, [pc, #272]	@ (8001e1c <HAL_ADC_Start_DMA+0x210>)
 8001d0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d12:	4a43      	ldr	r2, [pc, #268]	@ (8001e20 <HAL_ADC_Start_DMA+0x214>)
 8001d14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d1a:	4a42      	ldr	r2, [pc, #264]	@ (8001e24 <HAL_ADC_Start_DMA+0x218>)
 8001d1c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001d26:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001d36:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d46:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	334c      	adds	r3, #76	@ 0x4c
 8001d52:	4619      	mov	r1, r3
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f000 fd04 	bl	8002764 <HAL_DMA_Start_IT>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 031f 	and.w	r3, r3, #31
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d12a      	bne.n	8001dc2 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a2d      	ldr	r2, [pc, #180]	@ (8001e28 <HAL_ADC_Start_DMA+0x21c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d015      	beq.n	8001da2 <HAL_ADC_Start_DMA+0x196>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a2c      	ldr	r2, [pc, #176]	@ (8001e2c <HAL_ADC_Start_DMA+0x220>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d105      	bne.n	8001d8c <HAL_ADC_Start_DMA+0x180>
 8001d80:	4b25      	ldr	r3, [pc, #148]	@ (8001e18 <HAL_ADC_Start_DMA+0x20c>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00a      	beq.n	8001da2 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a27      	ldr	r2, [pc, #156]	@ (8001e30 <HAL_ADC_Start_DMA+0x224>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d136      	bne.n	8001e04 <HAL_ADC_Start_DMA+0x1f8>
 8001d96:	4b20      	ldr	r3, [pc, #128]	@ (8001e18 <HAL_ADC_Start_DMA+0x20c>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d130      	bne.n	8001e04 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d129      	bne.n	8001e04 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	e020      	b.n	8001e04 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a18      	ldr	r2, [pc, #96]	@ (8001e28 <HAL_ADC_Start_DMA+0x21c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d11b      	bne.n	8001e04 <HAL_ADC_Start_DMA+0x1f8>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d114      	bne.n	8001e04 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	e00b      	b.n	8001e04 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df0:	f043 0210 	orr.w	r2, r3, #16
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfc:	f043 0201 	orr.w	r2, r3, #1
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001e04:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3720      	adds	r7, #32
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000058 	.word	0x20000058
 8001e14:	431bde83 	.word	0x431bde83
 8001e18:	40012300 	.word	0x40012300
 8001e1c:	080022cd 	.word	0x080022cd
 8001e20:	08002387 	.word	0x08002387
 8001e24:	080023a3 	.word	0x080023a3
 8001e28:	40012000 	.word	0x40012000
 8001e2c:	40012100 	.word	0x40012100
 8001e30:	40012200 	.word	0x40012200

08001e34 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x1c>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e113      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x244>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b09      	cmp	r3, #9
 8001e9a:	d925      	bls.n	8001ee8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68d9      	ldr	r1, [r3, #12]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4613      	mov	r3, r2
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	4413      	add	r3, r2
 8001eb0:	3b1e      	subs	r3, #30
 8001eb2:	2207      	movs	r2, #7
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43da      	mvns	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	400a      	ands	r2, r1
 8001ec0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68d9      	ldr	r1, [r3, #12]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4403      	add	r3, r0
 8001eda:	3b1e      	subs	r3, #30
 8001edc:	409a      	lsls	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	e022      	b.n	8001f2e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6919      	ldr	r1, [r3, #16]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	2207      	movs	r2, #7
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43da      	mvns	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	400a      	ands	r2, r1
 8001f0a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6919      	ldr	r1, [r3, #16]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	4603      	mov	r3, r0
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4403      	add	r3, r0
 8001f24:	409a      	lsls	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b06      	cmp	r3, #6
 8001f34:	d824      	bhi.n	8001f80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	3b05      	subs	r3, #5
 8001f48:	221f      	movs	r2, #31
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	400a      	ands	r2, r1
 8001f56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	4618      	mov	r0, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	3b05      	subs	r3, #5
 8001f72:	fa00 f203 	lsl.w	r2, r0, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f7e:	e04c      	b.n	800201a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b0c      	cmp	r3, #12
 8001f86:	d824      	bhi.n	8001fd2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	3b23      	subs	r3, #35	@ 0x23
 8001f9a:	221f      	movs	r2, #31
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43da      	mvns	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	400a      	ands	r2, r1
 8001fa8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3b23      	subs	r3, #35	@ 0x23
 8001fc4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fd0:	e023      	b.n	800201a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3b41      	subs	r3, #65	@ 0x41
 8001fe4:	221f      	movs	r2, #31
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43da      	mvns	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	400a      	ands	r2, r1
 8001ff2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	4618      	mov	r0, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	3b41      	subs	r3, #65	@ 0x41
 800200e:	fa00 f203 	lsl.w	r2, r0, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800201a:	4b29      	ldr	r3, [pc, #164]	@ (80020c0 <HAL_ADC_ConfigChannel+0x250>)
 800201c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a28      	ldr	r2, [pc, #160]	@ (80020c4 <HAL_ADC_ConfigChannel+0x254>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d10f      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x1d8>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b12      	cmp	r3, #18
 800202e:	d10b      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a1d      	ldr	r2, [pc, #116]	@ (80020c4 <HAL_ADC_ConfigChannel+0x254>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d12b      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x23a>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a1c      	ldr	r2, [pc, #112]	@ (80020c8 <HAL_ADC_ConfigChannel+0x258>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d003      	beq.n	8002064 <HAL_ADC_ConfigChannel+0x1f4>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b11      	cmp	r3, #17
 8002062:	d122      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a11      	ldr	r2, [pc, #68]	@ (80020c8 <HAL_ADC_ConfigChannel+0x258>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d111      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002086:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <HAL_ADC_ConfigChannel+0x25c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a11      	ldr	r2, [pc, #68]	@ (80020d0 <HAL_ADC_ConfigChannel+0x260>)
 800208c:	fba2 2303 	umull	r2, r3, r2, r3
 8002090:	0c9a      	lsrs	r2, r3, #18
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800209c:	e002      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	3b01      	subs	r3, #1
 80020a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f9      	bne.n	800209e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	40012300 	.word	0x40012300
 80020c4:	40012000 	.word	0x40012000
 80020c8:	10000012 	.word	0x10000012
 80020cc:	20000058 	.word	0x20000058
 80020d0:	431bde83 	.word	0x431bde83

080020d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020dc:	4b79      	ldr	r3, [pc, #484]	@ (80022c4 <ADC_Init+0x1f0>)
 80020de:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	431a      	orrs	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002108:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6859      	ldr	r1, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	021a      	lsls	r2, r3, #8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800212c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6859      	ldr	r1, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800214e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6899      	ldr	r1, [r3, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002166:	4a58      	ldr	r2, [pc, #352]	@ (80022c8 <ADC_Init+0x1f4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d022      	beq.n	80021b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800217a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6899      	ldr	r1, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800219c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6899      	ldr	r1, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	e00f      	b.n	80021d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0202 	bic.w	r2, r2, #2
 80021e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6899      	ldr	r1, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	7e1b      	ldrb	r3, [r3, #24]
 80021ec:	005a      	lsls	r2, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01b      	beq.n	8002238 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800220e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800221e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6859      	ldr	r1, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222a:	3b01      	subs	r3, #1
 800222c:	035a      	lsls	r2, r3, #13
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	e007      	b.n	8002248 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002246:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002256:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	3b01      	subs	r3, #1
 8002264:	051a      	lsls	r2, r3, #20
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800227c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6899      	ldr	r1, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800228a:	025a      	lsls	r2, r3, #9
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6899      	ldr	r1, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	029a      	lsls	r2, r3, #10
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	609a      	str	r2, [r3, #8]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	40012300 	.word	0x40012300
 80022c8:	0f000001 	.word	0x0f000001

080022cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022d8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022de:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d13c      	bne.n	8002360 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d12b      	bne.n	8002358 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002304:	2b00      	cmp	r3, #0
 8002306:	d127      	bne.n	8002358 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002312:	2b00      	cmp	r3, #0
 8002314:	d006      	beq.n	8002324 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002320:	2b00      	cmp	r3, #0
 8002322:	d119      	bne.n	8002358 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0220 	bic.w	r2, r2, #32
 8002332:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002338:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d105      	bne.n	8002358 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002350:	f043 0201 	orr.w	r2, r3, #1
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f7fe fcd3 	bl	8000d04 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800235e:	e00e      	b.n	800237e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002364:	f003 0310 	and.w	r3, r3, #16
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f7ff fd75 	bl	8001e5c <HAL_ADC_ErrorCallback>
}
 8002372:	e004      	b.n	800237e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	4798      	blx	r3
}
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002392:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f7ff fd4d 	bl	8001e34 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ae:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2240      	movs	r2, #64	@ 0x40
 80023b4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ba:	f043 0204 	orr.w	r2, r3, #4
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f7ff fd4a 	bl	8001e5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002428 <__NVIC_SetPriorityGrouping+0x44>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002400:	4013      	ands	r3, r2
 8002402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800240c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002410:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002416:	4a04      	ldr	r2, [pc, #16]	@ (8002428 <__NVIC_SetPriorityGrouping+0x44>)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	60d3      	str	r3, [r2, #12]
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002430:	4b04      	ldr	r3, [pc, #16]	@ (8002444 <__NVIC_GetPriorityGrouping+0x18>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	f003 0307 	and.w	r3, r3, #7
}
 800243a:	4618      	mov	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	2b00      	cmp	r3, #0
 8002458:	db0b      	blt.n	8002472 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	f003 021f 	and.w	r2, r3, #31
 8002460:	4907      	ldr	r1, [pc, #28]	@ (8002480 <__NVIC_EnableIRQ+0x38>)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	2001      	movs	r0, #1
 800246a:	fa00 f202 	lsl.w	r2, r0, r2
 800246e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000e100 	.word	0xe000e100

08002484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	6039      	str	r1, [r7, #0]
 800248e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002494:	2b00      	cmp	r3, #0
 8002496:	db0a      	blt.n	80024ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	b2da      	uxtb	r2, r3
 800249c:	490c      	ldr	r1, [pc, #48]	@ (80024d0 <__NVIC_SetPriority+0x4c>)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	0112      	lsls	r2, r2, #4
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	440b      	add	r3, r1
 80024a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024ac:	e00a      	b.n	80024c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4908      	ldr	r1, [pc, #32]	@ (80024d4 <__NVIC_SetPriority+0x50>)
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	3b04      	subs	r3, #4
 80024bc:	0112      	lsls	r2, r2, #4
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	440b      	add	r3, r1
 80024c2:	761a      	strb	r2, [r3, #24]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	e000e100 	.word	0xe000e100
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d8:	b480      	push	{r7}
 80024da:	b089      	sub	sp, #36	@ 0x24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f1c3 0307 	rsb	r3, r3, #7
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	bf28      	it	cs
 80024f6:	2304      	movcs	r3, #4
 80024f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3304      	adds	r3, #4
 80024fe:	2b06      	cmp	r3, #6
 8002500:	d902      	bls.n	8002508 <NVIC_EncodePriority+0x30>
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3b03      	subs	r3, #3
 8002506:	e000      	b.n	800250a <NVIC_EncodePriority+0x32>
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	f04f 32ff 	mov.w	r2, #4294967295
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43da      	mvns	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	401a      	ands	r2, r3
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002520:	f04f 31ff 	mov.w	r1, #4294967295
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	43d9      	mvns	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002530:	4313      	orrs	r3, r2
         );
}
 8002532:	4618      	mov	r0, r3
 8002534:	3724      	adds	r7, #36	@ 0x24
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3b01      	subs	r3, #1
 800254c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002550:	d301      	bcc.n	8002556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002552:	2301      	movs	r3, #1
 8002554:	e00f      	b.n	8002576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002556:	4a0a      	ldr	r2, [pc, #40]	@ (8002580 <SysTick_Config+0x40>)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3b01      	subs	r3, #1
 800255c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800255e:	210f      	movs	r1, #15
 8002560:	f04f 30ff 	mov.w	r0, #4294967295
 8002564:	f7ff ff8e 	bl	8002484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002568:	4b05      	ldr	r3, [pc, #20]	@ (8002580 <SysTick_Config+0x40>)
 800256a:	2200      	movs	r2, #0
 800256c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800256e:	4b04      	ldr	r3, [pc, #16]	@ (8002580 <SysTick_Config+0x40>)
 8002570:	2207      	movs	r2, #7
 8002572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	e000e010 	.word	0xe000e010

08002584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ff29 	bl	80023e4 <__NVIC_SetPriorityGrouping>
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800259a:	b580      	push	{r7, lr}
 800259c:	b086      	sub	sp, #24
 800259e:	af00      	add	r7, sp, #0
 80025a0:	4603      	mov	r3, r0
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	607a      	str	r2, [r7, #4]
 80025a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025ac:	f7ff ff3e 	bl	800242c <__NVIC_GetPriorityGrouping>
 80025b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	68b9      	ldr	r1, [r7, #8]
 80025b6:	6978      	ldr	r0, [r7, #20]
 80025b8:	f7ff ff8e 	bl	80024d8 <NVIC_EncodePriority>
 80025bc:	4602      	mov	r2, r0
 80025be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c2:	4611      	mov	r1, r2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff5d 	bl	8002484 <__NVIC_SetPriority>
}
 80025ca:	bf00      	nop
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	4603      	mov	r3, r0
 80025da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff ff31 	bl	8002448 <__NVIC_EnableIRQ>
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff ffa2 	bl	8002540 <SysTick_Config>
 80025fc:	4603      	mov	r3, r0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002614:	f7ff f976 	bl	8001904 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e099      	b.n	8002758 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0201 	bic.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002644:	e00f      	b.n	8002666 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002646:	f7ff f95d 	bl	8001904 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b05      	cmp	r3, #5
 8002652:	d908      	bls.n	8002666 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2220      	movs	r2, #32
 8002658:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2203      	movs	r2, #3
 800265e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e078      	b.n	8002758 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1e8      	bne.n	8002646 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	4b38      	ldr	r3, [pc, #224]	@ (8002760 <HAL_DMA_Init+0x158>)
 8002680:	4013      	ands	r3, r2
 8002682:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002692:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800269e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d107      	bne.n	80026d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c8:	4313      	orrs	r3, r2
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f023 0307 	bic.w	r3, r3, #7
 80026e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d117      	bne.n	800272a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4313      	orrs	r3, r2
 8002702:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00e      	beq.n	800272a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 fa6f 	bl	8002bf0 <DMA_CheckFifoParam>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2240      	movs	r2, #64	@ 0x40
 800271c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002726:	2301      	movs	r3, #1
 8002728:	e016      	b.n	8002758 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fa26 	bl	8002b84 <DMA_CalcBaseAndBitshift>
 8002738:	4603      	mov	r3, r0
 800273a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002740:	223f      	movs	r2, #63	@ 0x3f
 8002742:	409a      	lsls	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	f010803f 	.word	0xf010803f

08002764 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
 8002770:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_DMA_Start_IT+0x26>
 8002786:	2302      	movs	r3, #2
 8002788:	e040      	b.n	800280c <HAL_DMA_Start_IT+0xa8>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d12f      	bne.n	80027fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2202      	movs	r2, #2
 80027a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f9b8 	bl	8002b28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027bc:	223f      	movs	r2, #63	@ 0x3f
 80027be:	409a      	lsls	r2, r3
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0216 	orr.w	r2, r2, #22
 80027d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d007      	beq.n	80027ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0208 	orr.w	r2, r2, #8
 80027ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	e005      	b.n	800280a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002806:	2302      	movs	r3, #2
 8002808:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800280a:	7dfb      	ldrb	r3, [r7, #23]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002820:	4b8e      	ldr	r3, [pc, #568]	@ (8002a5c <HAL_DMA_IRQHandler+0x248>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a8e      	ldr	r2, [pc, #568]	@ (8002a60 <HAL_DMA_IRQHandler+0x24c>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	0a9b      	lsrs	r3, r3, #10
 800282c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002832:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800283e:	2208      	movs	r2, #8
 8002840:	409a      	lsls	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d01a      	beq.n	8002880 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d013      	beq.n	8002880 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0204 	bic.w	r2, r2, #4
 8002866:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286c:	2208      	movs	r2, #8
 800286e:	409a      	lsls	r2, r3
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002878:	f043 0201 	orr.w	r2, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002884:	2201      	movs	r2, #1
 8002886:	409a      	lsls	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d012      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00b      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a2:	2201      	movs	r2, #1
 80028a4:	409a      	lsls	r2, r3
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ae:	f043 0202 	orr.w	r2, r3, #2
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ba:	2204      	movs	r2, #4
 80028bc:	409a      	lsls	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d012      	beq.n	80028ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00b      	beq.n	80028ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d8:	2204      	movs	r2, #4
 80028da:	409a      	lsls	r2, r3
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e4:	f043 0204 	orr.w	r2, r3, #4
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f0:	2210      	movs	r2, #16
 80028f2:	409a      	lsls	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d043      	beq.n	8002984 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d03c      	beq.n	8002984 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290e:	2210      	movs	r2, #16
 8002910:	409a      	lsls	r2, r3
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d018      	beq.n	8002956 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d108      	bne.n	8002944 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d024      	beq.n	8002984 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4798      	blx	r3
 8002942:	e01f      	b.n	8002984 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01b      	beq.n	8002984 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	4798      	blx	r3
 8002954:	e016      	b.n	8002984 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d107      	bne.n	8002974 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0208 	bic.w	r2, r2, #8
 8002972:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002988:	2220      	movs	r2, #32
 800298a:	409a      	lsls	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 808f 	beq.w	8002ab4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 8087 	beq.w	8002ab4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029aa:	2220      	movs	r2, #32
 80029ac:	409a      	lsls	r2, r3
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b05      	cmp	r3, #5
 80029bc:	d136      	bne.n	8002a2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0216 	bic.w	r2, r2, #22
 80029cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695a      	ldr	r2, [r3, #20]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d103      	bne.n	80029ee <HAL_DMA_IRQHandler+0x1da>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d007      	beq.n	80029fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0208 	bic.w	r2, r2, #8
 80029fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a02:	223f      	movs	r2, #63	@ 0x3f
 8002a04:	409a      	lsls	r2, r3
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d07e      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	4798      	blx	r3
        }
        return;
 8002a2a:	e079      	b.n	8002b20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d01d      	beq.n	8002a76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10d      	bne.n	8002a64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d031      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	4798      	blx	r3
 8002a58:	e02c      	b.n	8002ab4 <HAL_DMA_IRQHandler+0x2a0>
 8002a5a:	bf00      	nop
 8002a5c:	20000058 	.word	0x20000058
 8002a60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d023      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	4798      	blx	r3
 8002a74:	e01e      	b.n	8002ab4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10f      	bne.n	8002aa4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0210 	bic.w	r2, r2, #16
 8002a92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d032      	beq.n	8002b22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d022      	beq.n	8002b0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2205      	movs	r2, #5
 8002acc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0201 	bic.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d307      	bcc.n	8002afc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f2      	bne.n	8002ae0 <HAL_DMA_IRQHandler+0x2cc>
 8002afa:	e000      	b.n	8002afe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002afc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	4798      	blx	r3
 8002b1e:	e000      	b.n	8002b22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b20:	bf00      	nop
    }
  }
}
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b40      	cmp	r3, #64	@ 0x40
 8002b54:	d108      	bne.n	8002b68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b66:	e007      	b.n	8002b78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	60da      	str	r2, [r3, #12]
}
 8002b78:	bf00      	nop
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	3b10      	subs	r3, #16
 8002b94:	4a14      	ldr	r2, [pc, #80]	@ (8002be8 <DMA_CalcBaseAndBitshift+0x64>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	091b      	lsrs	r3, r3, #4
 8002b9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b9e:	4a13      	ldr	r2, [pc, #76]	@ (8002bec <DMA_CalcBaseAndBitshift+0x68>)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d909      	bls.n	8002bc6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002bba:	f023 0303 	bic.w	r3, r3, #3
 8002bbe:	1d1a      	adds	r2, r3, #4
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002bc4:	e007      	b.n	8002bd6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002bce:	f023 0303 	bic.w	r3, r3, #3
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	aaaaaaab 	.word	0xaaaaaaab
 8002bec:	08008ebc 	.word	0x08008ebc

08002bf0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d11f      	bne.n	8002c4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d856      	bhi.n	8002cbe <DMA_CheckFifoParam+0xce>
 8002c10:	a201      	add	r2, pc, #4	@ (adr r2, 8002c18 <DMA_CheckFifoParam+0x28>)
 8002c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c16:	bf00      	nop
 8002c18:	08002c29 	.word	0x08002c29
 8002c1c:	08002c3b 	.word	0x08002c3b
 8002c20:	08002c29 	.word	0x08002c29
 8002c24:	08002cbf 	.word	0x08002cbf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d046      	beq.n	8002cc2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c38:	e043      	b.n	8002cc2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c42:	d140      	bne.n	8002cc6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c48:	e03d      	b.n	8002cc6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c52:	d121      	bne.n	8002c98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d837      	bhi.n	8002cca <DMA_CheckFifoParam+0xda>
 8002c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c60 <DMA_CheckFifoParam+0x70>)
 8002c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c60:	08002c71 	.word	0x08002c71
 8002c64:	08002c77 	.word	0x08002c77
 8002c68:	08002c71 	.word	0x08002c71
 8002c6c:	08002c89 	.word	0x08002c89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	73fb      	strb	r3, [r7, #15]
      break;
 8002c74:	e030      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d025      	beq.n	8002cce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c86:	e022      	b.n	8002cce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c90:	d11f      	bne.n	8002cd2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c96:	e01c      	b.n	8002cd2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d903      	bls.n	8002ca6 <DMA_CheckFifoParam+0xb6>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d003      	beq.n	8002cac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ca4:	e018      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
      break;
 8002caa:	e015      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00e      	beq.n	8002cd6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
      break;
 8002cbc:	e00b      	b.n	8002cd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002cbe:	bf00      	nop
 8002cc0:	e00a      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cc2:	bf00      	nop
 8002cc4:	e008      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cc6:	bf00      	nop
 8002cc8:	e006      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cca:	bf00      	nop
 8002ccc:	e004      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cce:	bf00      	nop
 8002cd0:	e002      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cd2:	bf00      	nop
 8002cd4:	e000      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cd6:	bf00      	nop
    }
  } 
  
  return status; 
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop

08002ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b089      	sub	sp, #36	@ 0x24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	e177      	b.n	8002ff4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d04:	2201      	movs	r2, #1
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4013      	ands	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	f040 8166 	bne.w	8002fee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d005      	beq.n	8002d3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d130      	bne.n	8002d9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	2203      	movs	r2, #3
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d70:	2201      	movs	r2, #1
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	091b      	lsrs	r3, r3, #4
 8002d86:	f003 0201 	and.w	r2, r3, #1
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d017      	beq.n	8002dd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	2203      	movs	r2, #3
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d123      	bne.n	8002e2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	08da      	lsrs	r2, r3, #3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3208      	adds	r2, #8
 8002dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	220f      	movs	r2, #15
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	08da      	lsrs	r2, r3, #3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3208      	adds	r2, #8
 8002e26:	69b9      	ldr	r1, [r7, #24]
 8002e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	2203      	movs	r2, #3
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 0203 	and.w	r2, r3, #3
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 80c0 	beq.w	8002fee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	4b66      	ldr	r3, [pc, #408]	@ (800300c <HAL_GPIO_Init+0x324>)
 8002e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e76:	4a65      	ldr	r2, [pc, #404]	@ (800300c <HAL_GPIO_Init+0x324>)
 8002e78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e7e:	4b63      	ldr	r3, [pc, #396]	@ (800300c <HAL_GPIO_Init+0x324>)
 8002e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e8a:	4a61      	ldr	r2, [pc, #388]	@ (8003010 <HAL_GPIO_Init+0x328>)
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	089b      	lsrs	r3, r3, #2
 8002e90:	3302      	adds	r3, #2
 8002e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	220f      	movs	r2, #15
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a58      	ldr	r2, [pc, #352]	@ (8003014 <HAL_GPIO_Init+0x32c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d037      	beq.n	8002f26 <HAL_GPIO_Init+0x23e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a57      	ldr	r2, [pc, #348]	@ (8003018 <HAL_GPIO_Init+0x330>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d031      	beq.n	8002f22 <HAL_GPIO_Init+0x23a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a56      	ldr	r2, [pc, #344]	@ (800301c <HAL_GPIO_Init+0x334>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d02b      	beq.n	8002f1e <HAL_GPIO_Init+0x236>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a55      	ldr	r2, [pc, #340]	@ (8003020 <HAL_GPIO_Init+0x338>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d025      	beq.n	8002f1a <HAL_GPIO_Init+0x232>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a54      	ldr	r2, [pc, #336]	@ (8003024 <HAL_GPIO_Init+0x33c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d01f      	beq.n	8002f16 <HAL_GPIO_Init+0x22e>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a53      	ldr	r2, [pc, #332]	@ (8003028 <HAL_GPIO_Init+0x340>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d019      	beq.n	8002f12 <HAL_GPIO_Init+0x22a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a52      	ldr	r2, [pc, #328]	@ (800302c <HAL_GPIO_Init+0x344>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d013      	beq.n	8002f0e <HAL_GPIO_Init+0x226>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a51      	ldr	r2, [pc, #324]	@ (8003030 <HAL_GPIO_Init+0x348>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d00d      	beq.n	8002f0a <HAL_GPIO_Init+0x222>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a50      	ldr	r2, [pc, #320]	@ (8003034 <HAL_GPIO_Init+0x34c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d007      	beq.n	8002f06 <HAL_GPIO_Init+0x21e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a4f      	ldr	r2, [pc, #316]	@ (8003038 <HAL_GPIO_Init+0x350>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d101      	bne.n	8002f02 <HAL_GPIO_Init+0x21a>
 8002efe:	2309      	movs	r3, #9
 8002f00:	e012      	b.n	8002f28 <HAL_GPIO_Init+0x240>
 8002f02:	230a      	movs	r3, #10
 8002f04:	e010      	b.n	8002f28 <HAL_GPIO_Init+0x240>
 8002f06:	2308      	movs	r3, #8
 8002f08:	e00e      	b.n	8002f28 <HAL_GPIO_Init+0x240>
 8002f0a:	2307      	movs	r3, #7
 8002f0c:	e00c      	b.n	8002f28 <HAL_GPIO_Init+0x240>
 8002f0e:	2306      	movs	r3, #6
 8002f10:	e00a      	b.n	8002f28 <HAL_GPIO_Init+0x240>
 8002f12:	2305      	movs	r3, #5
 8002f14:	e008      	b.n	8002f28 <HAL_GPIO_Init+0x240>
 8002f16:	2304      	movs	r3, #4
 8002f18:	e006      	b.n	8002f28 <HAL_GPIO_Init+0x240>
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e004      	b.n	8002f28 <HAL_GPIO_Init+0x240>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e002      	b.n	8002f28 <HAL_GPIO_Init+0x240>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <HAL_GPIO_Init+0x240>
 8002f26:	2300      	movs	r3, #0
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	f002 0203 	and.w	r2, r2, #3
 8002f2e:	0092      	lsls	r2, r2, #2
 8002f30:	4093      	lsls	r3, r2
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f38:	4935      	ldr	r1, [pc, #212]	@ (8003010 <HAL_GPIO_Init+0x328>)
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	089b      	lsrs	r3, r3, #2
 8002f3e:	3302      	adds	r3, #2
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f46:	4b3d      	ldr	r3, [pc, #244]	@ (800303c <HAL_GPIO_Init+0x354>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4013      	ands	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f6a:	4a34      	ldr	r2, [pc, #208]	@ (800303c <HAL_GPIO_Init+0x354>)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f70:	4b32      	ldr	r3, [pc, #200]	@ (800303c <HAL_GPIO_Init+0x354>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f94:	4a29      	ldr	r2, [pc, #164]	@ (800303c <HAL_GPIO_Init+0x354>)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f9a:	4b28      	ldr	r3, [pc, #160]	@ (800303c <HAL_GPIO_Init+0x354>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800303c <HAL_GPIO_Init+0x354>)
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800303c <HAL_GPIO_Init+0x354>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fe8:	4a14      	ldr	r2, [pc, #80]	@ (800303c <HAL_GPIO_Init+0x354>)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	61fb      	str	r3, [r7, #28]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	2b0f      	cmp	r3, #15
 8002ff8:	f67f ae84 	bls.w	8002d04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	bf00      	nop
 8003000:	3724      	adds	r7, #36	@ 0x24
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800
 8003010:	40013800 	.word	0x40013800
 8003014:	40020000 	.word	0x40020000
 8003018:	40020400 	.word	0x40020400
 800301c:	40020800 	.word	0x40020800
 8003020:	40020c00 	.word	0x40020c00
 8003024:	40021000 	.word	0x40021000
 8003028:	40021400 	.word	0x40021400
 800302c:	40021800 	.word	0x40021800
 8003030:	40021c00 	.word	0x40021c00
 8003034:	40022000 	.word	0x40022000
 8003038:	40022400 	.word	0x40022400
 800303c:	40013c00 	.word	0x40013c00

08003040 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	887b      	ldrh	r3, [r7, #2]
 8003052:	4013      	ands	r3, r2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
 800305c:	e001      	b.n	8003062 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800305e:	2300      	movs	r3, #0
 8003060:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003062:	7bfb      	ldrb	r3, [r7, #15]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	807b      	strh	r3, [r7, #2]
 800307c:	4613      	mov	r3, r2
 800307e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003080:	787b      	ldrb	r3, [r7, #1]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003086:	887a      	ldrh	r2, [r7, #2]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800308c:	e003      	b.n	8003096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800308e:	887b      	ldrh	r3, [r7, #2]
 8003090:	041a      	lsls	r2, r3, #16
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	619a      	str	r2, [r3, #24]
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b086      	sub	sp, #24
 80030a6:	af02      	add	r7, sp, #8
 80030a8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e101      	b.n	80032b8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d106      	bne.n	80030d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f005 fb5a 	bl	8008788 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2203      	movs	r2, #3
 80030d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030e2:	d102      	bne.n	80030ea <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f002 fa85 	bl	80055fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	7c1a      	ldrb	r2, [r3, #16]
 80030fc:	f88d 2000 	strb.w	r2, [sp]
 8003100:	3304      	adds	r3, #4
 8003102:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003104:	f002 f964 	bl	80053d0 <USB_CoreInit>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d005      	beq.n	800311a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2202      	movs	r2, #2
 8003112:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e0ce      	b.n	80032b8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2100      	movs	r1, #0
 8003120:	4618      	mov	r0, r3
 8003122:	f002 fa7d 	bl	8005620 <USB_SetCurrentMode>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0bf      	b.n	80032b8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003138:	2300      	movs	r3, #0
 800313a:	73fb      	strb	r3, [r7, #15]
 800313c:	e04a      	b.n	80031d4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800313e:	7bfa      	ldrb	r2, [r7, #15]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	3315      	adds	r3, #21
 800314e:	2201      	movs	r2, #1
 8003150:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003152:	7bfa      	ldrb	r2, [r7, #15]
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	4413      	add	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	3314      	adds	r3, #20
 8003162:	7bfa      	ldrb	r2, [r7, #15]
 8003164:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003166:	7bfa      	ldrb	r2, [r7, #15]
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	b298      	uxth	r0, r3
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	332e      	adds	r3, #46	@ 0x2e
 800317a:	4602      	mov	r2, r0
 800317c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800317e:	7bfa      	ldrb	r2, [r7, #15]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	3318      	adds	r3, #24
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003192:	7bfa      	ldrb	r2, [r7, #15]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	331c      	adds	r3, #28
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031a6:	7bfa      	ldrb	r2, [r7, #15]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	3320      	adds	r3, #32
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031ba:	7bfa      	ldrb	r2, [r7, #15]
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	3324      	adds	r3, #36	@ 0x24
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
 80031d0:	3301      	adds	r3, #1
 80031d2:	73fb      	strb	r3, [r7, #15]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	791b      	ldrb	r3, [r3, #4]
 80031d8:	7bfa      	ldrb	r2, [r7, #15]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d3af      	bcc.n	800313e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031de:	2300      	movs	r3, #0
 80031e0:	73fb      	strb	r3, [r7, #15]
 80031e2:	e044      	b.n	800326e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031e4:	7bfa      	ldrb	r2, [r7, #15]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80031f6:	2200      	movs	r2, #0
 80031f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031fa:	7bfa      	ldrb	r2, [r7, #15]
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800320c:	7bfa      	ldrb	r2, [r7, #15]
 800320e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003210:	7bfa      	ldrb	r2, [r7, #15]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003222:	2200      	movs	r2, #0
 8003224:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003226:	7bfa      	ldrb	r2, [r7, #15]
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800323c:	7bfa      	ldrb	r2, [r7, #15]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003252:	7bfa      	ldrb	r2, [r7, #15]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003268:	7bfb      	ldrb	r3, [r7, #15]
 800326a:	3301      	adds	r3, #1
 800326c:	73fb      	strb	r3, [r7, #15]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	791b      	ldrb	r3, [r3, #4]
 8003272:	7bfa      	ldrb	r2, [r7, #15]
 8003274:	429a      	cmp	r2, r3
 8003276:	d3b5      	bcc.n	80031e4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7c1a      	ldrb	r2, [r3, #16]
 8003280:	f88d 2000 	strb.w	r2, [sp]
 8003284:	3304      	adds	r3, #4
 8003286:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003288:	f002 fa16 	bl	80056b8 <USB_DevInit>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2202      	movs	r2, #2
 8003296:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e00c      	b.n	80032b8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f003 fa60 	bl	8006776 <USB_DevDisconnect>

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d101      	bne.n	80032dc <HAL_PCD_Start+0x1c>
 80032d8:	2302      	movs	r3, #2
 80032da:	e022      	b.n	8003322 <HAL_PCD_Start+0x62>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d009      	beq.n	8003304 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d105      	bne.n	8003304 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f002 f967 	bl	80055dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f003 fa0e 	bl	8006734 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800332a:	b590      	push	{r4, r7, lr}
 800332c:	b08d      	sub	sp, #52	@ 0x34
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f003 facc 	bl	80068de <USB_GetMode>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	f040 848c 	bne.w	8003c66 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f003 fa30 	bl	80067b8 <USB_ReadInterrupts>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8482 	beq.w	8003c64 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	0a1b      	lsrs	r3, r3, #8
 800336a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f003 fa1d 	bl	80067b8 <USB_ReadInterrupts>
 800337e:	4603      	mov	r3, r0
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b02      	cmp	r3, #2
 8003386:	d107      	bne.n	8003398 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f002 0202 	and.w	r2, r2, #2
 8003396:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f003 fa0b 	bl	80067b8 <USB_ReadInterrupts>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b10      	cmp	r3, #16
 80033aa:	d161      	bne.n	8003470 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0210 	bic.w	r2, r2, #16
 80033ba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	f003 020f 	and.w	r2, r3, #15
 80033c8:	4613      	mov	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	4413      	add	r3, r2
 80033d8:	3304      	adds	r3, #4
 80033da:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80033e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80033e6:	d124      	bne.n	8003432 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d035      	beq.n	8003460 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003402:	b29b      	uxth	r3, r3
 8003404:	461a      	mov	r2, r3
 8003406:	6a38      	ldr	r0, [r7, #32]
 8003408:	f003 f842 	bl	8006490 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003418:	441a      	add	r2, r3
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	695a      	ldr	r2, [r3, #20]
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800342a:	441a      	add	r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	615a      	str	r2, [r3, #20]
 8003430:	e016      	b.n	8003460 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003438:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800343c:	d110      	bne.n	8003460 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003444:	2208      	movs	r2, #8
 8003446:	4619      	mov	r1, r3
 8003448:	6a38      	ldr	r0, [r7, #32]
 800344a:	f003 f821 	bl	8006490 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	695a      	ldr	r2, [r3, #20]
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800345a:	441a      	add	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699a      	ldr	r2, [r3, #24]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0210 	orr.w	r2, r2, #16
 800346e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f003 f99f 	bl	80067b8 <USB_ReadInterrupts>
 800347a:	4603      	mov	r3, r0
 800347c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003480:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003484:	f040 80a7 	bne.w	80035d6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f003 f9a4 	bl	80067de <USB_ReadDevAllOutEpInterrupt>
 8003496:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003498:	e099      	b.n	80035ce <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800349a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 808e 	beq.w	80035c2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	4611      	mov	r1, r2
 80034b0:	4618      	mov	r0, r3
 80034b2:	f003 f9c8 	bl	8006846 <USB_ReadDevOutEPInterrupt>
 80034b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00c      	beq.n	80034dc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034ce:	461a      	mov	r2, r3
 80034d0:	2301      	movs	r3, #1
 80034d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80034d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fe8c 	bl	80041f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00c      	beq.n	8003500 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034f2:	461a      	mov	r2, r3
 80034f4:	2308      	movs	r3, #8
 80034f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80034f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 ff62 	bl	80043c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f003 0310 	and.w	r3, r3, #16
 8003506:	2b00      	cmp	r3, #0
 8003508:	d008      	beq.n	800351c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	015a      	lsls	r2, r3, #5
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	4413      	add	r3, r2
 8003512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003516:	461a      	mov	r2, r3
 8003518:	2310      	movs	r3, #16
 800351a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d030      	beq.n	8003588 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800352e:	2b80      	cmp	r3, #128	@ 0x80
 8003530:	d109      	bne.n	8003546 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003540:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003544:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	4413      	add	r3, r2
 8003558:	3304      	adds	r3, #4
 800355a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	78db      	ldrb	r3, [r3, #3]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d108      	bne.n	8003576 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2200      	movs	r2, #0
 8003568:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	b2db      	uxtb	r3, r3
 800356e:	4619      	mov	r1, r3
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f005 fa39 	bl	80089e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003582:	461a      	mov	r2, r3
 8003584:	2302      	movs	r3, #2
 8003586:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d008      	beq.n	80035a4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	4413      	add	r3, r2
 800359a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800359e:	461a      	mov	r2, r3
 80035a0:	2320      	movs	r3, #32
 80035a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d009      	beq.n	80035c2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80035ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ba:	461a      	mov	r2, r3
 80035bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035c0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c4:	3301      	adds	r3, #1
 80035c6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80035c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ca:	085b      	lsrs	r3, r3, #1
 80035cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80035ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f47f af62 	bne.w	800349a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f003 f8ec 	bl	80067b8 <USB_ReadInterrupts>
 80035e0:	4603      	mov	r3, r0
 80035e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035ea:	f040 80db 	bne.w	80037a4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f003 f90d 	bl	8006812 <USB_ReadDevAllInEpInterrupt>
 80035f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80035fe:	e0cd      	b.n	800379c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 80c2 	beq.w	8003790 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f003 f933 	bl	8006882 <USB_ReadDevInEPInterrupt>
 800361c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d057      	beq.n	80036d8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	2201      	movs	r2, #1
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800363c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	43db      	mvns	r3, r3
 8003642:	69f9      	ldr	r1, [r7, #28]
 8003644:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003648:	4013      	ands	r3, r2
 800364a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800364c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	4413      	add	r3, r2
 8003654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003658:	461a      	mov	r2, r3
 800365a:	2301      	movs	r3, #1
 800365c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	799b      	ldrb	r3, [r3, #6]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d132      	bne.n	80036cc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800366a:	4613      	mov	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	4413      	add	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	3320      	adds	r3, #32
 8003676:	6819      	ldr	r1, [r3, #0]
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800367c:	4613      	mov	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4403      	add	r3, r0
 8003686:	331c      	adds	r3, #28
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4419      	add	r1, r3
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003690:	4613      	mov	r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4403      	add	r3, r0
 800369a:	3320      	adds	r3, #32
 800369c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800369e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d113      	bne.n	80036cc <HAL_PCD_IRQHandler+0x3a2>
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a8:	4613      	mov	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	4413      	add	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	3324      	adds	r3, #36	@ 0x24
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d108      	bne.n	80036cc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036c4:	461a      	mov	r2, r3
 80036c6:	2101      	movs	r1, #1
 80036c8:	f003 f93a 	bl	8006940 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80036cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	4619      	mov	r1, r3
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f005 f903 	bl	80088de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d008      	beq.n	80036f4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80036e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e4:	015a      	lsls	r2, r3, #5
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036ee:	461a      	mov	r2, r3
 80036f0:	2308      	movs	r3, #8
 80036f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f003 0310 	and.w	r3, r3, #16
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d008      	beq.n	8003710 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80036fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	4413      	add	r3, r2
 8003706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800370a:	461a      	mov	r2, r3
 800370c:	2310      	movs	r3, #16
 800370e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d008      	beq.n	800372c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	4413      	add	r3, r2
 8003722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003726:	461a      	mov	r2, r3
 8003728:	2340      	movs	r3, #64	@ 0x40
 800372a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d023      	beq.n	800377e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003736:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003738:	6a38      	ldr	r0, [r7, #32]
 800373a:	f002 f921 	bl	8005980 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800373e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	3310      	adds	r3, #16
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	4413      	add	r3, r2
 800374e:	3304      	adds	r3, #4
 8003750:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	78db      	ldrb	r3, [r3, #3]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d108      	bne.n	800376c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2200      	movs	r2, #0
 800375e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003762:	b2db      	uxtb	r3, r3
 8003764:	4619      	mov	r1, r3
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f005 f950 	bl	8008a0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800376c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003778:	461a      	mov	r2, r3
 800377a:	2302      	movs	r3, #2
 800377c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003788:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 fca5 	bl	80040da <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003792:	3301      	adds	r3, #1
 8003794:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003798:	085b      	lsrs	r3, r3, #1
 800379a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800379c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f47f af2e 	bne.w	8003600 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f003 f805 	bl	80067b8 <USB_ReadInterrupts>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037b8:	d122      	bne.n	8003800 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	69fa      	ldr	r2, [r7, #28]
 80037c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d108      	bne.n	80037ea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037e0:	2100      	movs	r1, #0
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fe8c 	bl	8004500 <HAL_PCDEx_LPM_Callback>
 80037e8:	e002      	b.n	80037f0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f005 f8ee 	bl	80089cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695a      	ldr	r2, [r3, #20]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80037fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f002 ffd7 	bl	80067b8 <USB_ReadInterrupts>
 800380a:	4603      	mov	r3, r0
 800380c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003810:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003814:	d112      	bne.n	800383c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b01      	cmp	r3, #1
 8003824:	d102      	bne.n	800382c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f005 f8aa 	bl	8008980 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695a      	ldr	r2, [r3, #20]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800383a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f002 ffb9 	bl	80067b8 <USB_ReadInterrupts>
 8003846:	4603      	mov	r3, r0
 8003848:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800384c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003850:	f040 80b7 	bne.w	80039c2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	69fa      	ldr	r2, [r7, #28]
 800385e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003862:	f023 0301 	bic.w	r3, r3, #1
 8003866:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2110      	movs	r1, #16
 800386e:	4618      	mov	r0, r3
 8003870:	f002 f886 	bl	8005980 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003874:	2300      	movs	r3, #0
 8003876:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003878:	e046      	b.n	8003908 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800387a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	4413      	add	r3, r2
 8003882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003886:	461a      	mov	r2, r3
 8003888:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800388c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800388e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	4413      	add	r3, r2
 8003896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800389e:	0151      	lsls	r1, r2, #5
 80038a0:	69fa      	ldr	r2, [r7, #28]
 80038a2:	440a      	add	r2, r1
 80038a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80038ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80038ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038ba:	461a      	mov	r2, r3
 80038bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80038c0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80038c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038d2:	0151      	lsls	r1, r2, #5
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	440a      	add	r2, r1
 80038d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80038dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80038e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80038e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038f2:	0151      	lsls	r1, r2, #5
 80038f4:	69fa      	ldr	r2, [r7, #28]
 80038f6:	440a      	add	r2, r1
 80038f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80038fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003900:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003904:	3301      	adds	r3, #1
 8003906:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	791b      	ldrb	r3, [r3, #4]
 800390c:	461a      	mov	r2, r3
 800390e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003910:	4293      	cmp	r3, r2
 8003912:	d3b2      	bcc.n	800387a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	69fa      	ldr	r2, [r7, #28]
 800391e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003922:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003926:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	7bdb      	ldrb	r3, [r3, #15]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d016      	beq.n	800395e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003936:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800393a:	69fa      	ldr	r2, [r7, #28]
 800393c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003940:	f043 030b 	orr.w	r3, r3, #11
 8003944:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800394e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003950:	69fa      	ldr	r2, [r7, #28]
 8003952:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003956:	f043 030b 	orr.w	r3, r3, #11
 800395a:	6453      	str	r3, [r2, #68]	@ 0x44
 800395c:	e015      	b.n	800398a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	69fa      	ldr	r2, [r7, #28]
 8003968:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800396c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003970:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003974:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	69fa      	ldr	r2, [r7, #28]
 8003980:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003984:	f043 030b 	orr.w	r3, r3, #11
 8003988:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69fa      	ldr	r2, [r7, #28]
 8003994:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003998:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800399c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039ac:	461a      	mov	r2, r3
 80039ae:	f002 ffc7 	bl	8006940 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695a      	ldr	r2, [r3, #20]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80039c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f002 fef6 	bl	80067b8 <USB_ReadInterrupts>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039d6:	d123      	bne.n	8003a20 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f002 ff8c 	bl	80068fa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f002 f843 	bl	8005a72 <USB_GetDevSpeed>
 80039ec:	4603      	mov	r3, r0
 80039ee:	461a      	mov	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681c      	ldr	r4, [r3, #0]
 80039f8:	f001 f9f2 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 80039fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a02:	461a      	mov	r2, r3
 8003a04:	4620      	mov	r0, r4
 8003a06:	f001 fd47 	bl	8005498 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f004 ff8f 	bl	800892e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695a      	ldr	r2, [r3, #20]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003a1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f002 fec7 	bl	80067b8 <USB_ReadInterrupts>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d10a      	bne.n	8003a4a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f004 ff6c 	bl	8008912 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f002 0208 	and.w	r2, r2, #8
 8003a48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f002 feb2 	bl	80067b8 <USB_ReadInterrupts>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a5a:	2b80      	cmp	r3, #128	@ 0x80
 8003a5c:	d123      	bne.n	8003aa6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a6e:	e014      	b.n	8003a9a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a74:	4613      	mov	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d105      	bne.n	8003a94 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 faf2 	bl	8004078 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a96:	3301      	adds	r3, #1
 8003a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	791b      	ldrb	r3, [r3, #4]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d3e4      	bcc.n	8003a70 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f002 fe84 	bl	80067b8 <USB_ReadInterrupts>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003aba:	d13c      	bne.n	8003b36 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003abc:	2301      	movs	r3, #1
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ac0:	e02b      	b.n	8003b1a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	3318      	adds	r3, #24
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d115      	bne.n	8003b14 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003ae8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	da12      	bge.n	8003b14 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	3317      	adds	r3, #23
 8003afe:	2201      	movs	r2, #1
 8003b00:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fab2 	bl	8004078 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b16:	3301      	adds	r3, #1
 8003b18:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	791b      	ldrb	r3, [r3, #4]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d3cd      	bcc.n	8003ac2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003b34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f002 fe3c 	bl	80067b8 <USB_ReadInterrupts>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b4a:	d156      	bne.n	8003bfa <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b50:	e045      	b.n	8003bde <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b66:	4613      	mov	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	440b      	add	r3, r1
 8003b70:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d12e      	bne.n	8003bd8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b7a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	da2b      	bge.n	8003bd8 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	0c1a      	lsrs	r2, r3, #16
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003b8a:	4053      	eors	r3, r2
 8003b8c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d121      	bne.n	8003bd8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b98:	4613      	mov	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10a      	bne.n	8003bd8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bd0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bd4:	6053      	str	r3, [r2, #4]
            break;
 8003bd6:	e008      	b.n	8003bea <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bda:	3301      	adds	r3, #1
 8003bdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	791b      	ldrb	r3, [r3, #4]
 8003be2:	461a      	mov	r2, r3
 8003be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d3b3      	bcc.n	8003b52 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695a      	ldr	r2, [r3, #20]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003bf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f002 fdda 	bl	80067b8 <USB_ReadInterrupts>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c0e:	d10a      	bne.n	8003c26 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f004 ff0d 	bl	8008a30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695a      	ldr	r2, [r3, #20]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003c24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f002 fdc4 	bl	80067b8 <USB_ReadInterrupts>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d115      	bne.n	8003c66 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f004 fefd 	bl	8008a4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6859      	ldr	r1, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
 8003c62:	e000      	b.n	8003c66 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003c64:	bf00      	nop
    }
  }
}
 8003c66:	3734      	adds	r7, #52	@ 0x34
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd90      	pop	{r4, r7, pc}

08003c6c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	460b      	mov	r3, r1
 8003c76:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_PCD_SetAddress+0x1a>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e012      	b.n	8003cac <HAL_PCD_SetAddress+0x40>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	78fa      	ldrb	r2, [r7, #3]
 8003c92:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	78fa      	ldrb	r2, [r7, #3]
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f002 fd23 	bl	80066e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	4608      	mov	r0, r1
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	70fb      	strb	r3, [r7, #3]
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	803b      	strh	r3, [r7, #0]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	da0f      	bge.n	8003cfa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cda:	78fb      	ldrb	r3, [r7, #3]
 8003cdc:	f003 020f 	and.w	r2, r3, #15
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	3310      	adds	r3, #16
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	4413      	add	r3, r2
 8003cee:	3304      	adds	r3, #4
 8003cf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	705a      	strb	r2, [r3, #1]
 8003cf8:	e00f      	b.n	8003d1a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	f003 020f 	and.w	r2, r3, #15
 8003d00:	4613      	mov	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	4413      	add	r3, r2
 8003d10:	3304      	adds	r3, #4
 8003d12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d1a:	78fb      	ldrb	r3, [r7, #3]
 8003d1c:	f003 030f 	and.w	r3, r3, #15
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003d26:	883b      	ldrh	r3, [r7, #0]
 8003d28:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	78ba      	ldrb	r2, [r7, #2]
 8003d34:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	785b      	ldrb	r3, [r3, #1]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d004      	beq.n	8003d48 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d48:	78bb      	ldrb	r3, [r7, #2]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d102      	bne.n	8003d54 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_PCD_EP_Open+0xae>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e00e      	b.n	8003d80 <HAL_PCD_EP_Open+0xcc>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68f9      	ldr	r1, [r7, #12]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f001 fea3 	bl	8005abc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003d7e:	7afb      	ldrb	r3, [r7, #11]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	460b      	mov	r3, r1
 8003d92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	da0f      	bge.n	8003dbc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	f003 020f 	and.w	r2, r3, #15
 8003da2:	4613      	mov	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	3310      	adds	r3, #16
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	4413      	add	r3, r2
 8003db0:	3304      	adds	r3, #4
 8003db2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	705a      	strb	r2, [r3, #1]
 8003dba:	e00f      	b.n	8003ddc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	f003 020f 	and.w	r2, r3, #15
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <HAL_PCD_EP_Close+0x6e>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e00e      	b.n	8003e14 <HAL_PCD_EP_Close+0x8c>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68f9      	ldr	r1, [r7, #12]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f001 fee1 	bl	8005bcc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	607a      	str	r2, [r7, #4]
 8003e26:	603b      	str	r3, [r7, #0]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e2c:	7afb      	ldrb	r3, [r7, #11]
 8003e2e:	f003 020f 	and.w	r2, r3, #15
 8003e32:	4613      	mov	r3, r2
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4413      	add	r3, r2
 8003e42:	3304      	adds	r3, #4
 8003e44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2200      	movs	r2, #0
 8003e56:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e5e:	7afb      	ldrb	r3, [r7, #11]
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	799b      	ldrb	r3, [r3, #6]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d102      	bne.n	8003e78 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	799b      	ldrb	r3, [r3, #6]
 8003e80:	461a      	mov	r2, r3
 8003e82:	6979      	ldr	r1, [r7, #20]
 8003e84:	f001 ff7e 	bl	8005d84 <USB_EPStartXfer>

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b086      	sub	sp, #24
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ea2:	7afb      	ldrb	r3, [r7, #11]
 8003ea4:	f003 020f 	and.w	r2, r3, #15
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	3310      	adds	r3, #16
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ed2:	7afb      	ldrb	r3, [r7, #11]
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	799b      	ldrb	r3, [r3, #6]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d102      	bne.n	8003eec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	799b      	ldrb	r3, [r3, #6]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	6979      	ldr	r1, [r7, #20]
 8003ef8:	f001 ff44 	bl	8005d84 <USB_EPStartXfer>

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b084      	sub	sp, #16
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f12:	78fb      	ldrb	r3, [r7, #3]
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	7912      	ldrb	r2, [r2, #4]
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d901      	bls.n	8003f24 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e04f      	b.n	8003fc4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	da0f      	bge.n	8003f4c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	f003 020f 	and.w	r2, r3, #15
 8003f32:	4613      	mov	r3, r2
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	4413      	add	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	3310      	adds	r3, #16
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	4413      	add	r3, r2
 8003f40:	3304      	adds	r3, #4
 8003f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	705a      	strb	r2, [r3, #1]
 8003f4a:	e00d      	b.n	8003f68 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f4c:	78fa      	ldrb	r2, [r7, #3]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	3304      	adds	r3, #4
 8003f60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_PCD_EP_SetStall+0x82>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e01d      	b.n	8003fc4 <HAL_PCD_EP_SetStall+0xbe>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68f9      	ldr	r1, [r7, #12]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f002 fad2 	bl	8006540 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f9c:	78fb      	ldrb	r3, [r7, #3]
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d109      	bne.n	8003fba <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6818      	ldr	r0, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	7999      	ldrb	r1, [r3, #6]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	f002 fcc3 	bl	8006940 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003fd8:	78fb      	ldrb	r3, [r7, #3]
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	7912      	ldrb	r2, [r2, #4]
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d901      	bls.n	8003fea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e042      	b.n	8004070 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	da0f      	bge.n	8004012 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ff2:	78fb      	ldrb	r3, [r7, #3]
 8003ff4:	f003 020f 	and.w	r2, r3, #15
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	3310      	adds	r3, #16
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	4413      	add	r3, r2
 8004006:	3304      	adds	r3, #4
 8004008:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2201      	movs	r2, #1
 800400e:	705a      	strb	r2, [r3, #1]
 8004010:	e00f      	b.n	8004032 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004012:	78fb      	ldrb	r3, [r7, #3]
 8004014:	f003 020f 	and.w	r2, r3, #15
 8004018:	4613      	mov	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	4413      	add	r3, r2
 8004028:	3304      	adds	r3, #4
 800402a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004038:	78fb      	ldrb	r3, [r7, #3]
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	b2da      	uxtb	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_PCD_EP_ClrStall+0x86>
 800404e:	2302      	movs	r3, #2
 8004050:	e00e      	b.n	8004070 <HAL_PCD_EP_ClrStall+0xa4>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68f9      	ldr	r1, [r7, #12]
 8004060:	4618      	mov	r0, r3
 8004062:	f002 fadb 	bl	800661c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004088:	2b00      	cmp	r3, #0
 800408a:	da0c      	bge.n	80040a6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800408c:	78fb      	ldrb	r3, [r7, #3]
 800408e:	f003 020f 	and.w	r2, r3, #15
 8004092:	4613      	mov	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	3310      	adds	r3, #16
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	4413      	add	r3, r2
 80040a0:	3304      	adds	r3, #4
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	e00c      	b.n	80040c0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040a6:	78fb      	ldrb	r3, [r7, #3]
 80040a8:	f003 020f 	and.w	r2, r3, #15
 80040ac:	4613      	mov	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	4413      	add	r3, r2
 80040bc:	3304      	adds	r3, #4
 80040be:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68f9      	ldr	r1, [r7, #12]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f002 f8fa 	bl	80062c0 <USB_EPStopXfer>
 80040cc:	4603      	mov	r3, r0
 80040ce:	72fb      	strb	r3, [r7, #11]

  return ret;
 80040d0:	7afb      	ldrb	r3, [r7, #11]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b08a      	sub	sp, #40	@ 0x28
 80040de:	af02      	add	r7, sp, #8
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	4613      	mov	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	4413      	add	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	3310      	adds	r3, #16
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	4413      	add	r3, r2
 80040fe:	3304      	adds	r3, #4
 8004100:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	695a      	ldr	r2, [r3, #20]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	429a      	cmp	r2, r3
 800410c:	d901      	bls.n	8004112 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e06b      	b.n	80041ea <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	69fa      	ldr	r2, [r7, #28]
 8004124:	429a      	cmp	r2, r3
 8004126:	d902      	bls.n	800412e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	3303      	adds	r3, #3
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004136:	e02a      	b.n	800418e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	69fa      	ldr	r2, [r7, #28]
 800414a:	429a      	cmp	r2, r3
 800414c:	d902      	bls.n	8004154 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	3303      	adds	r3, #3
 8004158:	089b      	lsrs	r3, r3, #2
 800415a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	68d9      	ldr	r1, [r3, #12]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	b2da      	uxtb	r2, r3
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	4603      	mov	r3, r0
 8004170:	6978      	ldr	r0, [r7, #20]
 8004172:	f002 f94f 	bl	8006414 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	441a      	add	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	695a      	ldr	r2, [r3, #20]
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	441a      	add	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d809      	bhi.n	80041b8 <PCD_WriteEmptyTxFifo+0xde>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	695a      	ldr	r2, [r3, #20]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d203      	bcs.n	80041b8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1bf      	bne.n	8004138 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d811      	bhi.n	80041e8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	2201      	movs	r2, #1
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	43db      	mvns	r3, r3
 80041de:	6939      	ldr	r1, [r7, #16]
 80041e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041e4:	4013      	ands	r3, r2
 80041e6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3720      	adds	r7, #32
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	333c      	adds	r3, #60	@ 0x3c
 800420c:	3304      	adds	r3, #4
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	799b      	ldrb	r3, [r3, #6]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d17b      	bne.n	8004322 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b00      	cmp	r3, #0
 8004232:	d015      	beq.n	8004260 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	4a61      	ldr	r2, [pc, #388]	@ (80043bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	f240 80b9 	bls.w	80043b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 80b3 	beq.w	80043b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	4413      	add	r3, r2
 8004252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004256:	461a      	mov	r2, r3
 8004258:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800425c:	6093      	str	r3, [r2, #8]
 800425e:	e0a7      	b.n	80043b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b00      	cmp	r3, #0
 8004268:	d009      	beq.n	800427e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	4413      	add	r3, r2
 8004272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004276:	461a      	mov	r2, r3
 8004278:	2320      	movs	r3, #32
 800427a:	6093      	str	r3, [r2, #8]
 800427c:	e098      	b.n	80043b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004284:	2b00      	cmp	r3, #0
 8004286:	f040 8093 	bne.w	80043b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	4a4b      	ldr	r2, [pc, #300]	@ (80043bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d90f      	bls.n	80042b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a8:	461a      	mov	r2, r3
 80042aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ae:	6093      	str	r3, [r2, #8]
 80042b0:	e07e      	b.n	80043b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	4413      	add	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	4413      	add	r3, r2
 80042c4:	3304      	adds	r3, #4
 80042c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a1a      	ldr	r2, [r3, #32]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	0159      	lsls	r1, r3, #5
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	440b      	add	r3, r1
 80042d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042de:	1ad2      	subs	r2, r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d114      	bne.n	8004314 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d109      	bne.n	8004306 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6818      	ldr	r0, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80042fc:	461a      	mov	r2, r3
 80042fe:	2101      	movs	r1, #1
 8004300:	f002 fb1e 	bl	8006940 <USB_EP0_OutStart>
 8004304:	e006      	b.n	8004314 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	441a      	add	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	4619      	mov	r1, r3
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f004 fac4 	bl	80088a8 <HAL_PCD_DataOutStageCallback>
 8004320:	e046      	b.n	80043b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	4a26      	ldr	r2, [pc, #152]	@ (80043c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d124      	bne.n	8004374 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00a      	beq.n	800434a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004340:	461a      	mov	r2, r3
 8004342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004346:	6093      	str	r3, [r2, #8]
 8004348:	e032      	b.n	80043b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f003 0320 	and.w	r3, r3, #32
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004360:	461a      	mov	r2, r3
 8004362:	2320      	movs	r3, #32
 8004364:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	4619      	mov	r1, r3
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f004 fa9b 	bl	80088a8 <HAL_PCD_DataOutStageCallback>
 8004372:	e01d      	b.n	80043b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d114      	bne.n	80043a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	4613      	mov	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d108      	bne.n	80043a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800439c:	461a      	mov	r2, r3
 800439e:	2100      	movs	r1, #0
 80043a0:	f002 face 	bl	8006940 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	4619      	mov	r1, r3
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f004 fa7c 	bl	80088a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3720      	adds	r7, #32
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	4f54300a 	.word	0x4f54300a
 80043c0:	4f54310a 	.word	0x4f54310a

080043c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	333c      	adds	r3, #60	@ 0x3c
 80043dc:	3304      	adds	r3, #4
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4a15      	ldr	r2, [pc, #84]	@ (800444c <PCD_EP_OutSetupPacket_int+0x88>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d90e      	bls.n	8004418 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004400:	2b00      	cmp	r3, #0
 8004402:	d009      	beq.n	8004418 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004410:	461a      	mov	r2, r3
 8004412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004416:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f004 fa33 	bl	8008884 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4a0a      	ldr	r2, [pc, #40]	@ (800444c <PCD_EP_OutSetupPacket_int+0x88>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d90c      	bls.n	8004440 <PCD_EP_OutSetupPacket_int+0x7c>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	799b      	ldrb	r3, [r3, #6]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d108      	bne.n	8004440 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004438:	461a      	mov	r2, r3
 800443a:	2101      	movs	r1, #1
 800443c:	f002 fa80 	bl	8006940 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	4f54300a 	.word	0x4f54300a

08004450 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	70fb      	strb	r3, [r7, #3]
 800445c:	4613      	mov	r3, r2
 800445e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d107      	bne.n	800447e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800446e:	883b      	ldrh	r3, [r7, #0]
 8004470:	0419      	lsls	r1, r3, #16
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	430a      	orrs	r2, r1
 800447a:	629a      	str	r2, [r3, #40]	@ 0x28
 800447c:	e028      	b.n	80044d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004484:	0c1b      	lsrs	r3, r3, #16
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	4413      	add	r3, r2
 800448a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800448c:	2300      	movs	r3, #0
 800448e:	73fb      	strb	r3, [r7, #15]
 8004490:	e00d      	b.n	80044ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	7bfb      	ldrb	r3, [r7, #15]
 8004498:	3340      	adds	r3, #64	@ 0x40
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	0c1b      	lsrs	r3, r3, #16
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	4413      	add	r3, r2
 80044a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	3301      	adds	r3, #1
 80044ac:	73fb      	strb	r3, [r7, #15]
 80044ae:	7bfa      	ldrb	r2, [r7, #15]
 80044b0:	78fb      	ldrb	r3, [r7, #3]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d3ec      	bcc.n	8004492 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80044b8:	883b      	ldrh	r3, [r7, #0]
 80044ba:	0418      	lsls	r0, r3, #16
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6819      	ldr	r1, [r3, #0]
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	4302      	orrs	r2, r0
 80044c8:	3340      	adds	r3, #64	@ 0x40
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	460b      	mov	r3, r1
 80044e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	887a      	ldrh	r2, [r7, #2]
 80044f0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e267      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d075      	beq.n	8004622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004536:	4b88      	ldr	r3, [pc, #544]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 030c 	and.w	r3, r3, #12
 800453e:	2b04      	cmp	r3, #4
 8004540:	d00c      	beq.n	800455c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004542:	4b85      	ldr	r3, [pc, #532]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800454a:	2b08      	cmp	r3, #8
 800454c:	d112      	bne.n	8004574 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800454e:	4b82      	ldr	r3, [pc, #520]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004556:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800455a:	d10b      	bne.n	8004574 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800455c:	4b7e      	ldr	r3, [pc, #504]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d05b      	beq.n	8004620 <HAL_RCC_OscConfig+0x108>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d157      	bne.n	8004620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e242      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800457c:	d106      	bne.n	800458c <HAL_RCC_OscConfig+0x74>
 800457e:	4b76      	ldr	r3, [pc, #472]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a75      	ldr	r2, [pc, #468]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 8004584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	e01d      	b.n	80045c8 <HAL_RCC_OscConfig+0xb0>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004594:	d10c      	bne.n	80045b0 <HAL_RCC_OscConfig+0x98>
 8004596:	4b70      	ldr	r3, [pc, #448]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a6f      	ldr	r2, [pc, #444]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 800459c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a6c      	ldr	r2, [pc, #432]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 80045a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	e00b      	b.n	80045c8 <HAL_RCC_OscConfig+0xb0>
 80045b0:	4b69      	ldr	r3, [pc, #420]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a68      	ldr	r2, [pc, #416]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 80045b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	4b66      	ldr	r3, [pc, #408]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a65      	ldr	r2, [pc, #404]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 80045c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d013      	beq.n	80045f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d0:	f7fd f998 	bl	8001904 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d8:	f7fd f994 	bl	8001904 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b64      	cmp	r3, #100	@ 0x64
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e207      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ea:	4b5b      	ldr	r3, [pc, #364]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0f0      	beq.n	80045d8 <HAL_RCC_OscConfig+0xc0>
 80045f6:	e014      	b.n	8004622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f8:	f7fd f984 	bl	8001904 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004600:	f7fd f980 	bl	8001904 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b64      	cmp	r3, #100	@ 0x64
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e1f3      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004612:	4b51      	ldr	r3, [pc, #324]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f0      	bne.n	8004600 <HAL_RCC_OscConfig+0xe8>
 800461e:	e000      	b.n	8004622 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d063      	beq.n	80046f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800462e:	4b4a      	ldr	r3, [pc, #296]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00b      	beq.n	8004652 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800463a:	4b47      	ldr	r3, [pc, #284]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004642:	2b08      	cmp	r3, #8
 8004644:	d11c      	bne.n	8004680 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004646:	4b44      	ldr	r3, [pc, #272]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d116      	bne.n	8004680 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004652:	4b41      	ldr	r3, [pc, #260]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d005      	beq.n	800466a <HAL_RCC_OscConfig+0x152>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d001      	beq.n	800466a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e1c7      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800466a:	4b3b      	ldr	r3, [pc, #236]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	4937      	ldr	r1, [pc, #220]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 800467a:	4313      	orrs	r3, r2
 800467c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800467e:	e03a      	b.n	80046f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d020      	beq.n	80046ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004688:	4b34      	ldr	r3, [pc, #208]	@ (800475c <HAL_RCC_OscConfig+0x244>)
 800468a:	2201      	movs	r2, #1
 800468c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468e:	f7fd f939 	bl	8001904 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004696:	f7fd f935 	bl	8001904 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e1a8      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f0      	beq.n	8004696 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b4:	4b28      	ldr	r3, [pc, #160]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	4925      	ldr	r1, [pc, #148]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	600b      	str	r3, [r1, #0]
 80046c8:	e015      	b.n	80046f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ca:	4b24      	ldr	r3, [pc, #144]	@ (800475c <HAL_RCC_OscConfig+0x244>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d0:	f7fd f918 	bl	8001904 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046d8:	f7fd f914 	bl	8001904 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e187      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f0      	bne.n	80046d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d036      	beq.n	8004770 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d016      	beq.n	8004738 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800470a:	4b15      	ldr	r3, [pc, #84]	@ (8004760 <HAL_RCC_OscConfig+0x248>)
 800470c:	2201      	movs	r2, #1
 800470e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004710:	f7fd f8f8 	bl	8001904 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004718:	f7fd f8f4 	bl	8001904 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e167      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800472a:	4b0b      	ldr	r3, [pc, #44]	@ (8004758 <HAL_RCC_OscConfig+0x240>)
 800472c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f0      	beq.n	8004718 <HAL_RCC_OscConfig+0x200>
 8004736:	e01b      	b.n	8004770 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004738:	4b09      	ldr	r3, [pc, #36]	@ (8004760 <HAL_RCC_OscConfig+0x248>)
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800473e:	f7fd f8e1 	bl	8001904 <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004744:	e00e      	b.n	8004764 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004746:	f7fd f8dd 	bl	8001904 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d907      	bls.n	8004764 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e150      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
 8004758:	40023800 	.word	0x40023800
 800475c:	42470000 	.word	0x42470000
 8004760:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004764:	4b88      	ldr	r3, [pc, #544]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004766:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1ea      	bne.n	8004746 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 8097 	beq.w	80048ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800477e:	2300      	movs	r3, #0
 8004780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004782:	4b81      	ldr	r3, [pc, #516]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10f      	bne.n	80047ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800478e:	2300      	movs	r3, #0
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	4b7d      	ldr	r3, [pc, #500]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004796:	4a7c      	ldr	r2, [pc, #496]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800479c:	6413      	str	r3, [r2, #64]	@ 0x40
 800479e:	4b7a      	ldr	r3, [pc, #488]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 80047a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047a6:	60bb      	str	r3, [r7, #8]
 80047a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047aa:	2301      	movs	r3, #1
 80047ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ae:	4b77      	ldr	r3, [pc, #476]	@ (800498c <HAL_RCC_OscConfig+0x474>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d118      	bne.n	80047ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ba:	4b74      	ldr	r3, [pc, #464]	@ (800498c <HAL_RCC_OscConfig+0x474>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a73      	ldr	r2, [pc, #460]	@ (800498c <HAL_RCC_OscConfig+0x474>)
 80047c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c6:	f7fd f89d 	bl	8001904 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ce:	f7fd f899 	bl	8001904 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e10c      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e0:	4b6a      	ldr	r3, [pc, #424]	@ (800498c <HAL_RCC_OscConfig+0x474>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0f0      	beq.n	80047ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d106      	bne.n	8004802 <HAL_RCC_OscConfig+0x2ea>
 80047f4:	4b64      	ldr	r3, [pc, #400]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 80047f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f8:	4a63      	ldr	r2, [pc, #396]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004800:	e01c      	b.n	800483c <HAL_RCC_OscConfig+0x324>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	2b05      	cmp	r3, #5
 8004808:	d10c      	bne.n	8004824 <HAL_RCC_OscConfig+0x30c>
 800480a:	4b5f      	ldr	r3, [pc, #380]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 800480c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480e:	4a5e      	ldr	r2, [pc, #376]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004810:	f043 0304 	orr.w	r3, r3, #4
 8004814:	6713      	str	r3, [r2, #112]	@ 0x70
 8004816:	4b5c      	ldr	r3, [pc, #368]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800481a:	4a5b      	ldr	r2, [pc, #364]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 800481c:	f043 0301 	orr.w	r3, r3, #1
 8004820:	6713      	str	r3, [r2, #112]	@ 0x70
 8004822:	e00b      	b.n	800483c <HAL_RCC_OscConfig+0x324>
 8004824:	4b58      	ldr	r3, [pc, #352]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004828:	4a57      	ldr	r2, [pc, #348]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 800482a:	f023 0301 	bic.w	r3, r3, #1
 800482e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004830:	4b55      	ldr	r3, [pc, #340]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004834:	4a54      	ldr	r2, [pc, #336]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004836:	f023 0304 	bic.w	r3, r3, #4
 800483a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d015      	beq.n	8004870 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004844:	f7fd f85e 	bl	8001904 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800484a:	e00a      	b.n	8004862 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800484c:	f7fd f85a 	bl	8001904 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800485a:	4293      	cmp	r3, r2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e0cb      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004862:	4b49      	ldr	r3, [pc, #292]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0ee      	beq.n	800484c <HAL_RCC_OscConfig+0x334>
 800486e:	e014      	b.n	800489a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004870:	f7fd f848 	bl	8001904 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004876:	e00a      	b.n	800488e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004878:	f7fd f844 	bl	8001904 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004886:	4293      	cmp	r3, r2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e0b5      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800488e:	4b3e      	ldr	r3, [pc, #248]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1ee      	bne.n	8004878 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800489a:	7dfb      	ldrb	r3, [r7, #23]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d105      	bne.n	80048ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a0:	4b39      	ldr	r3, [pc, #228]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 80048a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a4:	4a38      	ldr	r2, [pc, #224]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 80048a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 80a1 	beq.w	80049f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048b6:	4b34      	ldr	r3, [pc, #208]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d05c      	beq.n	800497c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d141      	bne.n	800494e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ca:	4b31      	ldr	r3, [pc, #196]	@ (8004990 <HAL_RCC_OscConfig+0x478>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d0:	f7fd f818 	bl	8001904 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d8:	f7fd f814 	bl	8001904 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e087      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ea:	4b27      	ldr	r3, [pc, #156]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69da      	ldr	r2, [r3, #28]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	019b      	lsls	r3, r3, #6
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490c:	085b      	lsrs	r3, r3, #1
 800490e:	3b01      	subs	r3, #1
 8004910:	041b      	lsls	r3, r3, #16
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004918:	061b      	lsls	r3, r3, #24
 800491a:	491b      	ldr	r1, [pc, #108]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 800491c:	4313      	orrs	r3, r2
 800491e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004920:	4b1b      	ldr	r3, [pc, #108]	@ (8004990 <HAL_RCC_OscConfig+0x478>)
 8004922:	2201      	movs	r2, #1
 8004924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004926:	f7fc ffed 	bl	8001904 <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800492e:	f7fc ffe9 	bl	8001904 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e05c      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004940:	4b11      	ldr	r3, [pc, #68]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0f0      	beq.n	800492e <HAL_RCC_OscConfig+0x416>
 800494c:	e054      	b.n	80049f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494e:	4b10      	ldr	r3, [pc, #64]	@ (8004990 <HAL_RCC_OscConfig+0x478>)
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004954:	f7fc ffd6 	bl	8001904 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800495c:	f7fc ffd2 	bl	8001904 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e045      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496e:	4b06      	ldr	r3, [pc, #24]	@ (8004988 <HAL_RCC_OscConfig+0x470>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1f0      	bne.n	800495c <HAL_RCC_OscConfig+0x444>
 800497a:	e03d      	b.n	80049f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d107      	bne.n	8004994 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e038      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
 8004988:	40023800 	.word	0x40023800
 800498c:	40007000 	.word	0x40007000
 8004990:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004994:	4b1b      	ldr	r3, [pc, #108]	@ (8004a04 <HAL_RCC_OscConfig+0x4ec>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d028      	beq.n	80049f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d121      	bne.n	80049f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d11a      	bne.n	80049f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80049c4:	4013      	ands	r3, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d111      	bne.n	80049f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049da:	085b      	lsrs	r3, r3, #1
 80049dc:	3b01      	subs	r3, #1
 80049de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d107      	bne.n	80049f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d001      	beq.n	80049f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40023800 	.word	0x40023800

08004a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e0cc      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a1c:	4b68      	ldr	r3, [pc, #416]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 030f 	and.w	r3, r3, #15
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d90c      	bls.n	8004a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2a:	4b65      	ldr	r3, [pc, #404]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a32:	4b63      	ldr	r3, [pc, #396]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d001      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e0b8      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d020      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d005      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a5c:	4b59      	ldr	r3, [pc, #356]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	4a58      	ldr	r2, [pc, #352]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0308 	and.w	r3, r3, #8
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d005      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a74:	4b53      	ldr	r3, [pc, #332]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	4a52      	ldr	r2, [pc, #328]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a80:	4b50      	ldr	r3, [pc, #320]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	494d      	ldr	r1, [pc, #308]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d044      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d107      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa6:	4b47      	ldr	r3, [pc, #284]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d119      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e07f      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d003      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	d107      	bne.n	8004ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac6:	4b3f      	ldr	r3, [pc, #252]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d109      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e06f      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad6:	4b3b      	ldr	r3, [pc, #236]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e067      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ae6:	4b37      	ldr	r3, [pc, #220]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f023 0203 	bic.w	r2, r3, #3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	4934      	ldr	r1, [pc, #208]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004af8:	f7fc ff04 	bl	8001904 <HAL_GetTick>
 8004afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afe:	e00a      	b.n	8004b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b00:	f7fc ff00 	bl	8001904 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e04f      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b16:	4b2b      	ldr	r3, [pc, #172]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 020c 	and.w	r2, r3, #12
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d1eb      	bne.n	8004b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b28:	4b25      	ldr	r3, [pc, #148]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 030f 	and.w	r3, r3, #15
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d20c      	bcs.n	8004b50 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b36:	4b22      	ldr	r3, [pc, #136]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3e:	4b20      	ldr	r3, [pc, #128]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e032      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d008      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b5c:	4b19      	ldr	r3, [pc, #100]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	4916      	ldr	r1, [pc, #88]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d009      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b7a:	4b12      	ldr	r3, [pc, #72]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	490e      	ldr	r1, [pc, #56]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b8e:	f000 f821 	bl	8004bd4 <HAL_RCC_GetSysClockFreq>
 8004b92:	4602      	mov	r2, r0
 8004b94:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	091b      	lsrs	r3, r3, #4
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	490a      	ldr	r1, [pc, #40]	@ (8004bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004ba0:	5ccb      	ldrb	r3, [r1, r3]
 8004ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba6:	4a09      	ldr	r2, [pc, #36]	@ (8004bcc <HAL_RCC_ClockConfig+0x1c4>)
 8004ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004baa:	4b09      	ldr	r3, [pc, #36]	@ (8004bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fc fe64 	bl	800187c <HAL_InitTick>

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	40023c00 	.word	0x40023c00
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	08008ea4 	.word	0x08008ea4
 8004bcc:	20000058 	.word	0x20000058
 8004bd0:	2000005c 	.word	0x2000005c

08004bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bd8:	b094      	sub	sp, #80	@ 0x50
 8004bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bec:	4b79      	ldr	r3, [pc, #484]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 030c 	and.w	r3, r3, #12
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d00d      	beq.n	8004c14 <HAL_RCC_GetSysClockFreq+0x40>
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	f200 80e1 	bhi.w	8004dc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <HAL_RCC_GetSysClockFreq+0x34>
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d003      	beq.n	8004c0e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c06:	e0db      	b.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c08:	4b73      	ldr	r3, [pc, #460]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c0c:	e0db      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c0e:	4b73      	ldr	r3, [pc, #460]	@ (8004ddc <HAL_RCC_GetSysClockFreq+0x208>)
 8004c10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c12:	e0d8      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c14:	4b6f      	ldr	r3, [pc, #444]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c1c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c1e:	4b6d      	ldr	r3, [pc, #436]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d063      	beq.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c2a:	4b6a      	ldr	r3, [pc, #424]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	099b      	lsrs	r3, r3, #6
 8004c30:	2200      	movs	r2, #0
 8004c32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c3e:	2300      	movs	r3, #0
 8004c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c46:	4622      	mov	r2, r4
 8004c48:	462b      	mov	r3, r5
 8004c4a:	f04f 0000 	mov.w	r0, #0
 8004c4e:	f04f 0100 	mov.w	r1, #0
 8004c52:	0159      	lsls	r1, r3, #5
 8004c54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c58:	0150      	lsls	r0, r2, #5
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4621      	mov	r1, r4
 8004c60:	1a51      	subs	r1, r2, r1
 8004c62:	6139      	str	r1, [r7, #16]
 8004c64:	4629      	mov	r1, r5
 8004c66:	eb63 0301 	sbc.w	r3, r3, r1
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c78:	4659      	mov	r1, fp
 8004c7a:	018b      	lsls	r3, r1, #6
 8004c7c:	4651      	mov	r1, sl
 8004c7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c82:	4651      	mov	r1, sl
 8004c84:	018a      	lsls	r2, r1, #6
 8004c86:	4651      	mov	r1, sl
 8004c88:	ebb2 0801 	subs.w	r8, r2, r1
 8004c8c:	4659      	mov	r1, fp
 8004c8e:	eb63 0901 	sbc.w	r9, r3, r1
 8004c92:	f04f 0200 	mov.w	r2, #0
 8004c96:	f04f 0300 	mov.w	r3, #0
 8004c9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ca2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ca6:	4690      	mov	r8, r2
 8004ca8:	4699      	mov	r9, r3
 8004caa:	4623      	mov	r3, r4
 8004cac:	eb18 0303 	adds.w	r3, r8, r3
 8004cb0:	60bb      	str	r3, [r7, #8]
 8004cb2:	462b      	mov	r3, r5
 8004cb4:	eb49 0303 	adc.w	r3, r9, r3
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cc6:	4629      	mov	r1, r5
 8004cc8:	024b      	lsls	r3, r1, #9
 8004cca:	4621      	mov	r1, r4
 8004ccc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	024a      	lsls	r2, r1, #9
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cda:	2200      	movs	r2, #0
 8004cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ce0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ce4:	f7fb fe78 	bl	80009d8 <__aeabi_uldivmod>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4613      	mov	r3, r2
 8004cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cf0:	e058      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cf2:	4b38      	ldr	r3, [pc, #224]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	099b      	lsrs	r3, r3, #6
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	4611      	mov	r1, r2
 8004cfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d02:	623b      	str	r3, [r7, #32]
 8004d04:	2300      	movs	r3, #0
 8004d06:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d0c:	4642      	mov	r2, r8
 8004d0e:	464b      	mov	r3, r9
 8004d10:	f04f 0000 	mov.w	r0, #0
 8004d14:	f04f 0100 	mov.w	r1, #0
 8004d18:	0159      	lsls	r1, r3, #5
 8004d1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d1e:	0150      	lsls	r0, r2, #5
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4641      	mov	r1, r8
 8004d26:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d44:	ebb2 040a 	subs.w	r4, r2, sl
 8004d48:	eb63 050b 	sbc.w	r5, r3, fp
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	00eb      	lsls	r3, r5, #3
 8004d56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d5a:	00e2      	lsls	r2, r4, #3
 8004d5c:	4614      	mov	r4, r2
 8004d5e:	461d      	mov	r5, r3
 8004d60:	4643      	mov	r3, r8
 8004d62:	18e3      	adds	r3, r4, r3
 8004d64:	603b      	str	r3, [r7, #0]
 8004d66:	464b      	mov	r3, r9
 8004d68:	eb45 0303 	adc.w	r3, r5, r3
 8004d6c:	607b      	str	r3, [r7, #4]
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	028b      	lsls	r3, r1, #10
 8004d7e:	4621      	mov	r1, r4
 8004d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d84:	4621      	mov	r1, r4
 8004d86:	028a      	lsls	r2, r1, #10
 8004d88:	4610      	mov	r0, r2
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d8e:	2200      	movs	r2, #0
 8004d90:	61bb      	str	r3, [r7, #24]
 8004d92:	61fa      	str	r2, [r7, #28]
 8004d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d98:	f7fb fe1e 	bl	80009d8 <__aeabi_uldivmod>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4613      	mov	r3, r2
 8004da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004da4:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	0c1b      	lsrs	r3, r3, #16
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	3301      	adds	r3, #1
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004db4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004db6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dbe:	e002      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dc0:	4b05      	ldr	r3, [pc, #20]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3750      	adds	r7, #80	@ 0x50
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	00f42400 	.word	0x00f42400
 8004ddc:	007a1200 	.word	0x007a1200

08004de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004de4:	4b03      	ldr	r3, [pc, #12]	@ (8004df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004de6:	681b      	ldr	r3, [r3, #0]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	20000058 	.word	0x20000058

08004df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004dfc:	f7ff fff0 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8004e00:	4602      	mov	r2, r0
 8004e02:	4b05      	ldr	r3, [pc, #20]	@ (8004e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	0a9b      	lsrs	r3, r3, #10
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	4903      	ldr	r1, [pc, #12]	@ (8004e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e0e:	5ccb      	ldrb	r3, [r1, r3]
 8004e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	40023800 	.word	0x40023800
 8004e1c:	08008eb4 	.word	0x08008eb4

08004e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e24:	f7ff ffdc 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	4b05      	ldr	r3, [pc, #20]	@ (8004e40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	0b5b      	lsrs	r3, r3, #13
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	4903      	ldr	r1, [pc, #12]	@ (8004e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e36:	5ccb      	ldrb	r3, [r1, r3]
 8004e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40023800 	.word	0x40023800
 8004e44:	08008eb4 	.word	0x08008eb4

08004e48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e042      	b.n	8004ee0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fc fc10 	bl	8001694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2224      	movs	r2, #36	@ 0x24
 8004e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f82b 	bl	8004ee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ea0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	695a      	ldr	r2, [r3, #20]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004eb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ec0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eec:	b0c0      	sub	sp, #256	@ 0x100
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f04:	68d9      	ldr	r1, [r3, #12]
 8004f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	ea40 0301 	orr.w	r3, r0, r1
 8004f10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004f40:	f021 010c 	bic.w	r1, r1, #12
 8004f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f4e:	430b      	orrs	r3, r1
 8004f50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f62:	6999      	ldr	r1, [r3, #24]
 8004f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	ea40 0301 	orr.w	r3, r0, r1
 8004f6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	4b8f      	ldr	r3, [pc, #572]	@ (80051b4 <UART_SetConfig+0x2cc>)
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d005      	beq.n	8004f88 <UART_SetConfig+0xa0>
 8004f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	4b8d      	ldr	r3, [pc, #564]	@ (80051b8 <UART_SetConfig+0x2d0>)
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d104      	bne.n	8004f92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f88:	f7ff ff4a 	bl	8004e20 <HAL_RCC_GetPCLK2Freq>
 8004f8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f90:	e003      	b.n	8004f9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f92:	f7ff ff31 	bl	8004df8 <HAL_RCC_GetPCLK1Freq>
 8004f96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fa4:	f040 810c 	bne.w	80051c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fac:	2200      	movs	r2, #0
 8004fae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004fb2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004fb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004fba:	4622      	mov	r2, r4
 8004fbc:	462b      	mov	r3, r5
 8004fbe:	1891      	adds	r1, r2, r2
 8004fc0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004fc2:	415b      	adcs	r3, r3
 8004fc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004fc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004fca:	4621      	mov	r1, r4
 8004fcc:	eb12 0801 	adds.w	r8, r2, r1
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	eb43 0901 	adc.w	r9, r3, r1
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	f04f 0300 	mov.w	r3, #0
 8004fde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fe2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fe6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fea:	4690      	mov	r8, r2
 8004fec:	4699      	mov	r9, r3
 8004fee:	4623      	mov	r3, r4
 8004ff0:	eb18 0303 	adds.w	r3, r8, r3
 8004ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ff8:	462b      	mov	r3, r5
 8004ffa:	eb49 0303 	adc.w	r3, r9, r3
 8004ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800500e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005012:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005016:	460b      	mov	r3, r1
 8005018:	18db      	adds	r3, r3, r3
 800501a:	653b      	str	r3, [r7, #80]	@ 0x50
 800501c:	4613      	mov	r3, r2
 800501e:	eb42 0303 	adc.w	r3, r2, r3
 8005022:	657b      	str	r3, [r7, #84]	@ 0x54
 8005024:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005028:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800502c:	f7fb fcd4 	bl	80009d8 <__aeabi_uldivmod>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4b61      	ldr	r3, [pc, #388]	@ (80051bc <UART_SetConfig+0x2d4>)
 8005036:	fba3 2302 	umull	r2, r3, r3, r2
 800503a:	095b      	lsrs	r3, r3, #5
 800503c:	011c      	lsls	r4, r3, #4
 800503e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005042:	2200      	movs	r2, #0
 8005044:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005048:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800504c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005050:	4642      	mov	r2, r8
 8005052:	464b      	mov	r3, r9
 8005054:	1891      	adds	r1, r2, r2
 8005056:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005058:	415b      	adcs	r3, r3
 800505a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800505c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005060:	4641      	mov	r1, r8
 8005062:	eb12 0a01 	adds.w	sl, r2, r1
 8005066:	4649      	mov	r1, r9
 8005068:	eb43 0b01 	adc.w	fp, r3, r1
 800506c:	f04f 0200 	mov.w	r2, #0
 8005070:	f04f 0300 	mov.w	r3, #0
 8005074:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005078:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800507c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005080:	4692      	mov	sl, r2
 8005082:	469b      	mov	fp, r3
 8005084:	4643      	mov	r3, r8
 8005086:	eb1a 0303 	adds.w	r3, sl, r3
 800508a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800508e:	464b      	mov	r3, r9
 8005090:	eb4b 0303 	adc.w	r3, fp, r3
 8005094:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80050a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80050ac:	460b      	mov	r3, r1
 80050ae:	18db      	adds	r3, r3, r3
 80050b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80050b2:	4613      	mov	r3, r2
 80050b4:	eb42 0303 	adc.w	r3, r2, r3
 80050b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80050ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80050be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80050c2:	f7fb fc89 	bl	80009d8 <__aeabi_uldivmod>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	4611      	mov	r1, r2
 80050cc:	4b3b      	ldr	r3, [pc, #236]	@ (80051bc <UART_SetConfig+0x2d4>)
 80050ce:	fba3 2301 	umull	r2, r3, r3, r1
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	2264      	movs	r2, #100	@ 0x64
 80050d6:	fb02 f303 	mul.w	r3, r2, r3
 80050da:	1acb      	subs	r3, r1, r3
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80050e2:	4b36      	ldr	r3, [pc, #216]	@ (80051bc <UART_SetConfig+0x2d4>)
 80050e4:	fba3 2302 	umull	r2, r3, r3, r2
 80050e8:	095b      	lsrs	r3, r3, #5
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80050f0:	441c      	add	r4, r3
 80050f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050f6:	2200      	movs	r2, #0
 80050f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005100:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005104:	4642      	mov	r2, r8
 8005106:	464b      	mov	r3, r9
 8005108:	1891      	adds	r1, r2, r2
 800510a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800510c:	415b      	adcs	r3, r3
 800510e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005110:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005114:	4641      	mov	r1, r8
 8005116:	1851      	adds	r1, r2, r1
 8005118:	6339      	str	r1, [r7, #48]	@ 0x30
 800511a:	4649      	mov	r1, r9
 800511c:	414b      	adcs	r3, r1
 800511e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800512c:	4659      	mov	r1, fp
 800512e:	00cb      	lsls	r3, r1, #3
 8005130:	4651      	mov	r1, sl
 8005132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005136:	4651      	mov	r1, sl
 8005138:	00ca      	lsls	r2, r1, #3
 800513a:	4610      	mov	r0, r2
 800513c:	4619      	mov	r1, r3
 800513e:	4603      	mov	r3, r0
 8005140:	4642      	mov	r2, r8
 8005142:	189b      	adds	r3, r3, r2
 8005144:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005148:	464b      	mov	r3, r9
 800514a:	460a      	mov	r2, r1
 800514c:	eb42 0303 	adc.w	r3, r2, r3
 8005150:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005160:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005164:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005168:	460b      	mov	r3, r1
 800516a:	18db      	adds	r3, r3, r3
 800516c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800516e:	4613      	mov	r3, r2
 8005170:	eb42 0303 	adc.w	r3, r2, r3
 8005174:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005176:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800517a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800517e:	f7fb fc2b 	bl	80009d8 <__aeabi_uldivmod>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	4b0d      	ldr	r3, [pc, #52]	@ (80051bc <UART_SetConfig+0x2d4>)
 8005188:	fba3 1302 	umull	r1, r3, r3, r2
 800518c:	095b      	lsrs	r3, r3, #5
 800518e:	2164      	movs	r1, #100	@ 0x64
 8005190:	fb01 f303 	mul.w	r3, r1, r3
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	3332      	adds	r3, #50	@ 0x32
 800519a:	4a08      	ldr	r2, [pc, #32]	@ (80051bc <UART_SetConfig+0x2d4>)
 800519c:	fba2 2303 	umull	r2, r3, r2, r3
 80051a0:	095b      	lsrs	r3, r3, #5
 80051a2:	f003 0207 	and.w	r2, r3, #7
 80051a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4422      	add	r2, r4
 80051ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051b0:	e106      	b.n	80053c0 <UART_SetConfig+0x4d8>
 80051b2:	bf00      	nop
 80051b4:	40011000 	.word	0x40011000
 80051b8:	40011400 	.word	0x40011400
 80051bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051c4:	2200      	movs	r2, #0
 80051c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80051ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80051ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80051d2:	4642      	mov	r2, r8
 80051d4:	464b      	mov	r3, r9
 80051d6:	1891      	adds	r1, r2, r2
 80051d8:	6239      	str	r1, [r7, #32]
 80051da:	415b      	adcs	r3, r3
 80051dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80051de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051e2:	4641      	mov	r1, r8
 80051e4:	1854      	adds	r4, r2, r1
 80051e6:	4649      	mov	r1, r9
 80051e8:	eb43 0501 	adc.w	r5, r3, r1
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	00eb      	lsls	r3, r5, #3
 80051f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051fa:	00e2      	lsls	r2, r4, #3
 80051fc:	4614      	mov	r4, r2
 80051fe:	461d      	mov	r5, r3
 8005200:	4643      	mov	r3, r8
 8005202:	18e3      	adds	r3, r4, r3
 8005204:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005208:	464b      	mov	r3, r9
 800520a:	eb45 0303 	adc.w	r3, r5, r3
 800520e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800521e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005222:	f04f 0200 	mov.w	r2, #0
 8005226:	f04f 0300 	mov.w	r3, #0
 800522a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800522e:	4629      	mov	r1, r5
 8005230:	008b      	lsls	r3, r1, #2
 8005232:	4621      	mov	r1, r4
 8005234:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005238:	4621      	mov	r1, r4
 800523a:	008a      	lsls	r2, r1, #2
 800523c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005240:	f7fb fbca 	bl	80009d8 <__aeabi_uldivmod>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	4b60      	ldr	r3, [pc, #384]	@ (80053cc <UART_SetConfig+0x4e4>)
 800524a:	fba3 2302 	umull	r2, r3, r3, r2
 800524e:	095b      	lsrs	r3, r3, #5
 8005250:	011c      	lsls	r4, r3, #4
 8005252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005256:	2200      	movs	r2, #0
 8005258:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800525c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005260:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005264:	4642      	mov	r2, r8
 8005266:	464b      	mov	r3, r9
 8005268:	1891      	adds	r1, r2, r2
 800526a:	61b9      	str	r1, [r7, #24]
 800526c:	415b      	adcs	r3, r3
 800526e:	61fb      	str	r3, [r7, #28]
 8005270:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005274:	4641      	mov	r1, r8
 8005276:	1851      	adds	r1, r2, r1
 8005278:	6139      	str	r1, [r7, #16]
 800527a:	4649      	mov	r1, r9
 800527c:	414b      	adcs	r3, r1
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800528c:	4659      	mov	r1, fp
 800528e:	00cb      	lsls	r3, r1, #3
 8005290:	4651      	mov	r1, sl
 8005292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005296:	4651      	mov	r1, sl
 8005298:	00ca      	lsls	r2, r1, #3
 800529a:	4610      	mov	r0, r2
 800529c:	4619      	mov	r1, r3
 800529e:	4603      	mov	r3, r0
 80052a0:	4642      	mov	r2, r8
 80052a2:	189b      	adds	r3, r3, r2
 80052a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052a8:	464b      	mov	r3, r9
 80052aa:	460a      	mov	r2, r1
 80052ac:	eb42 0303 	adc.w	r3, r2, r3
 80052b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80052b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80052c0:	f04f 0200 	mov.w	r2, #0
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80052cc:	4649      	mov	r1, r9
 80052ce:	008b      	lsls	r3, r1, #2
 80052d0:	4641      	mov	r1, r8
 80052d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052d6:	4641      	mov	r1, r8
 80052d8:	008a      	lsls	r2, r1, #2
 80052da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80052de:	f7fb fb7b 	bl	80009d8 <__aeabi_uldivmod>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4611      	mov	r1, r2
 80052e8:	4b38      	ldr	r3, [pc, #224]	@ (80053cc <UART_SetConfig+0x4e4>)
 80052ea:	fba3 2301 	umull	r2, r3, r3, r1
 80052ee:	095b      	lsrs	r3, r3, #5
 80052f0:	2264      	movs	r2, #100	@ 0x64
 80052f2:	fb02 f303 	mul.w	r3, r2, r3
 80052f6:	1acb      	subs	r3, r1, r3
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	3332      	adds	r3, #50	@ 0x32
 80052fc:	4a33      	ldr	r2, [pc, #204]	@ (80053cc <UART_SetConfig+0x4e4>)
 80052fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005302:	095b      	lsrs	r3, r3, #5
 8005304:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005308:	441c      	add	r4, r3
 800530a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800530e:	2200      	movs	r2, #0
 8005310:	673b      	str	r3, [r7, #112]	@ 0x70
 8005312:	677a      	str	r2, [r7, #116]	@ 0x74
 8005314:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005318:	4642      	mov	r2, r8
 800531a:	464b      	mov	r3, r9
 800531c:	1891      	adds	r1, r2, r2
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	415b      	adcs	r3, r3
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005328:	4641      	mov	r1, r8
 800532a:	1851      	adds	r1, r2, r1
 800532c:	6039      	str	r1, [r7, #0]
 800532e:	4649      	mov	r1, r9
 8005330:	414b      	adcs	r3, r1
 8005332:	607b      	str	r3, [r7, #4]
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005340:	4659      	mov	r1, fp
 8005342:	00cb      	lsls	r3, r1, #3
 8005344:	4651      	mov	r1, sl
 8005346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800534a:	4651      	mov	r1, sl
 800534c:	00ca      	lsls	r2, r1, #3
 800534e:	4610      	mov	r0, r2
 8005350:	4619      	mov	r1, r3
 8005352:	4603      	mov	r3, r0
 8005354:	4642      	mov	r2, r8
 8005356:	189b      	adds	r3, r3, r2
 8005358:	66bb      	str	r3, [r7, #104]	@ 0x68
 800535a:	464b      	mov	r3, r9
 800535c:	460a      	mov	r2, r1
 800535e:	eb42 0303 	adc.w	r3, r2, r3
 8005362:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	663b      	str	r3, [r7, #96]	@ 0x60
 800536e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800537c:	4649      	mov	r1, r9
 800537e:	008b      	lsls	r3, r1, #2
 8005380:	4641      	mov	r1, r8
 8005382:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005386:	4641      	mov	r1, r8
 8005388:	008a      	lsls	r2, r1, #2
 800538a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800538e:	f7fb fb23 	bl	80009d8 <__aeabi_uldivmod>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	4b0d      	ldr	r3, [pc, #52]	@ (80053cc <UART_SetConfig+0x4e4>)
 8005398:	fba3 1302 	umull	r1, r3, r3, r2
 800539c:	095b      	lsrs	r3, r3, #5
 800539e:	2164      	movs	r1, #100	@ 0x64
 80053a0:	fb01 f303 	mul.w	r3, r1, r3
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	3332      	adds	r3, #50	@ 0x32
 80053aa:	4a08      	ldr	r2, [pc, #32]	@ (80053cc <UART_SetConfig+0x4e4>)
 80053ac:	fba2 2303 	umull	r2, r3, r2, r3
 80053b0:	095b      	lsrs	r3, r3, #5
 80053b2:	f003 020f 	and.w	r2, r3, #15
 80053b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4422      	add	r2, r4
 80053be:	609a      	str	r2, [r3, #8]
}
 80053c0:	bf00      	nop
 80053c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80053c6:	46bd      	mov	sp, r7
 80053c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053cc:	51eb851f 	.word	0x51eb851f

080053d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053d0:	b084      	sub	sp, #16
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b084      	sub	sp, #16
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	f107 001c 	add.w	r0, r7, #28
 80053de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d123      	bne.n	8005432 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80053fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005412:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005416:	2b01      	cmp	r3, #1
 8005418:	d105      	bne.n	8005426 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f001 fae8 	bl	80069fc <USB_CoreReset>
 800542c:	4603      	mov	r3, r0
 800542e:	73fb      	strb	r3, [r7, #15]
 8005430:	e01b      	b.n	800546a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f001 fadc 	bl	80069fc <USB_CoreReset>
 8005444:	4603      	mov	r3, r0
 8005446:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005448:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800544c:	2b00      	cmp	r3, #0
 800544e:	d106      	bne.n	800545e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005454:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	639a      	str	r2, [r3, #56]	@ 0x38
 800545c:	e005      	b.n	800546a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005462:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800546a:	7fbb      	ldrb	r3, [r7, #30]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d10b      	bne.n	8005488 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f043 0206 	orr.w	r2, r3, #6
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f043 0220 	orr.w	r2, r3, #32
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005488:	7bfb      	ldrb	r3, [r7, #15]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005494:	b004      	add	sp, #16
 8005496:	4770      	bx	lr

08005498 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	4613      	mov	r3, r2
 80054a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80054a6:	79fb      	ldrb	r3, [r7, #7]
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d165      	bne.n	8005578 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	4a41      	ldr	r2, [pc, #260]	@ (80055b4 <USB_SetTurnaroundTime+0x11c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d906      	bls.n	80054c2 <USB_SetTurnaroundTime+0x2a>
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4a40      	ldr	r2, [pc, #256]	@ (80055b8 <USB_SetTurnaroundTime+0x120>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d202      	bcs.n	80054c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80054bc:	230f      	movs	r3, #15
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	e062      	b.n	8005588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	4a3c      	ldr	r2, [pc, #240]	@ (80055b8 <USB_SetTurnaroundTime+0x120>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d306      	bcc.n	80054d8 <USB_SetTurnaroundTime+0x40>
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	4a3b      	ldr	r2, [pc, #236]	@ (80055bc <USB_SetTurnaroundTime+0x124>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d202      	bcs.n	80054d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80054d2:	230e      	movs	r3, #14
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	e057      	b.n	8005588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4a38      	ldr	r2, [pc, #224]	@ (80055bc <USB_SetTurnaroundTime+0x124>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d306      	bcc.n	80054ee <USB_SetTurnaroundTime+0x56>
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	4a37      	ldr	r2, [pc, #220]	@ (80055c0 <USB_SetTurnaroundTime+0x128>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d202      	bcs.n	80054ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80054e8:	230d      	movs	r3, #13
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	e04c      	b.n	8005588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	4a33      	ldr	r2, [pc, #204]	@ (80055c0 <USB_SetTurnaroundTime+0x128>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d306      	bcc.n	8005504 <USB_SetTurnaroundTime+0x6c>
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	4a32      	ldr	r2, [pc, #200]	@ (80055c4 <USB_SetTurnaroundTime+0x12c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d802      	bhi.n	8005504 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80054fe:	230c      	movs	r3, #12
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	e041      	b.n	8005588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	4a2f      	ldr	r2, [pc, #188]	@ (80055c4 <USB_SetTurnaroundTime+0x12c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d906      	bls.n	800551a <USB_SetTurnaroundTime+0x82>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	4a2e      	ldr	r2, [pc, #184]	@ (80055c8 <USB_SetTurnaroundTime+0x130>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d802      	bhi.n	800551a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005514:	230b      	movs	r3, #11
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	e036      	b.n	8005588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	4a2a      	ldr	r2, [pc, #168]	@ (80055c8 <USB_SetTurnaroundTime+0x130>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d906      	bls.n	8005530 <USB_SetTurnaroundTime+0x98>
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	4a29      	ldr	r2, [pc, #164]	@ (80055cc <USB_SetTurnaroundTime+0x134>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d802      	bhi.n	8005530 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800552a:	230a      	movs	r3, #10
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	e02b      	b.n	8005588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4a26      	ldr	r2, [pc, #152]	@ (80055cc <USB_SetTurnaroundTime+0x134>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d906      	bls.n	8005546 <USB_SetTurnaroundTime+0xae>
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	4a25      	ldr	r2, [pc, #148]	@ (80055d0 <USB_SetTurnaroundTime+0x138>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d202      	bcs.n	8005546 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005540:	2309      	movs	r3, #9
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	e020      	b.n	8005588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	4a21      	ldr	r2, [pc, #132]	@ (80055d0 <USB_SetTurnaroundTime+0x138>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d306      	bcc.n	800555c <USB_SetTurnaroundTime+0xc4>
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	4a20      	ldr	r2, [pc, #128]	@ (80055d4 <USB_SetTurnaroundTime+0x13c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d802      	bhi.n	800555c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005556:	2308      	movs	r3, #8
 8005558:	617b      	str	r3, [r7, #20]
 800555a:	e015      	b.n	8005588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4a1d      	ldr	r2, [pc, #116]	@ (80055d4 <USB_SetTurnaroundTime+0x13c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d906      	bls.n	8005572 <USB_SetTurnaroundTime+0xda>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	4a1c      	ldr	r2, [pc, #112]	@ (80055d8 <USB_SetTurnaroundTime+0x140>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d202      	bcs.n	8005572 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800556c:	2307      	movs	r3, #7
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	e00a      	b.n	8005588 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005572:	2306      	movs	r3, #6
 8005574:	617b      	str	r3, [r7, #20]
 8005576:	e007      	b.n	8005588 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005578:	79fb      	ldrb	r3, [r7, #7]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d102      	bne.n	8005584 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800557e:	2309      	movs	r3, #9
 8005580:	617b      	str	r3, [r7, #20]
 8005582:	e001      	b.n	8005588 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005584:	2309      	movs	r3, #9
 8005586:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	029b      	lsls	r3, r3, #10
 800559c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80055a0:	431a      	orrs	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	371c      	adds	r7, #28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	00d8acbf 	.word	0x00d8acbf
 80055b8:	00e4e1c0 	.word	0x00e4e1c0
 80055bc:	00f42400 	.word	0x00f42400
 80055c0:	01067380 	.word	0x01067380
 80055c4:	011a499f 	.word	0x011a499f
 80055c8:	01312cff 	.word	0x01312cff
 80055cc:	014ca43f 	.word	0x014ca43f
 80055d0:	016e3600 	.word	0x016e3600
 80055d4:	01a6ab1f 	.word	0x01a6ab1f
 80055d8:	01e84800 	.word	0x01e84800

080055dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f043 0201 	orr.w	r2, r3, #1
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055fe:	b480      	push	{r7}
 8005600:	b083      	sub	sp, #12
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f023 0201 	bic.w	r2, r3, #1
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	460b      	mov	r3, r1
 800562a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800563c:	78fb      	ldrb	r3, [r7, #3]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d115      	bne.n	800566e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800564e:	200a      	movs	r0, #10
 8005650:	f7fc f964 	bl	800191c <HAL_Delay>
      ms += 10U;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	330a      	adds	r3, #10
 8005658:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f001 f93f 	bl	80068de <USB_GetMode>
 8005660:	4603      	mov	r3, r0
 8005662:	2b01      	cmp	r3, #1
 8005664:	d01e      	beq.n	80056a4 <USB_SetCurrentMode+0x84>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2bc7      	cmp	r3, #199	@ 0xc7
 800566a:	d9f0      	bls.n	800564e <USB_SetCurrentMode+0x2e>
 800566c:	e01a      	b.n	80056a4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800566e:	78fb      	ldrb	r3, [r7, #3]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d115      	bne.n	80056a0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005680:	200a      	movs	r0, #10
 8005682:	f7fc f94b 	bl	800191c <HAL_Delay>
      ms += 10U;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	330a      	adds	r3, #10
 800568a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f001 f926 	bl	80068de <USB_GetMode>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <USB_SetCurrentMode+0x84>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2bc7      	cmp	r3, #199	@ 0xc7
 800569c:	d9f0      	bls.n	8005680 <USB_SetCurrentMode+0x60>
 800569e:	e001      	b.n	80056a4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e005      	b.n	80056b0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2bc8      	cmp	r3, #200	@ 0xc8
 80056a8:	d101      	bne.n	80056ae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e000      	b.n	80056b0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056b8:	b084      	sub	sp, #16
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b086      	sub	sp, #24
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80056c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056d2:	2300      	movs	r3, #0
 80056d4:	613b      	str	r3, [r7, #16]
 80056d6:	e009      	b.n	80056ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	3340      	adds	r3, #64	@ 0x40
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	2200      	movs	r2, #0
 80056e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	3301      	adds	r3, #1
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	2b0e      	cmp	r3, #14
 80056f0:	d9f2      	bls.n	80056d8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d11c      	bne.n	8005734 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005708:	f043 0302 	orr.w	r3, r3, #2
 800570c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005712:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800572a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	639a      	str	r2, [r3, #56]	@ 0x38
 8005732:	e00b      	b.n	800574c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005738:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005744:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005752:	461a      	mov	r2, r3
 8005754:	2300      	movs	r3, #0
 8005756:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005758:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800575c:	2b01      	cmp	r3, #1
 800575e:	d10d      	bne.n	800577c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005760:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005764:	2b00      	cmp	r3, #0
 8005766:	d104      	bne.n	8005772 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005768:	2100      	movs	r1, #0
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f968 	bl	8005a40 <USB_SetDevSpeed>
 8005770:	e008      	b.n	8005784 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005772:	2101      	movs	r1, #1
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f963 	bl	8005a40 <USB_SetDevSpeed>
 800577a:	e003      	b.n	8005784 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800577c:	2103      	movs	r1, #3
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f95e 	bl	8005a40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005784:	2110      	movs	r1, #16
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f8fa 	bl	8005980 <USB_FlushTxFifo>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f924 	bl	80059e4 <USB_FlushRxFifo>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057ac:	461a      	mov	r2, r3
 80057ae:	2300      	movs	r3, #0
 80057b0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057b8:	461a      	mov	r2, r3
 80057ba:	2300      	movs	r3, #0
 80057bc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057c4:	461a      	mov	r2, r3
 80057c6:	2300      	movs	r3, #0
 80057c8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057ca:	2300      	movs	r3, #0
 80057cc:	613b      	str	r3, [r7, #16]
 80057ce:	e043      	b.n	8005858 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057e6:	d118      	bne.n	800581a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10a      	bne.n	8005804 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057fa:	461a      	mov	r2, r3
 80057fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	e013      	b.n	800582c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005810:	461a      	mov	r2, r3
 8005812:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005816:	6013      	str	r3, [r2, #0]
 8005818:	e008      	b.n	800582c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4413      	add	r3, r2
 8005822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005826:	461a      	mov	r2, r3
 8005828:	2300      	movs	r3, #0
 800582a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005838:	461a      	mov	r2, r3
 800583a:	2300      	movs	r3, #0
 800583c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800584a:	461a      	mov	r2, r3
 800584c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005850:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	3301      	adds	r3, #1
 8005856:	613b      	str	r3, [r7, #16]
 8005858:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800585c:	461a      	mov	r2, r3
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	4293      	cmp	r3, r2
 8005862:	d3b5      	bcc.n	80057d0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005864:	2300      	movs	r3, #0
 8005866:	613b      	str	r3, [r7, #16]
 8005868:	e043      	b.n	80058f2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4413      	add	r3, r2
 8005872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800587c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005880:	d118      	bne.n	80058b4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10a      	bne.n	800589e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005894:	461a      	mov	r2, r3
 8005896:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800589a:	6013      	str	r3, [r2, #0]
 800589c:	e013      	b.n	80058c6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058aa:	461a      	mov	r2, r3
 80058ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80058b0:	6013      	str	r3, [r2, #0]
 80058b2:	e008      	b.n	80058c6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058c0:	461a      	mov	r2, r3
 80058c2:	2300      	movs	r3, #0
 80058c4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058d2:	461a      	mov	r2, r3
 80058d4:	2300      	movs	r3, #0
 80058d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058e4:	461a      	mov	r2, r3
 80058e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	3301      	adds	r3, #1
 80058f0:	613b      	str	r3, [r7, #16]
 80058f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80058f6:	461a      	mov	r2, r3
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d3b5      	bcc.n	800586a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800590c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005910:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800591e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005920:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005924:	2b00      	cmp	r3, #0
 8005926:	d105      	bne.n	8005934 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	f043 0210 	orr.w	r2, r3, #16
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	699a      	ldr	r2, [r3, #24]
 8005938:	4b10      	ldr	r3, [pc, #64]	@ (800597c <USB_DevInit+0x2c4>)
 800593a:	4313      	orrs	r3, r2
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005940:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005944:	2b00      	cmp	r3, #0
 8005946:	d005      	beq.n	8005954 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	f043 0208 	orr.w	r2, r3, #8
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005954:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005958:	2b01      	cmp	r3, #1
 800595a:	d107      	bne.n	800596c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005964:	f043 0304 	orr.w	r3, r3, #4
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800596c:	7dfb      	ldrb	r3, [r7, #23]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005978:	b004      	add	sp, #16
 800597a:	4770      	bx	lr
 800597c:	803c3800 	.word	0x803c3800

08005980 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800598a:	2300      	movs	r3, #0
 800598c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3301      	adds	r3, #1
 8005992:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800599a:	d901      	bls.n	80059a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e01b      	b.n	80059d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	daf2      	bge.n	800598e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	019b      	lsls	r3, r3, #6
 80059b0:	f043 0220 	orr.w	r2, r3, #32
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	3301      	adds	r3, #1
 80059bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059c4:	d901      	bls.n	80059ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e006      	b.n	80059d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f003 0320 	and.w	r3, r3, #32
 80059d2:	2b20      	cmp	r3, #32
 80059d4:	d0f0      	beq.n	80059b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3301      	adds	r3, #1
 80059f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059fc:	d901      	bls.n	8005a02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e018      	b.n	8005a34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	daf2      	bge.n	80059f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2210      	movs	r2, #16
 8005a12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	3301      	adds	r3, #1
 8005a18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a20:	d901      	bls.n	8005a26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e006      	b.n	8005a34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f003 0310 	and.w	r3, r3, #16
 8005a2e:	2b10      	cmp	r3, #16
 8005a30:	d0f0      	beq.n	8005a14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	78fb      	ldrb	r3, [r7, #3]
 8005a5a:	68f9      	ldr	r1, [r7, #12]
 8005a5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a60:	4313      	orrs	r3, r2
 8005a62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b087      	sub	sp, #28
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 0306 	and.w	r3, r3, #6
 8005a8a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d102      	bne.n	8005a98 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005a92:	2300      	movs	r3, #0
 8005a94:	75fb      	strb	r3, [r7, #23]
 8005a96:	e00a      	b.n	8005aae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d002      	beq.n	8005aa4 <USB_GetDevSpeed+0x32>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b06      	cmp	r3, #6
 8005aa2:	d102      	bne.n	8005aaa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	75fb      	strb	r3, [r7, #23]
 8005aa8:	e001      	b.n	8005aae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005aaa:	230f      	movs	r3, #15
 8005aac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	371c      	adds	r7, #28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	785b      	ldrb	r3, [r3, #1]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d13a      	bne.n	8005b4e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ade:	69da      	ldr	r2, [r3, #28]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	f003 030f 	and.w	r3, r3, #15
 8005ae8:	2101      	movs	r1, #1
 8005aea:	fa01 f303 	lsl.w	r3, r1, r3
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	68f9      	ldr	r1, [r7, #12]
 8005af2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005af6:	4313      	orrs	r3, r2
 8005af8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d155      	bne.n	8005bbc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	791b      	ldrb	r3, [r3, #4]
 8005b2a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b2c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	059b      	lsls	r3, r3, #22
 8005b32:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b34:	4313      	orrs	r3, r2
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	0151      	lsls	r1, r2, #5
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	e036      	b.n	8005bbc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b54:	69da      	ldr	r2, [r3, #28]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	2101      	movs	r1, #1
 8005b60:	fa01 f303 	lsl.w	r3, r1, r3
 8005b64:	041b      	lsls	r3, r3, #16
 8005b66:	68f9      	ldr	r1, [r7, #12]
 8005b68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d11a      	bne.n	8005bbc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	791b      	ldrb	r3, [r3, #4]
 8005ba0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ba2:	430b      	orrs	r3, r1
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	0151      	lsls	r1, r2, #5
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	440a      	add	r2, r1
 8005bae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
	...

08005bcc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	785b      	ldrb	r3, [r3, #1]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d161      	bne.n	8005cac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bfe:	d11f      	bne.n	8005c40 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	0151      	lsls	r1, r2, #5
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	440a      	add	r2, r1
 8005c16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c1a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c1e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	0151      	lsls	r1, r2, #5
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	440a      	add	r2, r1
 8005c36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	2101      	movs	r1, #1
 8005c52:	fa01 f303 	lsl.w	r3, r1, r3
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	43db      	mvns	r3, r3
 8005c5a:	68f9      	ldr	r1, [r7, #12]
 8005c5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c60:	4013      	ands	r3, r2
 8005c62:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c6a:	69da      	ldr	r2, [r3, #28]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	f003 030f 	and.w	r3, r3, #15
 8005c74:	2101      	movs	r1, #1
 8005c76:	fa01 f303 	lsl.w	r3, r1, r3
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	43db      	mvns	r3, r3
 8005c7e:	68f9      	ldr	r1, [r7, #12]
 8005c80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c84:	4013      	ands	r3, r2
 8005c86:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	0159      	lsls	r1, r3, #5
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	440b      	add	r3, r1
 8005c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4b35      	ldr	r3, [pc, #212]	@ (8005d7c <USB_DeactivateEndpoint+0x1b0>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	600b      	str	r3, [r1, #0]
 8005caa:	e060      	b.n	8005d6e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cc2:	d11f      	bne.n	8005d04 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	0151      	lsls	r1, r2, #5
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	440a      	add	r2, r1
 8005cda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cde:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ce2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	0151      	lsls	r1, r2, #5
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	440a      	add	r2, r1
 8005cfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cfe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	f003 030f 	and.w	r3, r3, #15
 8005d14:	2101      	movs	r1, #1
 8005d16:	fa01 f303 	lsl.w	r3, r1, r3
 8005d1a:	041b      	lsls	r3, r3, #16
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	68f9      	ldr	r1, [r7, #12]
 8005d20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d24:	4013      	ands	r3, r2
 8005d26:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d2e:	69da      	ldr	r2, [r3, #28]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	f003 030f 	and.w	r3, r3, #15
 8005d38:	2101      	movs	r1, #1
 8005d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d3e:	041b      	lsls	r3, r3, #16
 8005d40:	43db      	mvns	r3, r3
 8005d42:	68f9      	ldr	r1, [r7, #12]
 8005d44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d48:	4013      	ands	r3, r2
 8005d4a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	0159      	lsls	r1, r3, #5
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	440b      	add	r3, r1
 8005d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d66:	4619      	mov	r1, r3
 8005d68:	4b05      	ldr	r3, [pc, #20]	@ (8005d80 <USB_DeactivateEndpoint+0x1b4>)
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	ec337800 	.word	0xec337800
 8005d80:	eff37800 	.word	0xeff37800

08005d84 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08a      	sub	sp, #40	@ 0x28
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	785b      	ldrb	r3, [r3, #1]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	f040 817f 	bne.w	80060a4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d132      	bne.n	8005e14 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	0151      	lsls	r1, r2, #5
 8005dc0:	69fa      	ldr	r2, [r7, #28]
 8005dc2:	440a      	add	r2, r1
 8005dc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dc8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005dcc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005dd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	0151      	lsls	r1, r2, #5
 8005de4:	69fa      	ldr	r2, [r7, #28]
 8005de6:	440a      	add	r2, r1
 8005de8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005df0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	0151      	lsls	r1, r2, #5
 8005e04:	69fa      	ldr	r2, [r7, #28]
 8005e06:	440a      	add	r2, r1
 8005e08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e0c:	0cdb      	lsrs	r3, r3, #19
 8005e0e:	04db      	lsls	r3, r3, #19
 8005e10:	6113      	str	r3, [r2, #16]
 8005e12:	e097      	b.n	8005f44 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	0151      	lsls	r1, r2, #5
 8005e26:	69fa      	ldr	r2, [r7, #28]
 8005e28:	440a      	add	r2, r1
 8005e2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e2e:	0cdb      	lsrs	r3, r3, #19
 8005e30:	04db      	lsls	r3, r3, #19
 8005e32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	0151      	lsls	r1, r2, #5
 8005e46:	69fa      	ldr	r2, [r7, #28]
 8005e48:	440a      	add	r2, r1
 8005e4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e4e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005e52:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005e56:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d11a      	bne.n	8005e94 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	691a      	ldr	r2, [r3, #16]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d903      	bls.n	8005e72 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	689a      	ldr	r2, [r3, #8]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	0151      	lsls	r1, r2, #5
 8005e84:	69fa      	ldr	r2, [r7, #28]
 8005e86:	440a      	add	r2, r1
 8005e88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e90:	6113      	str	r3, [r2, #16]
 8005e92:	e044      	b.n	8005f1e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	691a      	ldr	r2, [r3, #16]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	1e5a      	subs	r2, r3, #1
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eb6:	691a      	ldr	r2, [r3, #16]
 8005eb8:	8afb      	ldrh	r3, [r7, #22]
 8005eba:	04d9      	lsls	r1, r3, #19
 8005ebc:	4ba4      	ldr	r3, [pc, #656]	@ (8006150 <USB_EPStartXfer+0x3cc>)
 8005ebe:	400b      	ands	r3, r1
 8005ec0:	69b9      	ldr	r1, [r7, #24]
 8005ec2:	0148      	lsls	r0, r1, #5
 8005ec4:	69f9      	ldr	r1, [r7, #28]
 8005ec6:	4401      	add	r1, r0
 8005ec8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	791b      	ldrb	r3, [r3, #4]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d122      	bne.n	8005f1e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	0151      	lsls	r1, r2, #5
 8005eea:	69fa      	ldr	r2, [r7, #28]
 8005eec:	440a      	add	r2, r1
 8005eee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ef2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005ef6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f04:	691a      	ldr	r2, [r3, #16]
 8005f06:	8afb      	ldrh	r3, [r7, #22]
 8005f08:	075b      	lsls	r3, r3, #29
 8005f0a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005f0e:	69b9      	ldr	r1, [r7, #24]
 8005f10:	0148      	lsls	r0, r1, #5
 8005f12:	69f9      	ldr	r1, [r7, #28]
 8005f14:	4401      	add	r1, r0
 8005f16:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f2a:	691a      	ldr	r2, [r3, #16]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f34:	69b9      	ldr	r1, [r7, #24]
 8005f36:	0148      	lsls	r0, r1, #5
 8005f38:	69f9      	ldr	r1, [r7, #28]
 8005f3a:	4401      	add	r1, r0
 8005f3c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005f40:	4313      	orrs	r3, r2
 8005f42:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f44:	79fb      	ldrb	r3, [r7, #7]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d14b      	bne.n	8005fe2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d009      	beq.n	8005f66 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f5e:	461a      	mov	r2, r3
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	791b      	ldrb	r3, [r3, #4]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d128      	bne.n	8005fc0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d110      	bne.n	8005fa0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	0151      	lsls	r1, r2, #5
 8005f90:	69fa      	ldr	r2, [r7, #28]
 8005f92:	440a      	add	r2, r1
 8005f94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f98:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	e00f      	b.n	8005fc0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	0151      	lsls	r1, r2, #5
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	440a      	add	r2, r1
 8005fb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fbe:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	0151      	lsls	r1, r2, #5
 8005fd2:	69fa      	ldr	r2, [r7, #28]
 8005fd4:	440a      	add	r2, r1
 8005fd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fda:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005fde:	6013      	str	r3, [r2, #0]
 8005fe0:	e166      	b.n	80062b0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	0151      	lsls	r1, r2, #5
 8005ff4:	69fa      	ldr	r2, [r7, #28]
 8005ff6:	440a      	add	r2, r1
 8005ff8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ffc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006000:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	791b      	ldrb	r3, [r3, #4]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d015      	beq.n	8006036 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 814e 	beq.w	80062b0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800601a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	f003 030f 	and.w	r3, r3, #15
 8006024:	2101      	movs	r1, #1
 8006026:	fa01 f303 	lsl.w	r3, r1, r3
 800602a:	69f9      	ldr	r1, [r7, #28]
 800602c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006030:	4313      	orrs	r3, r2
 8006032:	634b      	str	r3, [r1, #52]	@ 0x34
 8006034:	e13c      	b.n	80062b0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006042:	2b00      	cmp	r3, #0
 8006044:	d110      	bne.n	8006068 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	4413      	add	r3, r2
 800604e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	0151      	lsls	r1, r2, #5
 8006058:	69fa      	ldr	r2, [r7, #28]
 800605a:	440a      	add	r2, r1
 800605c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006060:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	e00f      	b.n	8006088 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	0151      	lsls	r1, r2, #5
 800607a:	69fa      	ldr	r2, [r7, #28]
 800607c:	440a      	add	r2, r1
 800607e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006082:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006086:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	68d9      	ldr	r1, [r3, #12]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	781a      	ldrb	r2, [r3, #0]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	b298      	uxth	r0, r3
 8006096:	79fb      	ldrb	r3, [r7, #7]
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	4603      	mov	r3, r0
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f000 f9b9 	bl	8006414 <USB_WritePacket>
 80060a2:	e105      	b.n	80062b0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	0151      	lsls	r1, r2, #5
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	440a      	add	r2, r1
 80060ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060be:	0cdb      	lsrs	r3, r3, #19
 80060c0:	04db      	lsls	r3, r3, #19
 80060c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	0151      	lsls	r1, r2, #5
 80060d6:	69fa      	ldr	r2, [r7, #28]
 80060d8:	440a      	add	r2, r1
 80060da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060de:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80060e2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80060e6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d132      	bne.n	8006154 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	689a      	ldr	r2, [r3, #8]
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	4413      	add	r3, r2
 800610e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006112:	691a      	ldr	r2, [r3, #16]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800611c:	69b9      	ldr	r1, [r7, #24]
 800611e:	0148      	lsls	r0, r1, #5
 8006120:	69f9      	ldr	r1, [r7, #28]
 8006122:	4401      	add	r1, r0
 8006124:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006128:	4313      	orrs	r3, r2
 800612a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	0151      	lsls	r1, r2, #5
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	440a      	add	r2, r1
 8006142:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006146:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800614a:	6113      	str	r3, [r2, #16]
 800614c:	e062      	b.n	8006214 <USB_EPStartXfer+0x490>
 800614e:	bf00      	nop
 8006150:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d123      	bne.n	80061a4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006168:	691a      	ldr	r2, [r3, #16]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006172:	69b9      	ldr	r1, [r7, #24]
 8006174:	0148      	lsls	r0, r1, #5
 8006176:	69f9      	ldr	r1, [r7, #28]
 8006178:	4401      	add	r1, r0
 800617a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800617e:	4313      	orrs	r3, r2
 8006180:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	0151      	lsls	r1, r2, #5
 8006194:	69fa      	ldr	r2, [r7, #28]
 8006196:	440a      	add	r2, r1
 8006198:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800619c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061a0:	6113      	str	r3, [r2, #16]
 80061a2:	e037      	b.n	8006214 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	691a      	ldr	r2, [r3, #16]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	4413      	add	r3, r2
 80061ae:	1e5a      	subs	r2, r3, #1
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	8afa      	ldrh	r2, [r7, #22]
 80061c0:	fb03 f202 	mul.w	r2, r3, r2
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061d4:	691a      	ldr	r2, [r3, #16]
 80061d6:	8afb      	ldrh	r3, [r7, #22]
 80061d8:	04d9      	lsls	r1, r3, #19
 80061da:	4b38      	ldr	r3, [pc, #224]	@ (80062bc <USB_EPStartXfer+0x538>)
 80061dc:	400b      	ands	r3, r1
 80061de:	69b9      	ldr	r1, [r7, #24]
 80061e0:	0148      	lsls	r0, r1, #5
 80061e2:	69f9      	ldr	r1, [r7, #28]
 80061e4:	4401      	add	r1, r0
 80061e6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80061ea:	4313      	orrs	r3, r2
 80061ec:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006204:	69b9      	ldr	r1, [r7, #24]
 8006206:	0148      	lsls	r0, r1, #5
 8006208:	69f9      	ldr	r1, [r7, #28]
 800620a:	4401      	add	r1, r0
 800620c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006210:	4313      	orrs	r3, r2
 8006212:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006214:	79fb      	ldrb	r3, [r7, #7]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d10d      	bne.n	8006236 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d009      	beq.n	8006236 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	68d9      	ldr	r1, [r3, #12]
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006232:	460a      	mov	r2, r1
 8006234:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	791b      	ldrb	r3, [r3, #4]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d128      	bne.n	8006290 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800624a:	2b00      	cmp	r3, #0
 800624c:	d110      	bne.n	8006270 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	0151      	lsls	r1, r2, #5
 8006260:	69fa      	ldr	r2, [r7, #28]
 8006262:	440a      	add	r2, r1
 8006264:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006268:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	e00f      	b.n	8006290 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	0151      	lsls	r1, r2, #5
 8006282:	69fa      	ldr	r2, [r7, #28]
 8006284:	440a      	add	r2, r1
 8006286:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800628a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800628e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	0151      	lsls	r1, r2, #5
 80062a2:	69fa      	ldr	r2, [r7, #28]
 80062a4:	440a      	add	r2, r1
 80062a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062aa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80062ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3720      	adds	r7, #32
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	1ff80000 	.word	0x1ff80000

080062c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	785b      	ldrb	r3, [r3, #1]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d14a      	bne.n	8006374 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062f6:	f040 8086 	bne.w	8006406 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	7812      	ldrb	r2, [r2, #0]
 800630e:	0151      	lsls	r1, r2, #5
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	440a      	add	r2, r1
 8006314:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006318:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800631c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	7812      	ldrb	r2, [r2, #0]
 8006332:	0151      	lsls	r1, r2, #5
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	440a      	add	r2, r1
 8006338:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800633c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006340:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	3301      	adds	r3, #1
 8006346:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800634e:	4293      	cmp	r3, r2
 8006350:	d902      	bls.n	8006358 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	75fb      	strb	r3, [r7, #23]
          break;
 8006356:	e056      	b.n	8006406 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	4413      	add	r3, r2
 8006362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800636c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006370:	d0e7      	beq.n	8006342 <USB_EPStopXfer+0x82>
 8006372:	e048      	b.n	8006406 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	015a      	lsls	r2, r3, #5
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	4413      	add	r3, r2
 800637e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006388:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800638c:	d13b      	bne.n	8006406 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	7812      	ldrb	r2, [r2, #0]
 80063a2:	0151      	lsls	r1, r2, #5
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	440a      	add	r2, r1
 80063a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80063b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	7812      	ldrb	r2, [r2, #0]
 80063c6:	0151      	lsls	r1, r2, #5
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	440a      	add	r2, r1
 80063cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80063d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	3301      	adds	r3, #1
 80063da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f242 7210 	movw	r2, #10000	@ 0x2710
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d902      	bls.n	80063ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	75fb      	strb	r3, [r7, #23]
          break;
 80063ea:	e00c      	b.n	8006406 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006400:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006404:	d0e7      	beq.n	80063d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006406:	7dfb      	ldrb	r3, [r7, #23]
}
 8006408:	4618      	mov	r0, r3
 800640a:	371c      	adds	r7, #28
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006414:	b480      	push	{r7}
 8006416:	b089      	sub	sp, #36	@ 0x24
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	4611      	mov	r1, r2
 8006420:	461a      	mov	r2, r3
 8006422:	460b      	mov	r3, r1
 8006424:	71fb      	strb	r3, [r7, #7]
 8006426:	4613      	mov	r3, r2
 8006428:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006432:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006436:	2b00      	cmp	r3, #0
 8006438:	d123      	bne.n	8006482 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800643a:	88bb      	ldrh	r3, [r7, #4]
 800643c:	3303      	adds	r3, #3
 800643e:	089b      	lsrs	r3, r3, #2
 8006440:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006442:	2300      	movs	r3, #0
 8006444:	61bb      	str	r3, [r7, #24]
 8006446:	e018      	b.n	800647a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006448:	79fb      	ldrb	r3, [r7, #7]
 800644a:	031a      	lsls	r2, r3, #12
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	4413      	add	r3, r2
 8006450:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006454:	461a      	mov	r2, r3
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	3301      	adds	r3, #1
 8006460:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	3301      	adds	r3, #1
 8006466:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	3301      	adds	r3, #1
 800646c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	3301      	adds	r3, #1
 8006472:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	3301      	adds	r3, #1
 8006478:	61bb      	str	r3, [r7, #24]
 800647a:	69ba      	ldr	r2, [r7, #24]
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	429a      	cmp	r2, r3
 8006480:	d3e2      	bcc.n	8006448 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3724      	adds	r7, #36	@ 0x24
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006490:	b480      	push	{r7}
 8006492:	b08b      	sub	sp, #44	@ 0x2c
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	4613      	mov	r3, r2
 800649c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80064a6:	88fb      	ldrh	r3, [r7, #6]
 80064a8:	089b      	lsrs	r3, r3, #2
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80064ae:	88fb      	ldrh	r3, [r7, #6]
 80064b0:	f003 0303 	and.w	r3, r3, #3
 80064b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80064b6:	2300      	movs	r3, #0
 80064b8:	623b      	str	r3, [r7, #32]
 80064ba:	e014      	b.n	80064e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80064c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ca:	3301      	adds	r3, #1
 80064cc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80064ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d0:	3301      	adds	r3, #1
 80064d2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80064d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d6:	3301      	adds	r3, #1
 80064d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	3301      	adds	r3, #1
 80064de:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	3301      	adds	r3, #1
 80064e4:	623b      	str	r3, [r7, #32]
 80064e6:	6a3a      	ldr	r2, [r7, #32]
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d3e6      	bcc.n	80064bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80064ee:	8bfb      	ldrh	r3, [r7, #30]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d01e      	beq.n	8006532 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064fe:	461a      	mov	r2, r3
 8006500:	f107 0310 	add.w	r3, r7, #16
 8006504:	6812      	ldr	r2, [r2, #0]
 8006506:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	b2db      	uxtb	r3, r3
 800650e:	00db      	lsls	r3, r3, #3
 8006510:	fa22 f303 	lsr.w	r3, r2, r3
 8006514:	b2da      	uxtb	r2, r3
 8006516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006518:	701a      	strb	r2, [r3, #0]
      i++;
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	3301      	adds	r3, #1
 800651e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006522:	3301      	adds	r3, #1
 8006524:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006526:	8bfb      	ldrh	r3, [r7, #30]
 8006528:	3b01      	subs	r3, #1
 800652a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800652c:	8bfb      	ldrh	r3, [r7, #30]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1ea      	bne.n	8006508 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006534:	4618      	mov	r0, r3
 8006536:	372c      	adds	r7, #44	@ 0x2c
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	785b      	ldrb	r3, [r3, #1]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d12c      	bne.n	80065b6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	db12      	blt.n	8006594 <USB_EPSetStall+0x54>
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00f      	beq.n	8006594 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	0151      	lsls	r1, r2, #5
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	440a      	add	r2, r1
 800658a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800658e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006592:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	e02b      	b.n	800660e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	db12      	blt.n	80065ee <USB_EPSetStall+0xae>
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00f      	beq.n	80065ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	0151      	lsls	r1, r2, #5
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	440a      	add	r2, r1
 80065e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80065ec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	0151      	lsls	r1, r2, #5
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	440a      	add	r2, r1
 8006604:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006608:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800660c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	785b      	ldrb	r3, [r3, #1]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d128      	bne.n	800668a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	0151      	lsls	r1, r2, #5
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	440a      	add	r2, r1
 800664e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006652:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006656:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	791b      	ldrb	r3, [r3, #4]
 800665c:	2b03      	cmp	r3, #3
 800665e:	d003      	beq.n	8006668 <USB_EPClearStall+0x4c>
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	791b      	ldrb	r3, [r3, #4]
 8006664:	2b02      	cmp	r3, #2
 8006666:	d138      	bne.n	80066da <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4413      	add	r3, r2
 8006670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	0151      	lsls	r1, r2, #5
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	440a      	add	r2, r1
 800667e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	e027      	b.n	80066da <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4413      	add	r3, r2
 8006692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	0151      	lsls	r1, r2, #5
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	440a      	add	r2, r1
 80066a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80066a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	791b      	ldrb	r3, [r3, #4]
 80066ae:	2b03      	cmp	r3, #3
 80066b0:	d003      	beq.n	80066ba <USB_EPClearStall+0x9e>
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	791b      	ldrb	r3, [r3, #4]
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d10f      	bne.n	80066da <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	0151      	lsls	r1, r2, #5
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	440a      	add	r2, r1
 80066d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066d8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	460b      	mov	r3, r1
 80066f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006706:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800670a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	78fb      	ldrb	r3, [r7, #3]
 8006716:	011b      	lsls	r3, r3, #4
 8006718:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800671c:	68f9      	ldr	r1, [r7, #12]
 800671e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006722:	4313      	orrs	r3, r2
 8006724:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800674e:	f023 0303 	bic.w	r3, r3, #3
 8006752:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006762:	f023 0302 	bic.w	r3, r3, #2
 8006766:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006776:	b480      	push	{r7}
 8006778:	b085      	sub	sp, #20
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006790:	f023 0303 	bic.w	r3, r3, #3
 8006794:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067a4:	f043 0302 	orr.w	r3, r3, #2
 80067a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	4013      	ands	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067d0:	68fb      	ldr	r3, [r7, #12]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80067de:	b480      	push	{r7}
 80067e0:	b085      	sub	sp, #20
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067fa:	69db      	ldr	r3, [r3, #28]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	4013      	ands	r3, r2
 8006800:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	0c1b      	lsrs	r3, r3, #16
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006812:	b480      	push	{r7}
 8006814:	b085      	sub	sp, #20
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800682e:	69db      	ldr	r3, [r3, #28]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	4013      	ands	r3, r2
 8006834:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	b29b      	uxth	r3, r3
}
 800683a:	4618      	mov	r0, r3
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006846:	b480      	push	{r7}
 8006848:	b085      	sub	sp, #20
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	460b      	mov	r3, r1
 8006850:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006856:	78fb      	ldrb	r3, [r7, #3]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4413      	add	r3, r2
 800685e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	4013      	ands	r3, r2
 8006872:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006874:	68bb      	ldr	r3, [r7, #8]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006882:	b480      	push	{r7}
 8006884:	b087      	sub	sp, #28
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	460b      	mov	r3, r1
 800688c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068a4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80068a6:	78fb      	ldrb	r3, [r7, #3]
 80068a8:	f003 030f 	and.w	r3, r3, #15
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	fa22 f303 	lsr.w	r3, r2, r3
 80068b2:	01db      	lsls	r3, r3, #7
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80068bc:	78fb      	ldrb	r3, [r7, #3]
 80068be:	015a      	lsls	r2, r3, #5
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4013      	ands	r3, r2
 80068ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068d0:	68bb      	ldr	r3, [r7, #8]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80068de:	b480      	push	{r7}
 80068e0:	b083      	sub	sp, #12
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	f003 0301 	and.w	r3, r3, #1
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b085      	sub	sp, #20
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006914:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006918:	f023 0307 	bic.w	r3, r3, #7
 800691c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800692c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006930:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	460b      	mov	r3, r1
 800694a:	607a      	str	r2, [r7, #4]
 800694c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	333c      	adds	r3, #60	@ 0x3c
 8006956:	3304      	adds	r3, #4
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	4a26      	ldr	r2, [pc, #152]	@ (80069f8 <USB_EP0_OutStart+0xb8>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d90a      	bls.n	800697a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006970:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006974:	d101      	bne.n	800697a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	e037      	b.n	80069ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006980:	461a      	mov	r2, r3
 8006982:	2300      	movs	r3, #0
 8006984:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006994:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006998:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069a8:	f043 0318 	orr.w	r3, r3, #24
 80069ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069bc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80069c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80069c2:	7afb      	ldrb	r3, [r7, #11]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d10f      	bne.n	80069e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ce:	461a      	mov	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069e2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80069e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	371c      	adds	r7, #28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	4f54300a 	.word	0x4f54300a

080069fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a14:	d901      	bls.n	8006a1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e022      	b.n	8006a60 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	daf2      	bge.n	8006a08 <USB_CoreReset+0xc>

  count = 10U;
 8006a22:	230a      	movs	r3, #10
 8006a24:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006a26:	e002      	b.n	8006a2e <USB_CoreReset+0x32>
  {
    count--;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1f9      	bne.n	8006a28 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	f043 0201 	orr.w	r2, r3, #1
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	3301      	adds	r3, #1
 8006a44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a4c:	d901      	bls.n	8006a52 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e006      	b.n	8006a60 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d0f0      	beq.n	8006a40 <USB_CoreReset+0x44>

  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006a78:	2010      	movs	r0, #16
 8006a7a:	f002 f973 	bl	8008d64 <USBD_static_malloc>
 8006a7e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d109      	bne.n	8006a9a <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	32b0      	adds	r2, #176	@ 0xb0
 8006a90:	2100      	movs	r1, #0
 8006a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006a96:	2302      	movs	r3, #2
 8006a98:	e048      	b.n	8006b2c <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	32b0      	adds	r2, #176	@ 0xb0
 8006aa4:	68f9      	ldr	r1, [r7, #12]
 8006aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	32b0      	adds	r2, #176	@ 0xb0
 8006ab4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	7c1b      	ldrb	r3, [r3, #16]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10d      	bne.n	8006ae2 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8006ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8006b34 <USBD_HID_Init+0xc8>)
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	f003 020f 	and.w	r2, r3, #15
 8006ace:	6879      	ldr	r1, [r7, #4]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	440b      	add	r3, r1
 8006ada:	331c      	adds	r3, #28
 8006adc:	2207      	movs	r2, #7
 8006ade:	601a      	str	r2, [r3, #0]
 8006ae0:	e00c      	b.n	8006afc <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8006ae2:	4b14      	ldr	r3, [pc, #80]	@ (8006b34 <USBD_HID_Init+0xc8>)
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	f003 020f 	and.w	r2, r3, #15
 8006aea:	6879      	ldr	r1, [r7, #4]
 8006aec:	4613      	mov	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	440b      	add	r3, r1
 8006af6:	331c      	adds	r3, #28
 8006af8:	220a      	movs	r2, #10
 8006afa:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006afc:	4b0d      	ldr	r3, [pc, #52]	@ (8006b34 <USBD_HID_Init+0xc8>)
 8006afe:	7819      	ldrb	r1, [r3, #0]
 8006b00:	230c      	movs	r3, #12
 8006b02:	2203      	movs	r2, #3
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f002 f81c 	bl	8008b42 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8006b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8006b34 <USBD_HID_Init+0xc8>)
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	f003 020f 	and.w	r2, r3, #15
 8006b12:	6879      	ldr	r1, [r7, #4]
 8006b14:	4613      	mov	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	440b      	add	r3, r1
 8006b1e:	3323      	adds	r3, #35	@ 0x23
 8006b20:	2201      	movs	r2, #1
 8006b22:	701a      	strb	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	2000013d 	.word	0x2000013d

08006b38 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8006b44:	4b1f      	ldr	r3, [pc, #124]	@ (8006bc4 <USBD_HID_DeInit+0x8c>)
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f002 f81f 	bl	8008b8e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8006b50:	4b1c      	ldr	r3, [pc, #112]	@ (8006bc4 <USBD_HID_DeInit+0x8c>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	f003 020f 	and.w	r2, r3, #15
 8006b58:	6879      	ldr	r1, [r7, #4]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	440b      	add	r3, r1
 8006b64:	3323      	adds	r3, #35	@ 0x23
 8006b66:	2200      	movs	r2, #0
 8006b68:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8006b6a:	4b16      	ldr	r3, [pc, #88]	@ (8006bc4 <USBD_HID_DeInit+0x8c>)
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	f003 020f 	and.w	r2, r3, #15
 8006b72:	6879      	ldr	r1, [r7, #4]
 8006b74:	4613      	mov	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	440b      	add	r3, r1
 8006b7e:	331c      	adds	r3, #28
 8006b80:	2200      	movs	r2, #0
 8006b82:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	32b0      	adds	r2, #176	@ 0xb0
 8006b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d011      	beq.n	8006bba <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	32b0      	adds	r2, #176	@ 0xb0
 8006ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f002 f8eb 	bl	8008d80 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	32b0      	adds	r2, #176	@ 0xb0
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	2000013d 	.word	0x2000013d

08006bc8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	32b0      	adds	r2, #176	@ 0xb0
 8006bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006be6:	2300      	movs	r3, #0
 8006be8:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e0e8      	b.n	8006dc6 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d046      	beq.n	8006c8e <USBD_HID_Setup+0xc6>
 8006c00:	2b20      	cmp	r3, #32
 8006c02:	f040 80d8 	bne.w	8006db6 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	785b      	ldrb	r3, [r3, #1]
 8006c0a:	3b02      	subs	r3, #2
 8006c0c:	2b09      	cmp	r3, #9
 8006c0e:	d836      	bhi.n	8006c7e <USBD_HID_Setup+0xb6>
 8006c10:	a201      	add	r2, pc, #4	@ (adr r2, 8006c18 <USBD_HID_Setup+0x50>)
 8006c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c16:	bf00      	nop
 8006c18:	08006c6f 	.word	0x08006c6f
 8006c1c:	08006c4f 	.word	0x08006c4f
 8006c20:	08006c7f 	.word	0x08006c7f
 8006c24:	08006c7f 	.word	0x08006c7f
 8006c28:	08006c7f 	.word	0x08006c7f
 8006c2c:	08006c7f 	.word	0x08006c7f
 8006c30:	08006c7f 	.word	0x08006c7f
 8006c34:	08006c7f 	.word	0x08006c7f
 8006c38:	08006c5d 	.word	0x08006c5d
 8006c3c:	08006c41 	.word	0x08006c41
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	885b      	ldrh	r3, [r3, #2]
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	461a      	mov	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	601a      	str	r2, [r3, #0]
          break;
 8006c4c:	e01e      	b.n	8006c8c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2201      	movs	r2, #1
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f001 fbfb 	bl	8008450 <USBD_CtlSendData>
          break;
 8006c5a:	e017      	b.n	8006c8c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	885b      	ldrh	r3, [r3, #2]
 8006c60:	0a1b      	lsrs	r3, r3, #8
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	461a      	mov	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	605a      	str	r2, [r3, #4]
          break;
 8006c6c:	e00e      	b.n	8006c8c <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3304      	adds	r3, #4
 8006c72:	2201      	movs	r2, #1
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f001 fbea 	bl	8008450 <USBD_CtlSendData>
          break;
 8006c7c:	e006      	b.n	8006c8c <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006c7e:	6839      	ldr	r1, [r7, #0]
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f001 fb68 	bl	8008356 <USBD_CtlError>
          ret = USBD_FAIL;
 8006c86:	2303      	movs	r3, #3
 8006c88:	75fb      	strb	r3, [r7, #23]
          break;
 8006c8a:	bf00      	nop
      }
      break;
 8006c8c:	e09a      	b.n	8006dc4 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	785b      	ldrb	r3, [r3, #1]
 8006c92:	2b0b      	cmp	r3, #11
 8006c94:	f200 8086 	bhi.w	8006da4 <USBD_HID_Setup+0x1dc>
 8006c98:	a201      	add	r2, pc, #4	@ (adr r2, 8006ca0 <USBD_HID_Setup+0xd8>)
 8006c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9e:	bf00      	nop
 8006ca0:	08006cd1 	.word	0x08006cd1
 8006ca4:	08006db3 	.word	0x08006db3
 8006ca8:	08006da5 	.word	0x08006da5
 8006cac:	08006da5 	.word	0x08006da5
 8006cb0:	08006da5 	.word	0x08006da5
 8006cb4:	08006da5 	.word	0x08006da5
 8006cb8:	08006cfb 	.word	0x08006cfb
 8006cbc:	08006da5 	.word	0x08006da5
 8006cc0:	08006da5 	.word	0x08006da5
 8006cc4:	08006da5 	.word	0x08006da5
 8006cc8:	08006d53 	.word	0x08006d53
 8006ccc:	08006d7d 	.word	0x08006d7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b03      	cmp	r3, #3
 8006cda:	d107      	bne.n	8006cec <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006cdc:	f107 030a 	add.w	r3, r7, #10
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f001 fbb3 	bl	8008450 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cea:	e063      	b.n	8006db4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f001 fb31 	bl	8008356 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	75fb      	strb	r3, [r7, #23]
          break;
 8006cf8:	e05c      	b.n	8006db4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	885b      	ldrh	r3, [r3, #2]
 8006cfe:	0a1b      	lsrs	r3, r3, #8
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	2b22      	cmp	r3, #34	@ 0x22
 8006d04:	d108      	bne.n	8006d18 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	88db      	ldrh	r3, [r3, #6]
 8006d0a:	2b65      	cmp	r3, #101	@ 0x65
 8006d0c:	bf28      	it	cs
 8006d0e:	2365      	movcs	r3, #101	@ 0x65
 8006d10:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8006d12:	4b2f      	ldr	r3, [pc, #188]	@ (8006dd0 <USBD_HID_Setup+0x208>)
 8006d14:	613b      	str	r3, [r7, #16]
 8006d16:	e015      	b.n	8006d44 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	885b      	ldrh	r3, [r3, #2]
 8006d1c:	0a1b      	lsrs	r3, r3, #8
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	2b21      	cmp	r3, #33	@ 0x21
 8006d22:	d108      	bne.n	8006d36 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8006d24:	4b2b      	ldr	r3, [pc, #172]	@ (8006dd4 <USBD_HID_Setup+0x20c>)
 8006d26:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	88db      	ldrh	r3, [r3, #6]
 8006d2c:	2b09      	cmp	r3, #9
 8006d2e:	bf28      	it	cs
 8006d30:	2309      	movcs	r3, #9
 8006d32:	82bb      	strh	r3, [r7, #20]
 8006d34:	e006      	b.n	8006d44 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006d36:	6839      	ldr	r1, [r7, #0]
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f001 fb0c 	bl	8008356 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	75fb      	strb	r3, [r7, #23]
            break;
 8006d42:	e037      	b.n	8006db4 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d44:	8abb      	ldrh	r3, [r7, #20]
 8006d46:	461a      	mov	r2, r3
 8006d48:	6939      	ldr	r1, [r7, #16]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f001 fb80 	bl	8008450 <USBD_CtlSendData>
          break;
 8006d50:	e030      	b.n	8006db4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	d107      	bne.n	8006d6e <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	3308      	adds	r3, #8
 8006d62:	2201      	movs	r2, #1
 8006d64:	4619      	mov	r1, r3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f001 fb72 	bl	8008450 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d6c:	e022      	b.n	8006db4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f001 faf0 	bl	8008356 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d76:	2303      	movs	r3, #3
 8006d78:	75fb      	strb	r3, [r7, #23]
          break;
 8006d7a:	e01b      	b.n	8006db4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d106      	bne.n	8006d96 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	885b      	ldrh	r3, [r3, #2]
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	461a      	mov	r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d94:	e00e      	b.n	8006db4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006d96:	6839      	ldr	r1, [r7, #0]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f001 fadc 	bl	8008356 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	75fb      	strb	r3, [r7, #23]
          break;
 8006da2:	e007      	b.n	8006db4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006da4:	6839      	ldr	r1, [r7, #0]
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f001 fad5 	bl	8008356 <USBD_CtlError>
          ret = USBD_FAIL;
 8006dac:	2303      	movs	r3, #3
 8006dae:	75fb      	strb	r3, [r7, #23]
          break;
 8006db0:	e000      	b.n	8006db4 <USBD_HID_Setup+0x1ec>
          break;
 8006db2:	bf00      	nop
      }
      break;
 8006db4:	e006      	b.n	8006dc4 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f001 facc 	bl	8008356 <USBD_CtlError>
      ret = USBD_FAIL;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	75fb      	strb	r3, [r7, #23]
      break;
 8006dc2:	bf00      	nop
  }

  return (uint8_t)ret;
 8006dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	200000d8 	.word	0x200000d8
 8006dd4:	200000c0 	.word	0x200000c0

08006dd8 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	4613      	mov	r3, r2
 8006de4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	32b0      	adds	r2, #176	@ 0xb0
 8006df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df4:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d101      	bne.n	8006e00 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e014      	b.n	8006e2a <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b03      	cmp	r3, #3
 8006e0a:	d10d      	bne.n	8006e28 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	7b1b      	ldrb	r3, [r3, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d109      	bne.n	8006e28 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	2201      	movs	r2, #1
 8006e18:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8006e1a:	4b06      	ldr	r3, [pc, #24]	@ (8006e34 <USBD_HID_SendReport+0x5c>)
 8006e1c:	7819      	ldrb	r1, [r3, #0]
 8006e1e:	88fb      	ldrh	r3, [r7, #6]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f001 ff5b 	bl	8008cde <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3718      	adds	r7, #24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	2000013d 	.word	0x2000013d

08006e38 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006e40:	2181      	movs	r1, #129	@ 0x81
 8006e42:	4809      	ldr	r0, [pc, #36]	@ (8006e68 <USBD_HID_GetFSCfgDesc+0x30>)
 8006e44:	f000 fc4e 	bl	80076e4 <USBD_GetEpDesc>
 8006e48:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	220a      	movs	r2, #10
 8006e54:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2222      	movs	r2, #34	@ 0x22
 8006e5a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006e5c:	4b02      	ldr	r3, [pc, #8]	@ (8006e68 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	2000009c 	.word	0x2000009c

08006e6c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006e74:	2181      	movs	r1, #129	@ 0x81
 8006e76:	4809      	ldr	r0, [pc, #36]	@ (8006e9c <USBD_HID_GetHSCfgDesc+0x30>)
 8006e78:	f000 fc34 	bl	80076e4 <USBD_GetEpDesc>
 8006e7c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2207      	movs	r2, #7
 8006e88:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2222      	movs	r2, #34	@ 0x22
 8006e8e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006e90:	4b02      	ldr	r3, [pc, #8]	@ (8006e9c <USBD_HID_GetHSCfgDesc+0x30>)
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	2000009c 	.word	0x2000009c

08006ea0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006ea8:	2181      	movs	r1, #129	@ 0x81
 8006eaa:	4809      	ldr	r0, [pc, #36]	@ (8006ed0 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8006eac:	f000 fc1a 	bl	80076e4 <USBD_GetEpDesc>
 8006eb0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	220a      	movs	r2, #10
 8006ebc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2222      	movs	r2, #34	@ 0x22
 8006ec2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006ec4:	4b02      	ldr	r3, [pc, #8]	@ (8006ed0 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	2000009c 	.word	0x2000009c

08006ed4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	460b      	mov	r3, r1
 8006ede:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	32b0      	adds	r2, #176	@ 0xb0
 8006eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	220a      	movs	r2, #10
 8006f0c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006f0e:	4b03      	ldr	r3, [pc, #12]	@ (8006f1c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	200000cc 	.word	0x200000cc

08006f20 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e01f      	b.n	8006f78 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	79fa      	ldrb	r2, [r7, #7]
 8006f6a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f001 fd7b 	bl	8008a68 <USBD_LL_Init>
 8006f72:	4603      	mov	r3, r0
 8006f74:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e025      	b.n	8006fe4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	32ae      	adds	r2, #174	@ 0xae
 8006faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00f      	beq.n	8006fd4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	32ae      	adds	r2, #174	@ 0xae
 8006fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc4:	f107 020e 	add.w	r2, r7, #14
 8006fc8:	4610      	mov	r0, r2
 8006fca:	4798      	blx	r3
 8006fcc:	4602      	mov	r2, r0
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006fda:	1c5a      	adds	r2, r3, #1
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f001 fd89 	bl	8008b0c <USBD_LL_Start>
 8006ffa:	4603      	mov	r3, r0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800700c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800700e:	4618      	mov	r0, r3
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b084      	sub	sp, #16
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
 8007022:	460b      	mov	r3, r1
 8007024:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007030:	2b00      	cmp	r3, #0
 8007032:	d009      	beq.n	8007048 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	78fa      	ldrb	r2, [r7, #3]
 800703e:	4611      	mov	r1, r2
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	4798      	blx	r3
 8007044:	4603      	mov	r3, r0
 8007046:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007048:	7bfb      	ldrb	r3, [r7, #15]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	460b      	mov	r3, r1
 800705c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	78fa      	ldrb	r2, [r7, #3]
 800706c:	4611      	mov	r1, r2
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	4798      	blx	r3
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d001      	beq.n	800707c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007078:	2303      	movs	r3, #3
 800707a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800707c:	7bfb      	ldrb	r3, [r7, #15]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	4618      	mov	r0, r3
 800709a:	f001 f922 	bl	80082e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80070ac:	461a      	mov	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80070ba:	f003 031f 	and.w	r3, r3, #31
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d01a      	beq.n	80070f8 <USBD_LL_SetupStage+0x72>
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d822      	bhi.n	800710c <USBD_LL_SetupStage+0x86>
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <USBD_LL_SetupStage+0x4a>
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d00a      	beq.n	80070e4 <USBD_LL_SetupStage+0x5e>
 80070ce:	e01d      	b.n	800710c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fb77 	bl	80077cc <USBD_StdDevReq>
 80070de:	4603      	mov	r3, r0
 80070e0:	73fb      	strb	r3, [r7, #15]
      break;
 80070e2:	e020      	b.n	8007126 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070ea:	4619      	mov	r1, r3
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fbdf 	bl	80078b0 <USBD_StdItfReq>
 80070f2:	4603      	mov	r3, r0
 80070f4:	73fb      	strb	r3, [r7, #15]
      break;
 80070f6:	e016      	b.n	8007126 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070fe:	4619      	mov	r1, r3
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fc41 	bl	8007988 <USBD_StdEPReq>
 8007106:	4603      	mov	r3, r0
 8007108:	73fb      	strb	r3, [r7, #15]
      break;
 800710a:	e00c      	b.n	8007126 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007112:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007116:	b2db      	uxtb	r3, r3
 8007118:	4619      	mov	r1, r3
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f001 fd56 	bl	8008bcc <USBD_LL_StallEP>
 8007120:	4603      	mov	r3, r0
 8007122:	73fb      	strb	r3, [r7, #15]
      break;
 8007124:	bf00      	nop
  }

  return ret;
 8007126:	7bfb      	ldrb	r3, [r7, #15]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b086      	sub	sp, #24
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	460b      	mov	r3, r1
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800713e:	2300      	movs	r3, #0
 8007140:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007142:	7afb      	ldrb	r3, [r7, #11]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d177      	bne.n	8007238 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800714e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007156:	2b03      	cmp	r3, #3
 8007158:	f040 80a1 	bne.w	800729e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	8992      	ldrh	r2, [r2, #12]
 8007164:	4293      	cmp	r3, r2
 8007166:	d91c      	bls.n	80071a2 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	8992      	ldrh	r2, [r2, #12]
 8007170:	1a9a      	subs	r2, r3, r2
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	8992      	ldrh	r2, [r2, #12]
 800717e:	441a      	add	r2, r3
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	6919      	ldr	r1, [r3, #16]
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	899b      	ldrh	r3, [r3, #12]
 800718c:	461a      	mov	r2, r3
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	4293      	cmp	r3, r2
 8007194:	bf38      	it	cc
 8007196:	4613      	movcc	r3, r2
 8007198:	461a      	mov	r2, r3
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f001 f987 	bl	80084ae <USBD_CtlContinueRx>
 80071a0:	e07d      	b.n	800729e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80071a8:	f003 031f 	and.w	r3, r3, #31
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d014      	beq.n	80071da <USBD_LL_DataOutStage+0xaa>
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d81d      	bhi.n	80071f0 <USBD_LL_DataOutStage+0xc0>
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d002      	beq.n	80071be <USBD_LL_DataOutStage+0x8e>
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d003      	beq.n	80071c4 <USBD_LL_DataOutStage+0x94>
 80071bc:	e018      	b.n	80071f0 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80071be:	2300      	movs	r3, #0
 80071c0:	75bb      	strb	r3, [r7, #22]
            break;
 80071c2:	e018      	b.n	80071f6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	4619      	mov	r1, r3
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 fa6e 	bl	80076b0 <USBD_CoreFindIF>
 80071d4:	4603      	mov	r3, r0
 80071d6:	75bb      	strb	r3, [r7, #22]
            break;
 80071d8:	e00d      	b.n	80071f6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	4619      	mov	r1, r3
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 fa70 	bl	80076ca <USBD_CoreFindEP>
 80071ea:	4603      	mov	r3, r0
 80071ec:	75bb      	strb	r3, [r7, #22]
            break;
 80071ee:	e002      	b.n	80071f6 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80071f0:	2300      	movs	r3, #0
 80071f2:	75bb      	strb	r3, [r7, #22]
            break;
 80071f4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80071f6:	7dbb      	ldrb	r3, [r7, #22]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d119      	bne.n	8007230 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b03      	cmp	r3, #3
 8007206:	d113      	bne.n	8007230 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007208:	7dba      	ldrb	r2, [r7, #22]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	32ae      	adds	r2, #174	@ 0xae
 800720e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00b      	beq.n	8007230 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007218:	7dba      	ldrb	r2, [r7, #22]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007220:	7dba      	ldrb	r2, [r7, #22]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	32ae      	adds	r2, #174	@ 0xae
 8007226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f001 f94d 	bl	80084d0 <USBD_CtlSendStatus>
 8007236:	e032      	b.n	800729e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007238:	7afb      	ldrb	r3, [r7, #11]
 800723a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800723e:	b2db      	uxtb	r3, r3
 8007240:	4619      	mov	r1, r3
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 fa41 	bl	80076ca <USBD_CoreFindEP>
 8007248:	4603      	mov	r3, r0
 800724a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800724c:	7dbb      	ldrb	r3, [r7, #22]
 800724e:	2bff      	cmp	r3, #255	@ 0xff
 8007250:	d025      	beq.n	800729e <USBD_LL_DataOutStage+0x16e>
 8007252:	7dbb      	ldrb	r3, [r7, #22]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d122      	bne.n	800729e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b03      	cmp	r3, #3
 8007262:	d117      	bne.n	8007294 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007264:	7dba      	ldrb	r2, [r7, #22]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	32ae      	adds	r2, #174	@ 0xae
 800726a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00f      	beq.n	8007294 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007274:	7dba      	ldrb	r2, [r7, #22]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800727c:	7dba      	ldrb	r2, [r7, #22]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	32ae      	adds	r2, #174	@ 0xae
 8007282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	7afa      	ldrb	r2, [r7, #11]
 800728a:	4611      	mov	r1, r2
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	4798      	blx	r3
 8007290:	4603      	mov	r3, r0
 8007292:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007294:	7dfb      	ldrb	r3, [r7, #23]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800729a:	7dfb      	ldrb	r3, [r7, #23]
 800729c:	e000      	b.n	80072a0 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3718      	adds	r7, #24
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	460b      	mov	r3, r1
 80072b2:	607a      	str	r2, [r7, #4]
 80072b4:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80072b6:	7afb      	ldrb	r3, [r7, #11]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d178      	bne.n	80073ae <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3314      	adds	r3, #20
 80072c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d163      	bne.n	8007394 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	8992      	ldrh	r2, [r2, #12]
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d91c      	bls.n	8007312 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	8992      	ldrh	r2, [r2, #12]
 80072e0:	1a9a      	subs	r2, r3, r2
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	8992      	ldrh	r2, [r2, #12]
 80072ee:	441a      	add	r2, r3
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	6919      	ldr	r1, [r3, #16]
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	461a      	mov	r2, r3
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f001 f8c4 	bl	800848c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007304:	2300      	movs	r3, #0
 8007306:	2200      	movs	r2, #0
 8007308:	2100      	movs	r1, #0
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f001 fd08 	bl	8008d20 <USBD_LL_PrepareReceive>
 8007310:	e040      	b.n	8007394 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	899b      	ldrh	r3, [r3, #12]
 8007316:	461a      	mov	r2, r3
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	429a      	cmp	r2, r3
 800731e:	d11c      	bne.n	800735a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007328:	4293      	cmp	r3, r2
 800732a:	d316      	bcc.n	800735a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007336:	429a      	cmp	r2, r3
 8007338:	d20f      	bcs.n	800735a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800733a:	2200      	movs	r2, #0
 800733c:	2100      	movs	r1, #0
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f001 f8a4 	bl	800848c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800734c:	2300      	movs	r3, #0
 800734e:	2200      	movs	r2, #0
 8007350:	2100      	movs	r1, #0
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f001 fce4 	bl	8008d20 <USBD_LL_PrepareReceive>
 8007358:	e01c      	b.n	8007394 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b03      	cmp	r3, #3
 8007364:	d10f      	bne.n	8007386 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d009      	beq.n	8007386 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007386:	2180      	movs	r1, #128	@ 0x80
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f001 fc1f 	bl	8008bcc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f001 f8b1 	bl	80084f6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d03a      	beq.n	8007414 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f7ff fe30 	bl	8007004 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80073ac:	e032      	b.n	8007414 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80073ae:	7afb      	ldrb	r3, [r7, #11]
 80073b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	4619      	mov	r1, r3
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 f986 	bl	80076ca <USBD_CoreFindEP>
 80073be:	4603      	mov	r3, r0
 80073c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073c2:	7dfb      	ldrb	r3, [r7, #23]
 80073c4:	2bff      	cmp	r3, #255	@ 0xff
 80073c6:	d025      	beq.n	8007414 <USBD_LL_DataInStage+0x16c>
 80073c8:	7dfb      	ldrb	r3, [r7, #23]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d122      	bne.n	8007414 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d11c      	bne.n	8007414 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80073da:	7dfa      	ldrb	r2, [r7, #23]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	32ae      	adds	r2, #174	@ 0xae
 80073e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d014      	beq.n	8007414 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80073ea:	7dfa      	ldrb	r2, [r7, #23]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80073f2:	7dfa      	ldrb	r2, [r7, #23]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	32ae      	adds	r2, #174	@ 0xae
 80073f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	7afa      	ldrb	r2, [r7, #11]
 8007400:	4611      	mov	r1, r2
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	4798      	blx	r3
 8007406:	4603      	mov	r3, r0
 8007408:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800740a:	7dbb      	ldrb	r3, [r7, #22]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007410:	7dbb      	ldrb	r3, [r7, #22]
 8007412:	e000      	b.n	8007416 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b084      	sub	sp, #16
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007456:	2b00      	cmp	r3, #0
 8007458:	d014      	beq.n	8007484 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00e      	beq.n	8007484 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	6852      	ldr	r2, [r2, #4]
 8007472:	b2d2      	uxtb	r2, r2
 8007474:	4611      	mov	r1, r2
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	4798      	blx	r3
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007480:	2303      	movs	r3, #3
 8007482:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007484:	2340      	movs	r3, #64	@ 0x40
 8007486:	2200      	movs	r2, #0
 8007488:	2100      	movs	r1, #0
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f001 fb59 	bl	8008b42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2240      	movs	r2, #64	@ 0x40
 800749c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074a0:	2340      	movs	r3, #64	@ 0x40
 80074a2:	2200      	movs	r2, #0
 80074a4:	2180      	movs	r1, #128	@ 0x80
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f001 fb4b 	bl	8008b42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2240      	movs	r2, #64	@ 0x40
 80074b8:	841a      	strh	r2, [r3, #32]

  return ret;
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	460b      	mov	r3, r1
 80074ce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	78fa      	ldrb	r2, [r7, #3]
 80074d4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	d006      	beq.n	8007506 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2204      	movs	r2, #4
 800750a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b04      	cmp	r3, #4
 800752e:	d106      	bne.n	800753e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007536:	b2da      	uxtb	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b03      	cmp	r3, #3
 800755e:	d110      	bne.n	8007582 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00b      	beq.n	8007582 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007570:	69db      	ldr	r3, [r3, #28]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d005      	beq.n	8007582 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3708      	adds	r7, #8
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	460b      	mov	r3, r1
 8007596:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	32ae      	adds	r2, #174	@ 0xae
 80075a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e01c      	b.n	80075e8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d115      	bne.n	80075e6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	32ae      	adds	r2, #174	@ 0xae
 80075c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00b      	beq.n	80075e6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	32ae      	adds	r2, #174	@ 0xae
 80075d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	78fa      	ldrb	r2, [r7, #3]
 80075e0:	4611      	mov	r1, r2
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	32ae      	adds	r2, #174	@ 0xae
 8007606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d101      	bne.n	8007612 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800760e:	2303      	movs	r3, #3
 8007610:	e01c      	b.n	800764c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b03      	cmp	r3, #3
 800761c:	d115      	bne.n	800764a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	32ae      	adds	r2, #174	@ 0xae
 8007628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800762c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00b      	beq.n	800764a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	32ae      	adds	r2, #174	@ 0xae
 800763c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007642:	78fa      	ldrb	r2, [r7, #3]
 8007644:	4611      	mov	r1, r2
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b084      	sub	sp, #16
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00e      	beq.n	80076a6 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	6852      	ldr	r2, [r2, #4]
 8007694:	b2d2      	uxtb	r2, r2
 8007696:	4611      	mov	r1, r2
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	4798      	blx	r3
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d001      	beq.n	80076a6 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80076a2:	2303      	movs	r3, #3
 80076a4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	460b      	mov	r3, r1
 80076ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076be:	4618      	mov	r0, r3
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	460b      	mov	r3, r1
 80076d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076d8:	4618      	mov	r0, r3
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	460b      	mov	r3, r1
 80076ee:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80076f8:	2300      	movs	r3, #0
 80076fa:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	885b      	ldrh	r3, [r3, #2]
 8007700:	b29b      	uxth	r3, r3
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	7812      	ldrb	r2, [r2, #0]
 8007706:	4293      	cmp	r3, r2
 8007708:	d91f      	bls.n	800774a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007710:	e013      	b.n	800773a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007712:	f107 030a 	add.w	r3, r7, #10
 8007716:	4619      	mov	r1, r3
 8007718:	6978      	ldr	r0, [r7, #20]
 800771a:	f000 f81b 	bl	8007754 <USBD_GetNextDesc>
 800771e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	785b      	ldrb	r3, [r3, #1]
 8007724:	2b05      	cmp	r3, #5
 8007726:	d108      	bne.n	800773a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	789b      	ldrb	r3, [r3, #2]
 8007730:	78fa      	ldrb	r2, [r7, #3]
 8007732:	429a      	cmp	r2, r3
 8007734:	d008      	beq.n	8007748 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007736:	2300      	movs	r3, #0
 8007738:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	885b      	ldrh	r3, [r3, #2]
 800773e:	b29a      	uxth	r2, r3
 8007740:	897b      	ldrh	r3, [r7, #10]
 8007742:	429a      	cmp	r2, r3
 8007744:	d8e5      	bhi.n	8007712 <USBD_GetEpDesc+0x2e>
 8007746:	e000      	b.n	800774a <USBD_GetEpDesc+0x66>
          break;
 8007748:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800774a:	693b      	ldr	r3, [r7, #16]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3718      	adds	r7, #24
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	881b      	ldrh	r3, [r3, #0]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	7812      	ldrb	r2, [r2, #0]
 800776a:	4413      	add	r3, r2
 800776c:	b29a      	uxth	r2, r3
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	461a      	mov	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4413      	add	r3, r2
 800777c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800777e:	68fb      	ldr	r3, [r7, #12]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	3301      	adds	r3, #1
 80077a2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80077aa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80077ae:	021b      	lsls	r3, r3, #8
 80077b0:	b21a      	sxth	r2, r3
 80077b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	b21b      	sxth	r3, r3
 80077ba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80077bc:	89fb      	ldrh	r3, [r7, #14]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	371c      	adds	r7, #28
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
	...

080077cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077e2:	2b40      	cmp	r3, #64	@ 0x40
 80077e4:	d005      	beq.n	80077f2 <USBD_StdDevReq+0x26>
 80077e6:	2b40      	cmp	r3, #64	@ 0x40
 80077e8:	d857      	bhi.n	800789a <USBD_StdDevReq+0xce>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00f      	beq.n	800780e <USBD_StdDevReq+0x42>
 80077ee:	2b20      	cmp	r3, #32
 80077f0:	d153      	bne.n	800789a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	32ae      	adds	r2, #174	@ 0xae
 80077fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	4798      	blx	r3
 8007808:	4603      	mov	r3, r0
 800780a:	73fb      	strb	r3, [r7, #15]
      break;
 800780c:	e04a      	b.n	80078a4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	785b      	ldrb	r3, [r3, #1]
 8007812:	2b09      	cmp	r3, #9
 8007814:	d83b      	bhi.n	800788e <USBD_StdDevReq+0xc2>
 8007816:	a201      	add	r2, pc, #4	@ (adr r2, 800781c <USBD_StdDevReq+0x50>)
 8007818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781c:	08007871 	.word	0x08007871
 8007820:	08007885 	.word	0x08007885
 8007824:	0800788f 	.word	0x0800788f
 8007828:	0800787b 	.word	0x0800787b
 800782c:	0800788f 	.word	0x0800788f
 8007830:	0800784f 	.word	0x0800784f
 8007834:	08007845 	.word	0x08007845
 8007838:	0800788f 	.word	0x0800788f
 800783c:	08007867 	.word	0x08007867
 8007840:	08007859 	.word	0x08007859
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fa3e 	bl	8007cc8 <USBD_GetDescriptor>
          break;
 800784c:	e024      	b.n	8007898 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fba3 	bl	8007f9c <USBD_SetAddress>
          break;
 8007856:	e01f      	b.n	8007898 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fbe2 	bl	8008024 <USBD_SetConfig>
 8007860:	4603      	mov	r3, r0
 8007862:	73fb      	strb	r3, [r7, #15]
          break;
 8007864:	e018      	b.n	8007898 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fc85 	bl	8008178 <USBD_GetConfig>
          break;
 800786e:	e013      	b.n	8007898 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fcb6 	bl	80081e4 <USBD_GetStatus>
          break;
 8007878:	e00e      	b.n	8007898 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fce5 	bl	800824c <USBD_SetFeature>
          break;
 8007882:	e009      	b.n	8007898 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fd09 	bl	800829e <USBD_ClrFeature>
          break;
 800788c:	e004      	b.n	8007898 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fd60 	bl	8008356 <USBD_CtlError>
          break;
 8007896:	bf00      	nop
      }
      break;
 8007898:	e004      	b.n	80078a4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fd5a 	bl	8008356 <USBD_CtlError>
      break;
 80078a2:	bf00      	nop
  }

  return ret;
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop

080078b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ba:	2300      	movs	r3, #0
 80078bc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80078c6:	2b40      	cmp	r3, #64	@ 0x40
 80078c8:	d005      	beq.n	80078d6 <USBD_StdItfReq+0x26>
 80078ca:	2b40      	cmp	r3, #64	@ 0x40
 80078cc:	d852      	bhi.n	8007974 <USBD_StdItfReq+0xc4>
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <USBD_StdItfReq+0x26>
 80078d2:	2b20      	cmp	r3, #32
 80078d4:	d14e      	bne.n	8007974 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	3b01      	subs	r3, #1
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d840      	bhi.n	8007966 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	889b      	ldrh	r3, [r3, #4]
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d836      	bhi.n	800795c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	889b      	ldrh	r3, [r3, #4]
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	4619      	mov	r1, r3
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7ff feda 	bl	80076b0 <USBD_CoreFindIF>
 80078fc:	4603      	mov	r3, r0
 80078fe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007900:	7bbb      	ldrb	r3, [r7, #14]
 8007902:	2bff      	cmp	r3, #255	@ 0xff
 8007904:	d01d      	beq.n	8007942 <USBD_StdItfReq+0x92>
 8007906:	7bbb      	ldrb	r3, [r7, #14]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d11a      	bne.n	8007942 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800790c:	7bba      	ldrb	r2, [r7, #14]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	32ae      	adds	r2, #174	@ 0xae
 8007912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00f      	beq.n	800793c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800791c:	7bba      	ldrb	r2, [r7, #14]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007924:	7bba      	ldrb	r2, [r7, #14]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	32ae      	adds	r2, #174	@ 0xae
 800792a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	4798      	blx	r3
 8007936:	4603      	mov	r3, r0
 8007938:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800793a:	e004      	b.n	8007946 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800793c:	2303      	movs	r3, #3
 800793e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007940:	e001      	b.n	8007946 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007942:	2303      	movs	r3, #3
 8007944:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	88db      	ldrh	r3, [r3, #6]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d110      	bne.n	8007970 <USBD_StdItfReq+0xc0>
 800794e:	7bfb      	ldrb	r3, [r7, #15]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10d      	bne.n	8007970 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fdbb 	bl	80084d0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800795a:	e009      	b.n	8007970 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fcf9 	bl	8008356 <USBD_CtlError>
          break;
 8007964:	e004      	b.n	8007970 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007966:	6839      	ldr	r1, [r7, #0]
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fcf4 	bl	8008356 <USBD_CtlError>
          break;
 800796e:	e000      	b.n	8007972 <USBD_StdItfReq+0xc2>
          break;
 8007970:	bf00      	nop
      }
      break;
 8007972:	e004      	b.n	800797e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fced 	bl	8008356 <USBD_CtlError>
      break;
 800797c:	bf00      	nop
  }

  return ret;
 800797e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007992:	2300      	movs	r3, #0
 8007994:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	889b      	ldrh	r3, [r3, #4]
 800799a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079a4:	2b40      	cmp	r3, #64	@ 0x40
 80079a6:	d007      	beq.n	80079b8 <USBD_StdEPReq+0x30>
 80079a8:	2b40      	cmp	r3, #64	@ 0x40
 80079aa:	f200 8181 	bhi.w	8007cb0 <USBD_StdEPReq+0x328>
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d02a      	beq.n	8007a08 <USBD_StdEPReq+0x80>
 80079b2:	2b20      	cmp	r3, #32
 80079b4:	f040 817c 	bne.w	8007cb0 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80079b8:	7bbb      	ldrb	r3, [r7, #14]
 80079ba:	4619      	mov	r1, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7ff fe84 	bl	80076ca <USBD_CoreFindEP>
 80079c2:	4603      	mov	r3, r0
 80079c4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079c6:	7b7b      	ldrb	r3, [r7, #13]
 80079c8:	2bff      	cmp	r3, #255	@ 0xff
 80079ca:	f000 8176 	beq.w	8007cba <USBD_StdEPReq+0x332>
 80079ce:	7b7b      	ldrb	r3, [r7, #13]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f040 8172 	bne.w	8007cba <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80079d6:	7b7a      	ldrb	r2, [r7, #13]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80079de:	7b7a      	ldrb	r2, [r7, #13]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	32ae      	adds	r2, #174	@ 0xae
 80079e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f000 8165 	beq.w	8007cba <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80079f0:	7b7a      	ldrb	r2, [r7, #13]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	32ae      	adds	r2, #174	@ 0xae
 80079f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	4798      	blx	r3
 8007a02:	4603      	mov	r3, r0
 8007a04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a06:	e158      	b.n	8007cba <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	785b      	ldrb	r3, [r3, #1]
 8007a0c:	2b03      	cmp	r3, #3
 8007a0e:	d008      	beq.n	8007a22 <USBD_StdEPReq+0x9a>
 8007a10:	2b03      	cmp	r3, #3
 8007a12:	f300 8147 	bgt.w	8007ca4 <USBD_StdEPReq+0x31c>
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 809b 	beq.w	8007b52 <USBD_StdEPReq+0x1ca>
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d03c      	beq.n	8007a9a <USBD_StdEPReq+0x112>
 8007a20:	e140      	b.n	8007ca4 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d002      	beq.n	8007a34 <USBD_StdEPReq+0xac>
 8007a2e:	2b03      	cmp	r3, #3
 8007a30:	d016      	beq.n	8007a60 <USBD_StdEPReq+0xd8>
 8007a32:	e02c      	b.n	8007a8e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a34:	7bbb      	ldrb	r3, [r7, #14]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00d      	beq.n	8007a56 <USBD_StdEPReq+0xce>
 8007a3a:	7bbb      	ldrb	r3, [r7, #14]
 8007a3c:	2b80      	cmp	r3, #128	@ 0x80
 8007a3e:	d00a      	beq.n	8007a56 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a40:	7bbb      	ldrb	r3, [r7, #14]
 8007a42:	4619      	mov	r1, r3
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f001 f8c1 	bl	8008bcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a4a:	2180      	movs	r1, #128	@ 0x80
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f001 f8bd 	bl	8008bcc <USBD_LL_StallEP>
 8007a52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a54:	e020      	b.n	8007a98 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fc7c 	bl	8008356 <USBD_CtlError>
              break;
 8007a5e:	e01b      	b.n	8007a98 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	885b      	ldrh	r3, [r3, #2]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10e      	bne.n	8007a86 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a68:	7bbb      	ldrb	r3, [r7, #14]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00b      	beq.n	8007a86 <USBD_StdEPReq+0xfe>
 8007a6e:	7bbb      	ldrb	r3, [r7, #14]
 8007a70:	2b80      	cmp	r3, #128	@ 0x80
 8007a72:	d008      	beq.n	8007a86 <USBD_StdEPReq+0xfe>
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	88db      	ldrh	r3, [r3, #6]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d104      	bne.n	8007a86 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a7c:	7bbb      	ldrb	r3, [r7, #14]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f001 f8a3 	bl	8008bcc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fd22 	bl	80084d0 <USBD_CtlSendStatus>

              break;
 8007a8c:	e004      	b.n	8007a98 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fc60 	bl	8008356 <USBD_CtlError>
              break;
 8007a96:	bf00      	nop
          }
          break;
 8007a98:	e109      	b.n	8007cae <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d002      	beq.n	8007aac <USBD_StdEPReq+0x124>
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d016      	beq.n	8007ad8 <USBD_StdEPReq+0x150>
 8007aaa:	e04b      	b.n	8007b44 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00d      	beq.n	8007ace <USBD_StdEPReq+0x146>
 8007ab2:	7bbb      	ldrb	r3, [r7, #14]
 8007ab4:	2b80      	cmp	r3, #128	@ 0x80
 8007ab6:	d00a      	beq.n	8007ace <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f001 f885 	bl	8008bcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ac2:	2180      	movs	r1, #128	@ 0x80
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f001 f881 	bl	8008bcc <USBD_LL_StallEP>
 8007aca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007acc:	e040      	b.n	8007b50 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fc40 	bl	8008356 <USBD_CtlError>
              break;
 8007ad6:	e03b      	b.n	8007b50 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	885b      	ldrh	r3, [r3, #2]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d136      	bne.n	8007b4e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d004      	beq.n	8007af4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007aea:	7bbb      	ldrb	r3, [r7, #14]
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f001 f88b 	bl	8008c0a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fceb 	bl	80084d0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007afa:	7bbb      	ldrb	r3, [r7, #14]
 8007afc:	4619      	mov	r1, r3
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7ff fde3 	bl	80076ca <USBD_CoreFindEP>
 8007b04:	4603      	mov	r3, r0
 8007b06:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b08:	7b7b      	ldrb	r3, [r7, #13]
 8007b0a:	2bff      	cmp	r3, #255	@ 0xff
 8007b0c:	d01f      	beq.n	8007b4e <USBD_StdEPReq+0x1c6>
 8007b0e:	7b7b      	ldrb	r3, [r7, #13]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d11c      	bne.n	8007b4e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007b14:	7b7a      	ldrb	r2, [r7, #13]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007b1c:	7b7a      	ldrb	r2, [r7, #13]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	32ae      	adds	r2, #174	@ 0xae
 8007b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d010      	beq.n	8007b4e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b2c:	7b7a      	ldrb	r2, [r7, #13]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	32ae      	adds	r2, #174	@ 0xae
 8007b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	4798      	blx	r3
 8007b3e:	4603      	mov	r3, r0
 8007b40:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b42:	e004      	b.n	8007b4e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b44:	6839      	ldr	r1, [r7, #0]
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 fc05 	bl	8008356 <USBD_CtlError>
              break;
 8007b4c:	e000      	b.n	8007b50 <USBD_StdEPReq+0x1c8>
              break;
 8007b4e:	bf00      	nop
          }
          break;
 8007b50:	e0ad      	b.n	8007cae <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d002      	beq.n	8007b64 <USBD_StdEPReq+0x1dc>
 8007b5e:	2b03      	cmp	r3, #3
 8007b60:	d033      	beq.n	8007bca <USBD_StdEPReq+0x242>
 8007b62:	e099      	b.n	8007c98 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b64:	7bbb      	ldrb	r3, [r7, #14]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d007      	beq.n	8007b7a <USBD_StdEPReq+0x1f2>
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
 8007b6c:	2b80      	cmp	r3, #128	@ 0x80
 8007b6e:	d004      	beq.n	8007b7a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fbef 	bl	8008356 <USBD_CtlError>
                break;
 8007b78:	e093      	b.n	8007ca2 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	da0b      	bge.n	8007b9a <USBD_StdEPReq+0x212>
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
 8007b84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b88:	4613      	mov	r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4413      	add	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	3310      	adds	r3, #16
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	4413      	add	r3, r2
 8007b96:	3304      	adds	r3, #4
 8007b98:	e00b      	b.n	8007bb2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b9a:	7bbb      	ldrb	r3, [r7, #14]
 8007b9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4413      	add	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	4413      	add	r3, r2
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	330e      	adds	r3, #14
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fc44 	bl	8008450 <USBD_CtlSendData>
              break;
 8007bc8:	e06b      	b.n	8007ca2 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007bca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	da11      	bge.n	8007bf6 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
 8007bd4:	f003 020f 	and.w	r2, r3, #15
 8007bd8:	6879      	ldr	r1, [r7, #4]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4413      	add	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	440b      	add	r3, r1
 8007be4:	3323      	adds	r3, #35	@ 0x23
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d117      	bne.n	8007c1c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fbb1 	bl	8008356 <USBD_CtlError>
                  break;
 8007bf4:	e055      	b.n	8007ca2 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007bf6:	7bbb      	ldrb	r3, [r7, #14]
 8007bf8:	f003 020f 	and.w	r2, r3, #15
 8007bfc:	6879      	ldr	r1, [r7, #4]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	440b      	add	r3, r1
 8007c08:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d104      	bne.n	8007c1c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007c12:	6839      	ldr	r1, [r7, #0]
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fb9e 	bl	8008356 <USBD_CtlError>
                  break;
 8007c1a:	e042      	b.n	8007ca2 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	da0b      	bge.n	8007c3c <USBD_StdEPReq+0x2b4>
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
 8007c26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4413      	add	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	3310      	adds	r3, #16
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	4413      	add	r3, r2
 8007c38:	3304      	adds	r3, #4
 8007c3a:	e00b      	b.n	8007c54 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c3c:	7bbb      	ldrb	r3, [r7, #14]
 8007c3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c42:	4613      	mov	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4413      	add	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	4413      	add	r3, r2
 8007c52:	3304      	adds	r3, #4
 8007c54:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c56:	7bbb      	ldrb	r3, [r7, #14]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d002      	beq.n	8007c62 <USBD_StdEPReq+0x2da>
 8007c5c:	7bbb      	ldrb	r3, [r7, #14]
 8007c5e:	2b80      	cmp	r3, #128	@ 0x80
 8007c60:	d103      	bne.n	8007c6a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	2200      	movs	r2, #0
 8007c66:	739a      	strb	r2, [r3, #14]
 8007c68:	e00e      	b.n	8007c88 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c6a:	7bbb      	ldrb	r3, [r7, #14]
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 ffea 	bl	8008c48 <USBD_LL_IsStallEP>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d003      	beq.n	8007c82 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	739a      	strb	r2, [r3, #14]
 8007c80:	e002      	b.n	8007c88 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	2200      	movs	r2, #0
 8007c86:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	330e      	adds	r3, #14
 8007c8c:	2202      	movs	r2, #2
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fbdd 	bl	8008450 <USBD_CtlSendData>
              break;
 8007c96:	e004      	b.n	8007ca2 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fb5b 	bl	8008356 <USBD_CtlError>
              break;
 8007ca0:	bf00      	nop
          }
          break;
 8007ca2:	e004      	b.n	8007cae <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fb55 	bl	8008356 <USBD_CtlError>
          break;
 8007cac:	bf00      	nop
      }
      break;
 8007cae:	e005      	b.n	8007cbc <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fb4f 	bl	8008356 <USBD_CtlError>
      break;
 8007cb8:	e000      	b.n	8007cbc <USBD_StdEPReq+0x334>
      break;
 8007cba:	bf00      	nop
  }

  return ret;
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
	...

08007cc8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	885b      	ldrh	r3, [r3, #2]
 8007ce2:	0a1b      	lsrs	r3, r3, #8
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	2b06      	cmp	r3, #6
 8007cea:	f200 8128 	bhi.w	8007f3e <USBD_GetDescriptor+0x276>
 8007cee:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf4 <USBD_GetDescriptor+0x2c>)
 8007cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf4:	08007d11 	.word	0x08007d11
 8007cf8:	08007d29 	.word	0x08007d29
 8007cfc:	08007d69 	.word	0x08007d69
 8007d00:	08007f3f 	.word	0x08007f3f
 8007d04:	08007f3f 	.word	0x08007f3f
 8007d08:	08007edf 	.word	0x08007edf
 8007d0c:	08007f0b 	.word	0x08007f0b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	7c12      	ldrb	r2, [r2, #16]
 8007d1c:	f107 0108 	add.w	r1, r7, #8
 8007d20:	4610      	mov	r0, r2
 8007d22:	4798      	blx	r3
 8007d24:	60f8      	str	r0, [r7, #12]
      break;
 8007d26:	e112      	b.n	8007f4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	7c1b      	ldrb	r3, [r3, #16]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10d      	bne.n	8007d4c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d38:	f107 0208 	add.w	r2, r7, #8
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	4798      	blx	r3
 8007d40:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	3301      	adds	r3, #1
 8007d46:	2202      	movs	r2, #2
 8007d48:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d4a:	e100      	b.n	8007f4e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d54:	f107 0208 	add.w	r2, r7, #8
 8007d58:	4610      	mov	r0, r2
 8007d5a:	4798      	blx	r3
 8007d5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	3301      	adds	r3, #1
 8007d62:	2202      	movs	r2, #2
 8007d64:	701a      	strb	r2, [r3, #0]
      break;
 8007d66:	e0f2      	b.n	8007f4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	885b      	ldrh	r3, [r3, #2]
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b05      	cmp	r3, #5
 8007d70:	f200 80ac 	bhi.w	8007ecc <USBD_GetDescriptor+0x204>
 8007d74:	a201      	add	r2, pc, #4	@ (adr r2, 8007d7c <USBD_GetDescriptor+0xb4>)
 8007d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7a:	bf00      	nop
 8007d7c:	08007d95 	.word	0x08007d95
 8007d80:	08007dc9 	.word	0x08007dc9
 8007d84:	08007dfd 	.word	0x08007dfd
 8007d88:	08007e31 	.word	0x08007e31
 8007d8c:	08007e65 	.word	0x08007e65
 8007d90:	08007e99 	.word	0x08007e99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00b      	beq.n	8007db8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	7c12      	ldrb	r2, [r2, #16]
 8007dac:	f107 0108 	add.w	r1, r7, #8
 8007db0:	4610      	mov	r0, r2
 8007db2:	4798      	blx	r3
 8007db4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007db6:	e091      	b.n	8007edc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007db8:	6839      	ldr	r1, [r7, #0]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 facb 	bl	8008356 <USBD_CtlError>
            err++;
 8007dc0:	7afb      	ldrb	r3, [r7, #11]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	72fb      	strb	r3, [r7, #11]
          break;
 8007dc6:	e089      	b.n	8007edc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00b      	beq.n	8007dec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	7c12      	ldrb	r2, [r2, #16]
 8007de0:	f107 0108 	add.w	r1, r7, #8
 8007de4:	4610      	mov	r0, r2
 8007de6:	4798      	blx	r3
 8007de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dea:	e077      	b.n	8007edc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fab1 	bl	8008356 <USBD_CtlError>
            err++;
 8007df4:	7afb      	ldrb	r3, [r7, #11]
 8007df6:	3301      	adds	r3, #1
 8007df8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dfa:	e06f      	b.n	8007edc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00b      	beq.n	8007e20 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	7c12      	ldrb	r2, [r2, #16]
 8007e14:	f107 0108 	add.w	r1, r7, #8
 8007e18:	4610      	mov	r0, r2
 8007e1a:	4798      	blx	r3
 8007e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e1e:	e05d      	b.n	8007edc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e20:	6839      	ldr	r1, [r7, #0]
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fa97 	bl	8008356 <USBD_CtlError>
            err++;
 8007e28:	7afb      	ldrb	r3, [r7, #11]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e2e:	e055      	b.n	8007edc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00b      	beq.n	8007e54 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	7c12      	ldrb	r2, [r2, #16]
 8007e48:	f107 0108 	add.w	r1, r7, #8
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	4798      	blx	r3
 8007e50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e52:	e043      	b.n	8007edc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fa7d 	bl	8008356 <USBD_CtlError>
            err++;
 8007e5c:	7afb      	ldrb	r3, [r7, #11]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	72fb      	strb	r3, [r7, #11]
          break;
 8007e62:	e03b      	b.n	8007edc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e6a:	695b      	ldr	r3, [r3, #20]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00b      	beq.n	8007e88 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	7c12      	ldrb	r2, [r2, #16]
 8007e7c:	f107 0108 	add.w	r1, r7, #8
 8007e80:	4610      	mov	r0, r2
 8007e82:	4798      	blx	r3
 8007e84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e86:	e029      	b.n	8007edc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fa63 	bl	8008356 <USBD_CtlError>
            err++;
 8007e90:	7afb      	ldrb	r3, [r7, #11]
 8007e92:	3301      	adds	r3, #1
 8007e94:	72fb      	strb	r3, [r7, #11]
          break;
 8007e96:	e021      	b.n	8007edc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e9e:	699b      	ldr	r3, [r3, #24]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00b      	beq.n	8007ebc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	7c12      	ldrb	r2, [r2, #16]
 8007eb0:	f107 0108 	add.w	r1, r7, #8
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	4798      	blx	r3
 8007eb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eba:	e00f      	b.n	8007edc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ebc:	6839      	ldr	r1, [r7, #0]
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fa49 	bl	8008356 <USBD_CtlError>
            err++;
 8007ec4:	7afb      	ldrb	r3, [r7, #11]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eca:	e007      	b.n	8007edc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 fa41 	bl	8008356 <USBD_CtlError>
          err++;
 8007ed4:	7afb      	ldrb	r3, [r7, #11]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007eda:	bf00      	nop
      }
      break;
 8007edc:	e037      	b.n	8007f4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	7c1b      	ldrb	r3, [r3, #16]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d109      	bne.n	8007efa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eee:	f107 0208 	add.w	r2, r7, #8
 8007ef2:	4610      	mov	r0, r2
 8007ef4:	4798      	blx	r3
 8007ef6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ef8:	e029      	b.n	8007f4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007efa:	6839      	ldr	r1, [r7, #0]
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fa2a 	bl	8008356 <USBD_CtlError>
        err++;
 8007f02:	7afb      	ldrb	r3, [r7, #11]
 8007f04:	3301      	adds	r3, #1
 8007f06:	72fb      	strb	r3, [r7, #11]
      break;
 8007f08:	e021      	b.n	8007f4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	7c1b      	ldrb	r3, [r3, #16]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10d      	bne.n	8007f2e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f1a:	f107 0208 	add.w	r2, r7, #8
 8007f1e:	4610      	mov	r0, r2
 8007f20:	4798      	blx	r3
 8007f22:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	3301      	adds	r3, #1
 8007f28:	2207      	movs	r2, #7
 8007f2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f2c:	e00f      	b.n	8007f4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f2e:	6839      	ldr	r1, [r7, #0]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fa10 	bl	8008356 <USBD_CtlError>
        err++;
 8007f36:	7afb      	ldrb	r3, [r7, #11]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f3c:	e007      	b.n	8007f4e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f3e:	6839      	ldr	r1, [r7, #0]
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 fa08 	bl	8008356 <USBD_CtlError>
      err++;
 8007f46:	7afb      	ldrb	r3, [r7, #11]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f4c:	bf00      	nop
  }

  if (err != 0U)
 8007f4e:	7afb      	ldrb	r3, [r7, #11]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d11e      	bne.n	8007f92 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	88db      	ldrh	r3, [r3, #6]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d016      	beq.n	8007f8a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007f5c:	893b      	ldrh	r3, [r7, #8]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00e      	beq.n	8007f80 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	88da      	ldrh	r2, [r3, #6]
 8007f66:	893b      	ldrh	r3, [r7, #8]
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	bf28      	it	cs
 8007f6c:	4613      	movcs	r3, r2
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f72:	893b      	ldrh	r3, [r7, #8]
 8007f74:	461a      	mov	r2, r3
 8007f76:	68f9      	ldr	r1, [r7, #12]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fa69 	bl	8008450 <USBD_CtlSendData>
 8007f7e:	e009      	b.n	8007f94 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f9e7 	bl	8008356 <USBD_CtlError>
 8007f88:	e004      	b.n	8007f94 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 faa0 	bl	80084d0 <USBD_CtlSendStatus>
 8007f90:	e000      	b.n	8007f94 <USBD_GetDescriptor+0x2cc>
    return;
 8007f92:	bf00      	nop
  }
}
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop

08007f9c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	889b      	ldrh	r3, [r3, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d131      	bne.n	8008012 <USBD_SetAddress+0x76>
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	88db      	ldrh	r3, [r3, #6]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d12d      	bne.n	8008012 <USBD_SetAddress+0x76>
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	885b      	ldrh	r3, [r3, #2]
 8007fba:	2b7f      	cmp	r3, #127	@ 0x7f
 8007fbc:	d829      	bhi.n	8008012 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	885b      	ldrh	r3, [r3, #2]
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fc8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	d104      	bne.n	8007fe0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f9bc 	bl	8008356 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fde:	e01d      	b.n	800801c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	7bfa      	ldrb	r2, [r7, #15]
 8007fe4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
 8007fea:	4619      	mov	r1, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fe57 	bl	8008ca0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fa6c 	bl	80084d0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d004      	beq.n	8008008 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2202      	movs	r2, #2
 8008002:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008006:	e009      	b.n	800801c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008010:	e004      	b.n	800801c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008012:	6839      	ldr	r1, [r7, #0]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f99e 	bl	8008356 <USBD_CtlError>
  }
}
 800801a:	bf00      	nop
 800801c:	bf00      	nop
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	885b      	ldrh	r3, [r3, #2]
 8008036:	b2da      	uxtb	r2, r3
 8008038:	4b4e      	ldr	r3, [pc, #312]	@ (8008174 <USBD_SetConfig+0x150>)
 800803a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800803c:	4b4d      	ldr	r3, [pc, #308]	@ (8008174 <USBD_SetConfig+0x150>)
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d905      	bls.n	8008050 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f985 	bl	8008356 <USBD_CtlError>
    return USBD_FAIL;
 800804c:	2303      	movs	r3, #3
 800804e:	e08c      	b.n	800816a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b02      	cmp	r3, #2
 800805a:	d002      	beq.n	8008062 <USBD_SetConfig+0x3e>
 800805c:	2b03      	cmp	r3, #3
 800805e:	d029      	beq.n	80080b4 <USBD_SetConfig+0x90>
 8008060:	e075      	b.n	800814e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008062:	4b44      	ldr	r3, [pc, #272]	@ (8008174 <USBD_SetConfig+0x150>)
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d020      	beq.n	80080ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800806a:	4b42      	ldr	r3, [pc, #264]	@ (8008174 <USBD_SetConfig+0x150>)
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	461a      	mov	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008074:	4b3f      	ldr	r3, [pc, #252]	@ (8008174 <USBD_SetConfig+0x150>)
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	4619      	mov	r1, r3
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7fe ffcd 	bl	800701a <USBD_SetClassConfig>
 8008080:	4603      	mov	r3, r0
 8008082:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008084:	7bfb      	ldrb	r3, [r7, #15]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d008      	beq.n	800809c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f962 	bl	8008356 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2202      	movs	r2, #2
 8008096:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800809a:	e065      	b.n	8008168 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 fa17 	bl	80084d0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2203      	movs	r2, #3
 80080a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80080aa:	e05d      	b.n	8008168 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fa0f 	bl	80084d0 <USBD_CtlSendStatus>
      break;
 80080b2:	e059      	b.n	8008168 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080b4:	4b2f      	ldr	r3, [pc, #188]	@ (8008174 <USBD_SetConfig+0x150>)
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d112      	bne.n	80080e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2202      	movs	r2, #2
 80080c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80080c4:	4b2b      	ldr	r3, [pc, #172]	@ (8008174 <USBD_SetConfig+0x150>)
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	461a      	mov	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080ce:	4b29      	ldr	r3, [pc, #164]	@ (8008174 <USBD_SetConfig+0x150>)
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	4619      	mov	r1, r3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f7fe ffbc 	bl	8007052 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f9f8 	bl	80084d0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080e0:	e042      	b.n	8008168 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80080e2:	4b24      	ldr	r3, [pc, #144]	@ (8008174 <USBD_SetConfig+0x150>)
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d02a      	beq.n	8008146 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7fe ffaa 	bl	8007052 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80080fe:	4b1d      	ldr	r3, [pc, #116]	@ (8008174 <USBD_SetConfig+0x150>)
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	461a      	mov	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008108:	4b1a      	ldr	r3, [pc, #104]	@ (8008174 <USBD_SetConfig+0x150>)
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	4619      	mov	r1, r3
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7fe ff83 	bl	800701a <USBD_SetClassConfig>
 8008114:	4603      	mov	r3, r0
 8008116:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008118:	7bfb      	ldrb	r3, [r7, #15]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00f      	beq.n	800813e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800811e:	6839      	ldr	r1, [r7, #0]
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f918 	bl	8008356 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	b2db      	uxtb	r3, r3
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7fe ff8f 	bl	8007052 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2202      	movs	r2, #2
 8008138:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800813c:	e014      	b.n	8008168 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f9c6 	bl	80084d0 <USBD_CtlSendStatus>
      break;
 8008144:	e010      	b.n	8008168 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f9c2 	bl	80084d0 <USBD_CtlSendStatus>
      break;
 800814c:	e00c      	b.n	8008168 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f900 	bl	8008356 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008156:	4b07      	ldr	r3, [pc, #28]	@ (8008174 <USBD_SetConfig+0x150>)
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	4619      	mov	r1, r3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f7fe ff78 	bl	8007052 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008162:	2303      	movs	r3, #3
 8008164:	73fb      	strb	r3, [r7, #15]
      break;
 8008166:	bf00      	nop
  }

  return ret;
 8008168:	7bfb      	ldrb	r3, [r7, #15]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	200002b8 	.word	0x200002b8

08008178 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	88db      	ldrh	r3, [r3, #6]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d004      	beq.n	8008194 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800818a:	6839      	ldr	r1, [r7, #0]
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f8e2 	bl	8008356 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008192:	e023      	b.n	80081dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800819a:	b2db      	uxtb	r3, r3
 800819c:	2b02      	cmp	r3, #2
 800819e:	dc02      	bgt.n	80081a6 <USBD_GetConfig+0x2e>
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	dc03      	bgt.n	80081ac <USBD_GetConfig+0x34>
 80081a4:	e015      	b.n	80081d2 <USBD_GetConfig+0x5a>
 80081a6:	2b03      	cmp	r3, #3
 80081a8:	d00b      	beq.n	80081c2 <USBD_GetConfig+0x4a>
 80081aa:	e012      	b.n	80081d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	3308      	adds	r3, #8
 80081b6:	2201      	movs	r2, #1
 80081b8:	4619      	mov	r1, r3
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f948 	bl	8008450 <USBD_CtlSendData>
        break;
 80081c0:	e00c      	b.n	80081dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	3304      	adds	r3, #4
 80081c6:	2201      	movs	r2, #1
 80081c8:	4619      	mov	r1, r3
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f940 	bl	8008450 <USBD_CtlSendData>
        break;
 80081d0:	e004      	b.n	80081dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80081d2:	6839      	ldr	r1, [r7, #0]
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 f8be 	bl	8008356 <USBD_CtlError>
        break;
 80081da:	bf00      	nop
}
 80081dc:	bf00      	nop
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	3b01      	subs	r3, #1
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d81e      	bhi.n	800823a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	88db      	ldrh	r3, [r3, #6]
 8008200:	2b02      	cmp	r3, #2
 8008202:	d004      	beq.n	800820e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f8a5 	bl	8008356 <USBD_CtlError>
        break;
 800820c:	e01a      	b.n	8008244 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2201      	movs	r2, #1
 8008212:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800821a:	2b00      	cmp	r3, #0
 800821c:	d005      	beq.n	800822a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	f043 0202 	orr.w	r2, r3, #2
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	330c      	adds	r3, #12
 800822e:	2202      	movs	r2, #2
 8008230:	4619      	mov	r1, r3
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f90c 	bl	8008450 <USBD_CtlSendData>
      break;
 8008238:	e004      	b.n	8008244 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800823a:	6839      	ldr	r1, [r7, #0]
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f88a 	bl	8008356 <USBD_CtlError>
      break;
 8008242:	bf00      	nop
  }
}
 8008244:	bf00      	nop
 8008246:	3708      	adds	r7, #8
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	885b      	ldrh	r3, [r3, #2]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d107      	bne.n	800826e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f932 	bl	80084d0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800826c:	e013      	b.n	8008296 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	885b      	ldrh	r3, [r3, #2]
 8008272:	2b02      	cmp	r3, #2
 8008274:	d10b      	bne.n	800828e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	889b      	ldrh	r3, [r3, #4]
 800827a:	0a1b      	lsrs	r3, r3, #8
 800827c:	b29b      	uxth	r3, r3
 800827e:	b2da      	uxtb	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f922 	bl	80084d0 <USBD_CtlSendStatus>
}
 800828c:	e003      	b.n	8008296 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f860 	bl	8008356 <USBD_CtlError>
}
 8008296:	bf00      	nop
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b082      	sub	sp, #8
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	3b01      	subs	r3, #1
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d80b      	bhi.n	80082ce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	885b      	ldrh	r3, [r3, #2]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d10c      	bne.n	80082d8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f902 	bl	80084d0 <USBD_CtlSendStatus>
      }
      break;
 80082cc:	e004      	b.n	80082d8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80082ce:	6839      	ldr	r1, [r7, #0]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f840 	bl	8008356 <USBD_CtlError>
      break;
 80082d6:	e000      	b.n	80082da <USBD_ClrFeature+0x3c>
      break;
 80082d8:	bf00      	nop
  }
}
 80082da:	bf00      	nop
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b084      	sub	sp, #16
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	781a      	ldrb	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	3301      	adds	r3, #1
 80082fc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	781a      	ldrb	r2, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	3301      	adds	r3, #1
 800830a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f7ff fa3d 	bl	800778c <SWAPBYTE>
 8008312:	4603      	mov	r3, r0
 8008314:	461a      	mov	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	3301      	adds	r3, #1
 800831e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	3301      	adds	r3, #1
 8008324:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f7ff fa30 	bl	800778c <SWAPBYTE>
 800832c:	4603      	mov	r3, r0
 800832e:	461a      	mov	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	3301      	adds	r3, #1
 8008338:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	3301      	adds	r3, #1
 800833e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f7ff fa23 	bl	800778c <SWAPBYTE>
 8008346:	4603      	mov	r3, r0
 8008348:	461a      	mov	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	80da      	strh	r2, [r3, #6]
}
 800834e:	bf00      	nop
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b082      	sub	sp, #8
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008360:	2180      	movs	r1, #128	@ 0x80
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fc32 	bl	8008bcc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008368:	2100      	movs	r1, #0
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fc2e 	bl	8008bcc <USBD_LL_StallEP>
}
 8008370:	bf00      	nop
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008384:	2300      	movs	r3, #0
 8008386:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d042      	beq.n	8008414 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008392:	6938      	ldr	r0, [r7, #16]
 8008394:	f000 f842 	bl	800841c <USBD_GetLen>
 8008398:	4603      	mov	r3, r0
 800839a:	3301      	adds	r3, #1
 800839c:	005b      	lsls	r3, r3, #1
 800839e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083a2:	d808      	bhi.n	80083b6 <USBD_GetString+0x3e>
 80083a4:	6938      	ldr	r0, [r7, #16]
 80083a6:	f000 f839 	bl	800841c <USBD_GetLen>
 80083aa:	4603      	mov	r3, r0
 80083ac:	3301      	adds	r3, #1
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	005b      	lsls	r3, r3, #1
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	e001      	b.n	80083ba <USBD_GetString+0x42>
 80083b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80083be:	7dfb      	ldrb	r3, [r7, #23]
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	4413      	add	r3, r2
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	7812      	ldrb	r2, [r2, #0]
 80083c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80083ca:	7dfb      	ldrb	r3, [r7, #23]
 80083cc:	3301      	adds	r3, #1
 80083ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083d0:	7dfb      	ldrb	r3, [r7, #23]
 80083d2:	68ba      	ldr	r2, [r7, #8]
 80083d4:	4413      	add	r3, r2
 80083d6:	2203      	movs	r2, #3
 80083d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80083da:	7dfb      	ldrb	r3, [r7, #23]
 80083dc:	3301      	adds	r3, #1
 80083de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083e0:	e013      	b.n	800840a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80083e2:	7dfb      	ldrb	r3, [r7, #23]
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	4413      	add	r3, r2
 80083e8:	693a      	ldr	r2, [r7, #16]
 80083ea:	7812      	ldrb	r2, [r2, #0]
 80083ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	3301      	adds	r3, #1
 80083f2:	613b      	str	r3, [r7, #16]
    idx++;
 80083f4:	7dfb      	ldrb	r3, [r7, #23]
 80083f6:	3301      	adds	r3, #1
 80083f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80083fa:	7dfb      	ldrb	r3, [r7, #23]
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	4413      	add	r3, r2
 8008400:	2200      	movs	r2, #0
 8008402:	701a      	strb	r2, [r3, #0]
    idx++;
 8008404:	7dfb      	ldrb	r3, [r7, #23]
 8008406:	3301      	adds	r3, #1
 8008408:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1e7      	bne.n	80083e2 <USBD_GetString+0x6a>
 8008412:	e000      	b.n	8008416 <USBD_GetString+0x9e>
    return;
 8008414:	bf00      	nop
  }
}
 8008416:	3718      	adds	r7, #24
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008424:	2300      	movs	r3, #0
 8008426:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800842c:	e005      	b.n	800843a <USBD_GetLen+0x1e>
  {
    len++;
 800842e:	7bfb      	ldrb	r3, [r7, #15]
 8008430:	3301      	adds	r3, #1
 8008432:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	3301      	adds	r3, #1
 8008438:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1f5      	bne.n	800842e <USBD_GetLen+0x12>
  }

  return len;
 8008442:	7bfb      	ldrb	r3, [r7, #15]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3714      	adds	r7, #20
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2202      	movs	r2, #2
 8008460:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	2100      	movs	r1, #0
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 fc2e 	bl	8008cde <USBD_LL_Transmit>

  return USBD_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	2100      	movs	r1, #0
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f000 fc1d 	bl	8008cde <USBD_LL_Transmit>

  return USBD_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b084      	sub	sp, #16
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	60f8      	str	r0, [r7, #12]
 80084b6:	60b9      	str	r1, [r7, #8]
 80084b8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	2100      	movs	r1, #0
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f000 fc2d 	bl	8008d20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2204      	movs	r2, #4
 80084dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084e0:	2300      	movs	r3, #0
 80084e2:	2200      	movs	r2, #0
 80084e4:	2100      	movs	r1, #0
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fbf9 	bl	8008cde <USBD_LL_Transmit>

  return USBD_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b082      	sub	sp, #8
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2205      	movs	r2, #5
 8008502:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008506:	2300      	movs	r3, #0
 8008508:	2200      	movs	r2, #0
 800850a:	2100      	movs	r1, #0
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fc07 	bl	8008d20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8008520:	2201      	movs	r2, #1
 8008522:	490e      	ldr	r1, [pc, #56]	@ (800855c <MX_USB_DEVICE_Init+0x40>)
 8008524:	480e      	ldr	r0, [pc, #56]	@ (8008560 <MX_USB_DEVICE_Init+0x44>)
 8008526:	f7fe fcfb 	bl	8006f20 <USBD_Init>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d001      	beq.n	8008534 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008530:	f7f8 fede 	bl	80012f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 8008534:	490b      	ldr	r1, [pc, #44]	@ (8008564 <MX_USB_DEVICE_Init+0x48>)
 8008536:	480a      	ldr	r0, [pc, #40]	@ (8008560 <MX_USB_DEVICE_Init+0x44>)
 8008538:	f7fe fd22 	bl	8006f80 <USBD_RegisterClass>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008542:	f7f8 fed5 	bl	80012f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8008546:	4806      	ldr	r0, [pc, #24]	@ (8008560 <MX_USB_DEVICE_Init+0x44>)
 8008548:	f7fe fd50 	bl	8006fec <USBD_Start>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008552:	f7f8 fecd 	bl	80012f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008556:	bf00      	nop
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	20000140 	.word	0x20000140
 8008560:	200002bc 	.word	0x200002bc
 8008564:	20000064 	.word	0x20000064

08008568 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	4603      	mov	r3, r0
 8008570:	6039      	str	r1, [r7, #0]
 8008572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	2212      	movs	r2, #18
 8008578:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800857a:	4b03      	ldr	r3, [pc, #12]	@ (8008588 <USBD_HS_DeviceDescriptor+0x20>)
}
 800857c:	4618      	mov	r0, r3
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	2000015c 	.word	0x2000015c

0800858c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	4603      	mov	r3, r0
 8008594:	6039      	str	r1, [r7, #0]
 8008596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	2204      	movs	r2, #4
 800859c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800859e:	4b03      	ldr	r3, [pc, #12]	@ (80085ac <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr
 80085ac:	20000170 	.word	0x20000170

080085b0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	4603      	mov	r3, r0
 80085b8:	6039      	str	r1, [r7, #0]
 80085ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085bc:	79fb      	ldrb	r3, [r7, #7]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d105      	bne.n	80085ce <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	4907      	ldr	r1, [pc, #28]	@ (80085e4 <USBD_HS_ProductStrDescriptor+0x34>)
 80085c6:	4808      	ldr	r0, [pc, #32]	@ (80085e8 <USBD_HS_ProductStrDescriptor+0x38>)
 80085c8:	f7ff fed6 	bl	8008378 <USBD_GetString>
 80085cc:	e004      	b.n	80085d8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	4904      	ldr	r1, [pc, #16]	@ (80085e4 <USBD_HS_ProductStrDescriptor+0x34>)
 80085d2:	4805      	ldr	r0, [pc, #20]	@ (80085e8 <USBD_HS_ProductStrDescriptor+0x38>)
 80085d4:	f7ff fed0 	bl	8008378 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085d8:	4b02      	ldr	r3, [pc, #8]	@ (80085e4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	20000598 	.word	0x20000598
 80085e8:	08008e5c 	.word	0x08008e5c

080085ec <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	4603      	mov	r3, r0
 80085f4:	6039      	str	r1, [r7, #0]
 80085f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085f8:	683a      	ldr	r2, [r7, #0]
 80085fa:	4904      	ldr	r1, [pc, #16]	@ (800860c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80085fc:	4804      	ldr	r0, [pc, #16]	@ (8008610 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80085fe:	f7ff febb 	bl	8008378 <USBD_GetString>
  return USBD_StrDesc;
 8008602:	4b02      	ldr	r3, [pc, #8]	@ (800860c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8008604:	4618      	mov	r0, r3
 8008606:	3708      	adds	r7, #8
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}
 800860c:	20000598 	.word	0x20000598
 8008610:	08008e74 	.word	0x08008e74

08008614 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	4603      	mov	r3, r0
 800861c:	6039      	str	r1, [r7, #0]
 800861e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	221a      	movs	r2, #26
 8008624:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008626:	f000 f843 	bl	80086b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800862a:	4b02      	ldr	r3, [pc, #8]	@ (8008634 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800862c:	4618      	mov	r0, r3
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	20000174 	.word	0x20000174

08008638 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	4603      	mov	r3, r0
 8008640:	6039      	str	r1, [r7, #0]
 8008642:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008644:	79fb      	ldrb	r3, [r7, #7]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d105      	bne.n	8008656 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	4907      	ldr	r1, [pc, #28]	@ (800866c <USBD_HS_ConfigStrDescriptor+0x34>)
 800864e:	4808      	ldr	r0, [pc, #32]	@ (8008670 <USBD_HS_ConfigStrDescriptor+0x38>)
 8008650:	f7ff fe92 	bl	8008378 <USBD_GetString>
 8008654:	e004      	b.n	8008660 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8008656:	683a      	ldr	r2, [r7, #0]
 8008658:	4904      	ldr	r1, [pc, #16]	@ (800866c <USBD_HS_ConfigStrDescriptor+0x34>)
 800865a:	4805      	ldr	r0, [pc, #20]	@ (8008670 <USBD_HS_ConfigStrDescriptor+0x38>)
 800865c:	f7ff fe8c 	bl	8008378 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008660:	4b02      	ldr	r3, [pc, #8]	@ (800866c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8008662:	4618      	mov	r0, r3
 8008664:	3708      	adds	r7, #8
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	20000598 	.word	0x20000598
 8008670:	08008e88 	.word	0x08008e88

08008674 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	4603      	mov	r3, r0
 800867c:	6039      	str	r1, [r7, #0]
 800867e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008680:	79fb      	ldrb	r3, [r7, #7]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d105      	bne.n	8008692 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8008686:	683a      	ldr	r2, [r7, #0]
 8008688:	4907      	ldr	r1, [pc, #28]	@ (80086a8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800868a:	4808      	ldr	r0, [pc, #32]	@ (80086ac <USBD_HS_InterfaceStrDescriptor+0x38>)
 800868c:	f7ff fe74 	bl	8008378 <USBD_GetString>
 8008690:	e004      	b.n	800869c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	4904      	ldr	r1, [pc, #16]	@ (80086a8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8008696:	4805      	ldr	r0, [pc, #20]	@ (80086ac <USBD_HS_InterfaceStrDescriptor+0x38>)
 8008698:	f7ff fe6e 	bl	8008378 <USBD_GetString>
  }
  return USBD_StrDesc;
 800869c:	4b02      	ldr	r3, [pc, #8]	@ (80086a8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	20000598 	.word	0x20000598
 80086ac:	08008e94 	.word	0x08008e94

080086b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80086b6:	4b0f      	ldr	r3, [pc, #60]	@ (80086f4 <Get_SerialNum+0x44>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80086bc:	4b0e      	ldr	r3, [pc, #56]	@ (80086f8 <Get_SerialNum+0x48>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80086c2:	4b0e      	ldr	r3, [pc, #56]	@ (80086fc <Get_SerialNum+0x4c>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4413      	add	r3, r2
 80086ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d009      	beq.n	80086ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086d6:	2208      	movs	r2, #8
 80086d8:	4909      	ldr	r1, [pc, #36]	@ (8008700 <Get_SerialNum+0x50>)
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f000 f814 	bl	8008708 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086e0:	2204      	movs	r2, #4
 80086e2:	4908      	ldr	r1, [pc, #32]	@ (8008704 <Get_SerialNum+0x54>)
 80086e4:	68b8      	ldr	r0, [r7, #8]
 80086e6:	f000 f80f 	bl	8008708 <IntToUnicode>
  }
}
 80086ea:	bf00      	nop
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	1fff7a10 	.word	0x1fff7a10
 80086f8:	1fff7a14 	.word	0x1fff7a14
 80086fc:	1fff7a18 	.word	0x1fff7a18
 8008700:	20000176 	.word	0x20000176
 8008704:	20000186 	.word	0x20000186

08008708 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008708:	b480      	push	{r7}
 800870a:	b087      	sub	sp, #28
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	4613      	mov	r3, r2
 8008714:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008716:	2300      	movs	r3, #0
 8008718:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800871a:	2300      	movs	r3, #0
 800871c:	75fb      	strb	r3, [r7, #23]
 800871e:	e027      	b.n	8008770 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	0f1b      	lsrs	r3, r3, #28
 8008724:	2b09      	cmp	r3, #9
 8008726:	d80b      	bhi.n	8008740 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	0f1b      	lsrs	r3, r3, #28
 800872c:	b2da      	uxtb	r2, r3
 800872e:	7dfb      	ldrb	r3, [r7, #23]
 8008730:	005b      	lsls	r3, r3, #1
 8008732:	4619      	mov	r1, r3
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	440b      	add	r3, r1
 8008738:	3230      	adds	r2, #48	@ 0x30
 800873a:	b2d2      	uxtb	r2, r2
 800873c:	701a      	strb	r2, [r3, #0]
 800873e:	e00a      	b.n	8008756 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	0f1b      	lsrs	r3, r3, #28
 8008744:	b2da      	uxtb	r2, r3
 8008746:	7dfb      	ldrb	r3, [r7, #23]
 8008748:	005b      	lsls	r3, r3, #1
 800874a:	4619      	mov	r1, r3
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	440b      	add	r3, r1
 8008750:	3237      	adds	r2, #55	@ 0x37
 8008752:	b2d2      	uxtb	r2, r2
 8008754:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	011b      	lsls	r3, r3, #4
 800875a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800875c:	7dfb      	ldrb	r3, [r7, #23]
 800875e:	005b      	lsls	r3, r3, #1
 8008760:	3301      	adds	r3, #1
 8008762:	68ba      	ldr	r2, [r7, #8]
 8008764:	4413      	add	r3, r2
 8008766:	2200      	movs	r2, #0
 8008768:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800876a:	7dfb      	ldrb	r3, [r7, #23]
 800876c:	3301      	adds	r3, #1
 800876e:	75fb      	strb	r3, [r7, #23]
 8008770:	7dfa      	ldrb	r2, [r7, #23]
 8008772:	79fb      	ldrb	r3, [r7, #7]
 8008774:	429a      	cmp	r2, r3
 8008776:	d3d3      	bcc.n	8008720 <IntToUnicode+0x18>
  }
}
 8008778:	bf00      	nop
 800877a:	bf00      	nop
 800877c:	371c      	adds	r7, #28
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr
	...

08008788 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b08a      	sub	sp, #40	@ 0x28
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008790:	f107 0314 	add.w	r3, r7, #20
 8008794:	2200      	movs	r2, #0
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	605a      	str	r2, [r3, #4]
 800879a:	609a      	str	r2, [r3, #8]
 800879c:	60da      	str	r2, [r3, #12]
 800879e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a33      	ldr	r2, [pc, #204]	@ (8008874 <HAL_PCD_MspInit+0xec>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d15f      	bne.n	800886a <HAL_PCD_MspInit+0xe2>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087aa:	2300      	movs	r3, #0
 80087ac:	613b      	str	r3, [r7, #16]
 80087ae:	4b32      	ldr	r3, [pc, #200]	@ (8008878 <HAL_PCD_MspInit+0xf0>)
 80087b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087b2:	4a31      	ldr	r2, [pc, #196]	@ (8008878 <HAL_PCD_MspInit+0xf0>)
 80087b4:	f043 0301 	orr.w	r3, r3, #1
 80087b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80087ba:	4b2f      	ldr	r3, [pc, #188]	@ (8008878 <HAL_PCD_MspInit+0xf0>)
 80087bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087be:	f003 0301 	and.w	r3, r3, #1
 80087c2:	613b      	str	r3, [r7, #16]
 80087c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80087c6:	2300      	movs	r3, #0
 80087c8:	60fb      	str	r3, [r7, #12]
 80087ca:	4b2b      	ldr	r3, [pc, #172]	@ (8008878 <HAL_PCD_MspInit+0xf0>)
 80087cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ce:	4a2a      	ldr	r2, [pc, #168]	@ (8008878 <HAL_PCD_MspInit+0xf0>)
 80087d0:	f043 0302 	orr.w	r3, r3, #2
 80087d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80087d6:	4b28      	ldr	r3, [pc, #160]	@ (8008878 <HAL_PCD_MspInit+0xf0>)
 80087d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087da:	f003 0302 	and.w	r3, r3, #2
 80087de:	60fb      	str	r3, [r7, #12]
 80087e0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> USB_OTG_HS_SOF
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80087e2:	2310      	movs	r3, #16
 80087e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087e6:	2302      	movs	r3, #2
 80087e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087ea:	2300      	movs	r3, #0
 80087ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087ee:	2303      	movs	r3, #3
 80087f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80087f2:	230c      	movs	r3, #12
 80087f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087f6:	f107 0314 	add.w	r3, r7, #20
 80087fa:	4619      	mov	r1, r3
 80087fc:	481f      	ldr	r0, [pc, #124]	@ (800887c <HAL_PCD_MspInit+0xf4>)
 80087fe:	f7fa fa73 	bl	8002ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008802:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008808:	2300      	movs	r3, #0
 800880a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800880c:	2300      	movs	r3, #0
 800880e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008810:	f107 0314 	add.w	r3, r7, #20
 8008814:	4619      	mov	r1, r3
 8008816:	481a      	ldr	r0, [pc, #104]	@ (8008880 <HAL_PCD_MspInit+0xf8>)
 8008818:	f7fa fa66 	bl	8002ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800881c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8008820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008822:	2302      	movs	r3, #2
 8008824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008826:	2300      	movs	r3, #0
 8008828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800882a:	2303      	movs	r3, #3
 800882c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800882e:	230c      	movs	r3, #12
 8008830:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008832:	f107 0314 	add.w	r3, r7, #20
 8008836:	4619      	mov	r1, r3
 8008838:	4811      	ldr	r0, [pc, #68]	@ (8008880 <HAL_PCD_MspInit+0xf8>)
 800883a:	f7fa fa55 	bl	8002ce8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800883e:	2300      	movs	r3, #0
 8008840:	60bb      	str	r3, [r7, #8]
 8008842:	4b0d      	ldr	r3, [pc, #52]	@ (8008878 <HAL_PCD_MspInit+0xf0>)
 8008844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008846:	4a0c      	ldr	r2, [pc, #48]	@ (8008878 <HAL_PCD_MspInit+0xf0>)
 8008848:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800884c:	6313      	str	r3, [r2, #48]	@ 0x30
 800884e:	4b0a      	ldr	r3, [pc, #40]	@ (8008878 <HAL_PCD_MspInit+0xf0>)
 8008850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008852:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008856:	60bb      	str	r3, [r7, #8]
 8008858:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800885a:	2200      	movs	r2, #0
 800885c:	2100      	movs	r1, #0
 800885e:	204d      	movs	r0, #77	@ 0x4d
 8008860:	f7f9 fe9b 	bl	800259a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8008864:	204d      	movs	r0, #77	@ 0x4d
 8008866:	f7f9 feb4 	bl	80025d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800886a:	bf00      	nop
 800886c:	3728      	adds	r7, #40	@ 0x28
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	40040000 	.word	0x40040000
 8008878:	40023800 	.word	0x40023800
 800887c:	40020000 	.word	0x40020000
 8008880:	40020400 	.word	0x40020400

08008884 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008898:	4619      	mov	r1, r3
 800889a:	4610      	mov	r0, r2
 800889c:	f7fe fbf3 	bl	8007086 <USBD_LL_SetupStage>
}
 80088a0:	bf00      	nop
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	460b      	mov	r3, r1
 80088b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80088ba:	78fa      	ldrb	r2, [r7, #3]
 80088bc:	6879      	ldr	r1, [r7, #4]
 80088be:	4613      	mov	r3, r2
 80088c0:	00db      	lsls	r3, r3, #3
 80088c2:	4413      	add	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	440b      	add	r3, r1
 80088c8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	78fb      	ldrb	r3, [r7, #3]
 80088d0:	4619      	mov	r1, r3
 80088d2:	f7fe fc2d 	bl	8007130 <USBD_LL_DataOutStage>
}
 80088d6:	bf00      	nop
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b082      	sub	sp, #8
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
 80088e6:	460b      	mov	r3, r1
 80088e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80088f0:	78fa      	ldrb	r2, [r7, #3]
 80088f2:	6879      	ldr	r1, [r7, #4]
 80088f4:	4613      	mov	r3, r2
 80088f6:	00db      	lsls	r3, r3, #3
 80088f8:	4413      	add	r3, r2
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	440b      	add	r3, r1
 80088fe:	3320      	adds	r3, #32
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	78fb      	ldrb	r3, [r7, #3]
 8008904:	4619      	mov	r1, r3
 8008906:	f7fe fccf 	bl	80072a8 <USBD_LL_DataInStage>
}
 800890a:	bf00      	nop
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b082      	sub	sp, #8
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008920:	4618      	mov	r0, r3
 8008922:	f7fe fe13 	bl	800754c <USBD_LL_SOF>
}
 8008926:	bf00      	nop
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b084      	sub	sp, #16
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008936:	2301      	movs	r3, #1
 8008938:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	79db      	ldrb	r3, [r3, #7]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d102      	bne.n	8008948 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008942:	2300      	movs	r3, #0
 8008944:	73fb      	strb	r3, [r7, #15]
 8008946:	e008      	b.n	800895a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	79db      	ldrb	r3, [r3, #7]
 800894c:	2b02      	cmp	r3, #2
 800894e:	d102      	bne.n	8008956 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008950:	2301      	movs	r3, #1
 8008952:	73fb      	strb	r3, [r7, #15]
 8008954:	e001      	b.n	800895a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008956:	f7f8 fccb 	bl	80012f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008960:	7bfa      	ldrb	r2, [r7, #15]
 8008962:	4611      	mov	r1, r2
 8008964:	4618      	mov	r0, r3
 8008966:	f7fe fdad 	bl	80074c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008970:	4618      	mov	r0, r3
 8008972:	f7fe fd54 	bl	800741e <USBD_LL_Reset>
}
 8008976:	bf00      	nop
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
	...

08008980 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800898e:	4618      	mov	r0, r3
 8008990:	f7fe fda8 	bl	80074e4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	6812      	ldr	r2, [r2, #0]
 80089a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80089a6:	f043 0301 	orr.w	r3, r3, #1
 80089aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	7adb      	ldrb	r3, [r3, #11]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d005      	beq.n	80089c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80089b4:	4b04      	ldr	r3, [pc, #16]	@ (80089c8 <HAL_PCD_SuspendCallback+0x48>)
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	4a03      	ldr	r2, [pc, #12]	@ (80089c8 <HAL_PCD_SuspendCallback+0x48>)
 80089ba:	f043 0306 	orr.w	r3, r3, #6
 80089be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80089c0:	bf00      	nop
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	e000ed00 	.word	0xe000ed00

080089cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fe fd9e 	bl	800751c <USBD_LL_Resume>
}
 80089e0:	bf00      	nop
 80089e2:	3708      	adds	r7, #8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	460b      	mov	r3, r1
 80089f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089fa:	78fa      	ldrb	r2, [r7, #3]
 80089fc:	4611      	mov	r1, r2
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fe fdf6 	bl	80075f0 <USBD_LL_IsoOUTIncomplete>
}
 8008a04:	bf00      	nop
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	460b      	mov	r3, r1
 8008a16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a1e:	78fa      	ldrb	r2, [r7, #3]
 8008a20:	4611      	mov	r1, r2
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fe fdb2 	bl	800758c <USBD_LL_IsoINIncomplete>
}
 8008a28:	bf00      	nop
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7fe fe08 	bl	8007654 <USBD_LL_DevConnected>
}
 8008a44:	bf00      	nop
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fe fe05 	bl	800766a <USBD_LL_DevDisconnected>
}
 8008a60:	bf00      	nop
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d140      	bne.n	8008afa <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8008a78:	4a22      	ldr	r2, [pc, #136]	@ (8008b04 <USBD_LL_Init+0x9c>)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a20      	ldr	r2, [pc, #128]	@ (8008b04 <USBD_LL_Init+0x9c>)
 8008a84:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8008a88:	4b1e      	ldr	r3, [pc, #120]	@ (8008b04 <USBD_LL_Init+0x9c>)
 8008a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8008b08 <USBD_LL_Init+0xa0>)
 8008a8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8008a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8008b04 <USBD_LL_Init+0x9c>)
 8008a90:	2206      	movs	r2, #6
 8008a92:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8008a94:	4b1b      	ldr	r3, [pc, #108]	@ (8008b04 <USBD_LL_Init+0x9c>)
 8008a96:	2202      	movs	r2, #2
 8008a98:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8008a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8008b04 <USBD_LL_Init+0x9c>)
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8008aa0:	4b18      	ldr	r3, [pc, #96]	@ (8008b04 <USBD_LL_Init+0x9c>)
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = ENABLE;
 8008aa6:	4b17      	ldr	r3, [pc, #92]	@ (8008b04 <USBD_LL_Init+0x9c>)
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8008aac:	4b15      	ldr	r3, [pc, #84]	@ (8008b04 <USBD_LL_Init+0x9c>)
 8008aae:	2200      	movs	r2, #0
 8008ab0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8008ab2:	4b14      	ldr	r3, [pc, #80]	@ (8008b04 <USBD_LL_Init+0x9c>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8008ab8:	4b12      	ldr	r3, [pc, #72]	@ (8008b04 <USBD_LL_Init+0x9c>)
 8008aba:	2201      	movs	r2, #1
 8008abc:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8008abe:	4b11      	ldr	r3, [pc, #68]	@ (8008b04 <USBD_LL_Init+0x9c>)
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8008ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8008b04 <USBD_LL_Init+0x9c>)
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8008aca:	480e      	ldr	r0, [pc, #56]	@ (8008b04 <USBD_LL_Init+0x9c>)
 8008acc:	f7fa fae9 	bl	80030a2 <HAL_PCD_Init>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d001      	beq.n	8008ada <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8008ad6:	f7f8 fc0b 	bl	80012f0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8008ada:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008ade:	4809      	ldr	r0, [pc, #36]	@ (8008b04 <USBD_LL_Init+0x9c>)
 8008ae0:	f7fb fcfd 	bl	80044de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8008ae4:	2280      	movs	r2, #128	@ 0x80
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	4806      	ldr	r0, [pc, #24]	@ (8008b04 <USBD_LL_Init+0x9c>)
 8008aea:	f7fb fcb1 	bl	8004450 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8008aee:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8008af2:	2101      	movs	r1, #1
 8008af4:	4803      	ldr	r0, [pc, #12]	@ (8008b04 <USBD_LL_Init+0x9c>)
 8008af6:	f7fb fcab 	bl	8004450 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	20000798 	.word	0x20000798
 8008b08:	40040000 	.word	0x40040000

08008b0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7fa fbcc 	bl	80032c0 <HAL_PCD_Start>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 f930 	bl	8008d94 <USBD_Get_USB_Status>
 8008b34:	4603      	mov	r3, r0
 8008b36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b084      	sub	sp, #16
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	4608      	mov	r0, r1
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	461a      	mov	r2, r3
 8008b50:	4603      	mov	r3, r0
 8008b52:	70fb      	strb	r3, [r7, #3]
 8008b54:	460b      	mov	r3, r1
 8008b56:	70bb      	strb	r3, [r7, #2]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008b6a:	78bb      	ldrb	r3, [r7, #2]
 8008b6c:	883a      	ldrh	r2, [r7, #0]
 8008b6e:	78f9      	ldrb	r1, [r7, #3]
 8008b70:	f7fb f8a0 	bl	8003cb4 <HAL_PCD_EP_Open>
 8008b74:	4603      	mov	r3, r0
 8008b76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 f90a 	bl	8008d94 <USBD_Get_USB_Status>
 8008b80:	4603      	mov	r3, r0
 8008b82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b084      	sub	sp, #16
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	460b      	mov	r3, r1
 8008b98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ba8:	78fa      	ldrb	r2, [r7, #3]
 8008baa:	4611      	mov	r1, r2
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7fb f8eb 	bl	8003d88 <HAL_PCD_EP_Close>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bb6:	7bfb      	ldrb	r3, [r7, #15]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 f8eb 	bl	8008d94 <USBD_Get_USB_Status>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008be6:	78fa      	ldrb	r2, [r7, #3]
 8008be8:	4611      	mov	r1, r2
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7fb f98b 	bl	8003f06 <HAL_PCD_EP_SetStall>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bf4:	7bfb      	ldrb	r3, [r7, #15]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 f8cc 	bl	8008d94 <USBD_Get_USB_Status>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c00:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b084      	sub	sp, #16
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
 8008c12:	460b      	mov	r3, r1
 8008c14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c24:	78fa      	ldrb	r2, [r7, #3]
 8008c26:	4611      	mov	r1, r2
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7fb f9cf 	bl	8003fcc <HAL_PCD_EP_ClrStall>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f000 f8ad 	bl	8008d94 <USBD_Get_USB_Status>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	da0b      	bge.n	8008c7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c64:	78fb      	ldrb	r3, [r7, #3]
 8008c66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c6a:	68f9      	ldr	r1, [r7, #12]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	00db      	lsls	r3, r3, #3
 8008c70:	4413      	add	r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	440b      	add	r3, r1
 8008c76:	3316      	adds	r3, #22
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	e00b      	b.n	8008c94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c7c:	78fb      	ldrb	r3, [r7, #3]
 8008c7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c82:	68f9      	ldr	r1, [r7, #12]
 8008c84:	4613      	mov	r3, r2
 8008c86:	00db      	lsls	r3, r3, #3
 8008c88:	4413      	add	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	440b      	add	r3, r1
 8008c8e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008c92:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	460b      	mov	r3, r1
 8008caa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cac:	2300      	movs	r3, #0
 8008cae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008cba:	78fa      	ldrb	r2, [r7, #3]
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fa ffd4 	bl	8003c6c <HAL_PCD_SetAddress>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cc8:	7bfb      	ldrb	r3, [r7, #15]
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 f862 	bl	8008d94 <USBD_Get_USB_Status>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b086      	sub	sp, #24
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	60f8      	str	r0, [r7, #12]
 8008ce6:	607a      	str	r2, [r7, #4]
 8008ce8:	603b      	str	r3, [r7, #0]
 8008cea:	460b      	mov	r3, r1
 8008cec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008cfc:	7af9      	ldrb	r1, [r7, #11]
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	f7fb f8c6 	bl	8003e92 <HAL_PCD_EP_Transmit>
 8008d06:	4603      	mov	r3, r0
 8008d08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d0a:	7dfb      	ldrb	r3, [r7, #23]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f000 f841 	bl	8008d94 <USBD_Get_USB_Status>
 8008d12:	4603      	mov	r3, r0
 8008d14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d16:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3718      	adds	r7, #24
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	607a      	str	r2, [r7, #4]
 8008d2a:	603b      	str	r3, [r7, #0]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008d3e:	7af9      	ldrb	r1, [r7, #11]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	f7fb f86a 	bl	8003e1c <HAL_PCD_EP_Receive>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d4c:	7dfb      	ldrb	r3, [r7, #23]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 f820 	bl	8008d94 <USBD_Get_USB_Status>
 8008d54:	4603      	mov	r3, r0
 8008d56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d58:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3718      	adds	r7, #24
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
	...

08008d64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d6c:	4b03      	ldr	r3, [pc, #12]	@ (8008d7c <USBD_static_malloc+0x18>)
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	20000c7c 	.word	0x20000c7c

08008d80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]

}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008da2:	79fb      	ldrb	r3, [r7, #7]
 8008da4:	2b03      	cmp	r3, #3
 8008da6:	d817      	bhi.n	8008dd8 <USBD_Get_USB_Status+0x44>
 8008da8:	a201      	add	r2, pc, #4	@ (adr r2, 8008db0 <USBD_Get_USB_Status+0x1c>)
 8008daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dae:	bf00      	nop
 8008db0:	08008dc1 	.word	0x08008dc1
 8008db4:	08008dc7 	.word	0x08008dc7
 8008db8:	08008dcd 	.word	0x08008dcd
 8008dbc:	08008dd3 	.word	0x08008dd3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	73fb      	strb	r3, [r7, #15]
    break;
 8008dc4:	e00b      	b.n	8008dde <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	73fb      	strb	r3, [r7, #15]
    break;
 8008dca:	e008      	b.n	8008dde <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd0:	e005      	b.n	8008dde <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd6:	e002      	b.n	8008dde <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	73fb      	strb	r3, [r7, #15]
    break;
 8008ddc:	bf00      	nop
  }
  return usb_status;
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3714      	adds	r7, #20
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <memset>:
 8008dec:	4402      	add	r2, r0
 8008dee:	4603      	mov	r3, r0
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d100      	bne.n	8008df6 <memset+0xa>
 8008df4:	4770      	bx	lr
 8008df6:	f803 1b01 	strb.w	r1, [r3], #1
 8008dfa:	e7f9      	b.n	8008df0 <memset+0x4>

08008dfc <__libc_init_array>:
 8008dfc:	b570      	push	{r4, r5, r6, lr}
 8008dfe:	4d0d      	ldr	r5, [pc, #52]	@ (8008e34 <__libc_init_array+0x38>)
 8008e00:	4c0d      	ldr	r4, [pc, #52]	@ (8008e38 <__libc_init_array+0x3c>)
 8008e02:	1b64      	subs	r4, r4, r5
 8008e04:	10a4      	asrs	r4, r4, #2
 8008e06:	2600      	movs	r6, #0
 8008e08:	42a6      	cmp	r6, r4
 8008e0a:	d109      	bne.n	8008e20 <__libc_init_array+0x24>
 8008e0c:	4d0b      	ldr	r5, [pc, #44]	@ (8008e3c <__libc_init_array+0x40>)
 8008e0e:	4c0c      	ldr	r4, [pc, #48]	@ (8008e40 <__libc_init_array+0x44>)
 8008e10:	f000 f818 	bl	8008e44 <_init>
 8008e14:	1b64      	subs	r4, r4, r5
 8008e16:	10a4      	asrs	r4, r4, #2
 8008e18:	2600      	movs	r6, #0
 8008e1a:	42a6      	cmp	r6, r4
 8008e1c:	d105      	bne.n	8008e2a <__libc_init_array+0x2e>
 8008e1e:	bd70      	pop	{r4, r5, r6, pc}
 8008e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e24:	4798      	blx	r3
 8008e26:	3601      	adds	r6, #1
 8008e28:	e7ee      	b.n	8008e08 <__libc_init_array+0xc>
 8008e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e2e:	4798      	blx	r3
 8008e30:	3601      	adds	r6, #1
 8008e32:	e7f2      	b.n	8008e1a <__libc_init_array+0x1e>
 8008e34:	08008ecc 	.word	0x08008ecc
 8008e38:	08008ecc 	.word	0x08008ecc
 8008e3c:	08008ecc 	.word	0x08008ecc
 8008e40:	08008ed0 	.word	0x08008ed0

08008e44 <_init>:
 8008e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e46:	bf00      	nop
 8008e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e4a:	bc08      	pop	{r3}
 8008e4c:	469e      	mov	lr, r3
 8008e4e:	4770      	bx	lr

08008e50 <_fini>:
 8008e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e52:	bf00      	nop
 8008e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e56:	bc08      	pop	{r3}
 8008e58:	469e      	mov	lr, r3
 8008e5a:	4770      	bx	lr
